// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsCodeActionInitParameters struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []CodeActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsCodeActionObservation struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []CodeActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsCodeActionParameters struct {

	// Action name.
	// Action name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	// +kubebuilder:validation:Optional
	Parameters []CodeActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type ActionsInitParameters struct {

	// Define a code action.
	// Define a code action.
	CodeAction []CodeActionInitParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Define a normal action.
	// Define a normal action.
	NormalAction []NormalActionInitParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Define a rewrite action.
	// Define a rewrite action.
	RewriteAction []RewriteActionInitParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type ActionsNormalActionInitParameters struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []ActionsNormalActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsNormalActionObservation struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []ActionsNormalActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsNormalActionParameters struct {

	// Action name.
	// Action name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	// +kubebuilder:validation:Optional
	Parameters []ActionsNormalActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type ActionsNormalActionParametersInitParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsNormalActionParametersObservation struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsNormalActionParametersParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type ActionsObservation struct {

	// Define a code action.
	// Define a code action.
	CodeAction []CodeActionObservation `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Define a normal action.
	// Define a normal action.
	NormalAction []NormalActionObservation `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Define a rewrite action.
	// Define a rewrite action.
	RewriteAction []RewriteActionObservation `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type ActionsParameters struct {

	// Define a code action.
	// Define a code action.
	// +kubebuilder:validation:Optional
	CodeAction []CodeActionParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Define a normal action.
	// Define a normal action.
	// +kubebuilder:validation:Optional
	NormalAction []NormalActionParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Define a rewrite action.
	// Define a rewrite action.
	// +kubebuilder:validation:Optional
	RewriteAction []RewriteActionParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type ActionsRewriteActionInitParameters struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []ActionsRewriteActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsRewriteActionObservation struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []ActionsRewriteActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type ActionsRewriteActionParameters struct {

	// Action name.
	// Action name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	// +kubebuilder:validation:Optional
	Parameters []ActionsRewriteActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type ActionsRewriteActionParametersInitParameters struct {

	// Action name.
	// Action to take on the HEADER. Valid values: `add`, `del`, `set`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Target HEADER name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsRewriteActionParametersObservation struct {

	// Action name.
	// Action to take on the HEADER. Valid values: `add`, `del`, `set`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Target HEADER name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ActionsRewriteActionParametersParameters struct {

	// Action name.
	// Action to take on the HEADER. Valid values: `add`, `del`, `set`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Target HEADER name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Value.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type AndInitParameters struct {

	// Whether to ignore the case of the parameter value, the default value is false.
	// Whether to ignore the case of the parameter value, the default value is false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition operator. Valid values are equal, notequal.
	// Condition operator. Valid values are `equal`, `notequal`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Condition target. Valid values:- host: Host of the URL.- filename: filename of the URL.- extension: file extension of the URL.- full_url: full url.- url: path of the URL.
	// Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Condition Value.
	// Condition Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AndObservation struct {

	// Whether to ignore the case of the parameter value, the default value is false.
	// Whether to ignore the case of the parameter value, the default value is false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition operator. Valid values are equal, notequal.
	// Condition operator. Valid values are `equal`, `notequal`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Condition target. Valid values:- host: Host of the URL.- filename: filename of the URL.- extension: file extension of the URL.- full_url: full url.- url: path of the URL.
	// Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Condition Value.
	// Condition Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AndParameters struct {

	// Whether to ignore the case of the parameter value, the default value is false.
	// Whether to ignore the case of the parameter value, the default value is false.
	// +kubebuilder:validation:Optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition operator. Valid values are equal, notequal.
	// Condition operator. Valid values are `equal`, `notequal`.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// Condition target. Valid values:- host: Host of the URL.- filename: filename of the URL.- extension: file extension of the URL.- full_url: full url.- url: path of the URL.
	// Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// Condition Value.
	// Condition Value.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type CodeActionInitParameters struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []ParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type CodeActionObservation struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []ParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type CodeActionParameters struct {

	// Action name.
	// Action name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	// +kubebuilder:validation:Optional
	Parameters []ParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type CodeActionParametersInitParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// HTTP status code to use.
	// HTTP status code to use.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CodeActionParametersObservation struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// HTTP status code to use.
	// HTTP status code to use.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CodeActionParametersParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// HTTP status code to use.
	// HTTP status code to use.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode" tf:"status_code,omitempty"`

	// Condition Value.
	// Parameter Values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type NormalActionInitParameters struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []NormalActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type NormalActionObservation struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []NormalActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type NormalActionParameters struct {

	// Action name.
	// Action name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	// +kubebuilder:validation:Optional
	Parameters []NormalActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type NormalActionParametersInitParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NormalActionParametersObservation struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NormalActionParametersParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type OrAndInitParameters struct {

	// Whether to ignore the case of the parameter value, the default value is false.
	// Whether to ignore the case of the parameter value, the default value is false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty:- `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition operator. Valid values are equal, notequal.
	// Condition operator. Valid values are `equal`, `notequal`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Condition target. Valid values:- host: Host of the URL.- filename: filename of the URL.- extension: file extension of the URL.- full_url: full url.- url: path of the URL.
	// Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Condition Value.
	// Condition Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type OrAndObservation struct {

	// Whether to ignore the case of the parameter value, the default value is false.
	// Whether to ignore the case of the parameter value, the default value is false.
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty:- `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition operator. Valid values are equal, notequal.
	// Condition operator. Valid values are `equal`, `notequal`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Condition target. Valid values:- host: Host of the URL.- filename: filename of the URL.- extension: file extension of the URL.- full_url: full url.- url: path of the URL.
	// Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Condition Value.
	// Condition Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type OrAndParameters struct {

	// Whether to ignore the case of the parameter value, the default value is false.
	// Whether to ignore the case of the parameter value, the default value is false.
	// +kubebuilder:validation:Optional
	IgnoreCase *bool `json:"ignoreCase,omitempty" tf:"ignore_case,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty:- `query_string` (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; `request_header` (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition operator. Valid values are equal, notequal.
	// Condition operator. Valid values are `equal`, `notequal`.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// Condition target. Valid values:- host: Host of the URL.- filename: filename of the URL.- extension: file extension of the URL.- full_url: full url.- url: path of the URL.
	// Condition target. Valid values:- `host`: Host of the URL.- `filename`: filename of the URL.- `extension`: file extension of the URL.- `full_url`: full url.- `url`: path of the URL.
	// +kubebuilder:validation:Optional
	Target *string `json:"target" tf:"target,omitempty"`

	// Condition Value.
	// Condition Value.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type OrInitParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	And []AndInitParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type OrObservation struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	And []AndObservation `json:"and,omitempty" tf:"and,omitempty"`
}

type OrParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// +kubebuilder:validation:Optional
	And []AndParameters `json:"and" tf:"and,omitempty"`
}

type ParametersInitParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// HTTP status code to use.
	// HTTP status code to use.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ParametersObservation struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// HTTP status code to use.
	// HTTP status code to use.
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// Condition Value.
	// Parameter Values.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ParametersParameters struct {

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Parameter Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// HTTP status code to use.
	// HTTP status code to use.
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode" tf:"status_code,omitempty"`

	// Condition Value.
	// Parameter Values.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type RewriteActionInitParameters struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []RewriteActionParametersInitParameters `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type RewriteActionObservation struct {

	// Action name.
	// Action name.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	Parameters []RewriteActionParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

type RewriteActionParameters struct {

	// Action name.
	// Action name.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Action parameters.
	// Action parameters.
	// +kubebuilder:validation:Optional
	Parameters []RewriteActionParametersParameters `json:"parameters" tf:"parameters,omitempty"`
}

type RewriteActionParametersInitParameters struct {

	// Action name.
	// Action to take on the HEADER. Valid values: `add`, `del`, `set`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Target HEADER name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type RewriteActionParametersObservation struct {

	// Action name.
	// Action to take on the HEADER. Valid values: `add`, `del`, `set`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Target HEADER name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Value.
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type RewriteActionParametersParameters struct {

	// Action name.
	// Action to take on the HEADER. Valid values: `add`, `del`, `set`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// The parameter name corresponding to the matching type is valid when the Target value is the following, and the valid value cannot be empty: query_string (query string): The parameter name of the query string in the URL request under the current site, such as lang and version in lang=cn&version=1; request_header (HTTP request header): HTTP request header field name, such as Accept-Language in Accept-Language:zh-CN,zh;q=0.9.
	// Target HEADER name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Condition Value.
	// Parameter Value.
	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type RuleEngineInitParameters struct {

	// The rule name (1 to 255 characters).
	// The rule name (1 to 255 characters).
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule items list.
	// Rule items list.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Rule status. Values: enable: Enabled; disable: Disabled.
	// Rule status. Values: `enable`: Enabled; `disable`: Disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// rule tag list.
	// rule tag list.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type RuleEngineObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Rule ID.
	// Rule ID.
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// The rule name (1 to 255 characters).
	// The rule name (1 to 255 characters).
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule items list.
	// Rule items list.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// Rule status. Values: enable: Enabled; disable: Disabled.
	// Rule status. Values: `enable`: Enabled; `disable`: Disabled.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// rule tag list.
	// rule tag list.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the site.
	// ID of the site.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RuleEngineParameters struct {

	// The rule name (1 to 255 characters).
	// The rule name (1 to 255 characters).
	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule items list.
	// Rule items list.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// Rule status. Values: enable: Enabled; disable: Disabled.
	// Rule status. Values: `enable`: Enabled; `disable`: Disabled.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// rule tag list.
	// rule tag list.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// ID of the site.
	// ID of the site.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

type RulesActionsInitParameters struct {

	// Define a code action.
	// Define a code action.
	CodeAction []ActionsCodeActionInitParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Define a normal action.
	// Define a normal action.
	NormalAction []ActionsNormalActionInitParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Define a rewrite action.
	// Define a rewrite action.
	RewriteAction []ActionsRewriteActionInitParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type RulesActionsObservation struct {

	// Define a code action.
	// Define a code action.
	CodeAction []ActionsCodeActionObservation `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Define a normal action.
	// Define a normal action.
	NormalAction []ActionsNormalActionObservation `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Define a rewrite action.
	// Define a rewrite action.
	RewriteAction []ActionsRewriteActionObservation `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type RulesActionsParameters struct {

	// Define a code action.
	// Define a code action.
	// +kubebuilder:validation:Optional
	CodeAction []ActionsCodeActionParameters `json:"codeAction,omitempty" tf:"code_action,omitempty"`

	// Define a normal action.
	// Define a normal action.
	// +kubebuilder:validation:Optional
	NormalAction []ActionsNormalActionParameters `json:"normalAction,omitempty" tf:"normal_action,omitempty"`

	// Define a rewrite action.
	// Define a rewrite action.
	// +kubebuilder:validation:Optional
	RewriteAction []ActionsRewriteActionParameters `json:"rewriteAction,omitempty" tf:"rewrite_action,omitempty"`
}

type RulesInitParameters struct {

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	Actions []ActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	Or []OrInitParameters `json:"or,omitempty" tf:"or,omitempty"`

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	SubRules []SubRulesInitParameters `json:"subRules,omitempty" tf:"sub_rules,omitempty"`
}

type RulesObservation struct {

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	Or []OrObservation `json:"or,omitempty" tf:"or,omitempty"`

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	SubRules []SubRulesObservation `json:"subRules,omitempty" tf:"sub_rules,omitempty"`
}

type RulesOrInitParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	And []OrAndInitParameters `json:"and,omitempty" tf:"and,omitempty"`
}

type RulesOrObservation struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	And []OrAndObservation `json:"and,omitempty" tf:"and,omitempty"`
}

type RulesOrParameters struct {

	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// AND Conditions list of the rule. Rule would be triggered if all conditions are true.
	// +kubebuilder:validation:Optional
	And []OrAndParameters `json:"and" tf:"and,omitempty"`
}

type RulesParameters struct {

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	// +kubebuilder:validation:Optional
	Actions []ActionsParameters `json:"actions" tf:"actions,omitempty"`

	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// +kubebuilder:validation:Optional
	Or []OrParameters `json:"or" tf:"or,omitempty"`

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	// +kubebuilder:validation:Optional
	SubRules []SubRulesParameters `json:"subRules,omitempty" tf:"sub_rules,omitempty"`
}

type SubRulesInitParameters struct {

	// Rule items list.
	// Rule items list.
	Rules []SubRulesRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// rule tag list.
	// rule tag list.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SubRulesObservation struct {

	// Rule items list.
	// Rule items list.
	Rules []SubRulesRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// rule tag list.
	// rule tag list.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SubRulesParameters struct {

	// Rule items list.
	// Rule items list.
	// +kubebuilder:validation:Optional
	Rules []SubRulesRulesParameters `json:"rules" tf:"rules,omitempty"`

	// rule tag list.
	// rule tag list.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SubRulesRulesInitParameters struct {

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	Actions []RulesActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	Or []RulesOrInitParameters `json:"or,omitempty" tf:"or,omitempty"`
}

type SubRulesRulesObservation struct {

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	Actions []RulesActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	Or []RulesOrObservation `json:"or,omitempty" tf:"or,omitempty"`
}

type SubRulesRulesParameters struct {

	// Actions list of the rule. See details in data source rule_engine_setting.
	// Actions list of the rule. See details in data source `rule_engine_setting`.
	// +kubebuilder:validation:Optional
	Actions []RulesActionsParameters `json:"actions" tf:"actions,omitempty"`

	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// OR Conditions list of the rule. Rule would be triggered if any of the condition is true.
	// +kubebuilder:validation:Optional
	Or []RulesOrParameters `json:"or" tf:"or,omitempty"`
}

// RuleEngineSpec defines the desired state of RuleEngine
type RuleEngineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleEngineParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RuleEngineInitParameters `json:"initProvider,omitempty"`
}

// RuleEngineStatus defines the observed state of RuleEngine.
type RuleEngineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleEngineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleEngine is the Schema for the RuleEngines API. Provides a resource to create a teo rule_engine
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type RuleEngine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleName) || (has(self.initProvider) && has(self.initProvider.ruleName))",message="spec.forProvider.ruleName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rules) || (has(self.initProvider) && has(self.initProvider.rules))",message="spec.forProvider.rules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   RuleEngineSpec   `json:"spec"`
	Status RuleEngineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleEngineList contains a list of RuleEngines
type RuleEngineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleEngine `json:"items"`
}

// Repository type metadata.
var (
	RuleEngine_Kind             = "RuleEngine"
	RuleEngine_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleEngine_Kind}.String()
	RuleEngine_KindAPIVersion   = RuleEngine_Kind + "." + CRDGroupVersion.String()
	RuleEngine_GroupVersionKind = CRDGroupVersion.WithKind(RuleEngine_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleEngine{}, &RuleEngineList{})
}
