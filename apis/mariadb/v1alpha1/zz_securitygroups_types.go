// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityGroupsInitParameters struct {

	// instance id.
	// instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// product name, fixed to mariadb.
	// product name, fixed to mariadb.
	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	// security group id.
	// security group id.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecurityGroupsObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// instance id.
	// instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// product name, fixed to mariadb.
	// product name, fixed to mariadb.
	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	// security group id.
	// security group id.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecurityGroupsParameters struct {

	// instance id.
	// instance id.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// product name, fixed to mariadb.
	// product name, fixed to mariadb.
	// +kubebuilder:validation:Optional
	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	// security group id.
	// security group id.
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

// SecurityGroupsSpec defines the desired state of SecurityGroups
type SecurityGroupsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityGroupsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityGroupsInitParameters `json:"initProvider,omitempty"`
}

// SecurityGroupsStatus defines the observed state of SecurityGroups.
type SecurityGroupsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityGroupsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroups is the Schema for the SecurityGroupss API. Provides a resource to create a mariadb security_groups
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type SecurityGroups struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.product) || (has(self.initProvider) && has(self.initProvider.product))",message="spec.forProvider.product is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityGroupId) || (has(self.initProvider) && has(self.initProvider.securityGroupId))",message="spec.forProvider.securityGroupId is a required parameter"
	Spec   SecurityGroupsSpec   `json:"spec"`
	Status SecurityGroupsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupsList contains a list of SecurityGroupss
type SecurityGroupsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroups `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroups_Kind             = "SecurityGroups"
	SecurityGroups_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityGroups_Kind}.String()
	SecurityGroups_KindAPIVersion   = SecurityGroups_Kind + "." + CRDGroupVersion.String()
	SecurityGroups_GroupVersionKind = CRDGroupVersion.WithKind(SecurityGroups_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityGroups{}, &SecurityGroupsList{})
}
