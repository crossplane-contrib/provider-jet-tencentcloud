// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedclusterDBInstanceInitParameters struct {

	// dedicated cluster id.
	// dedicated cluster id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// db engine version, default to 0.
	// db engine version, default to 0.
	DBVersionID *string `json:"dbVersionId,omitempty" tf:"db_version_id,omitempty"`

	// number of instance.
	// number of instance.
	GoodsNum *float64 `json:"goodsNum,omitempty" tf:"goods_num,omitempty"`

	// name of this instance.
	// name of this instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// instance memory.
	// instance memory.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// project id.
	// project id.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// instance disk storage.
	// instance disk storage.
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// Tag description list.
	// Tag description list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// vip.
	// vip.
	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

type DedicatedclusterDBInstanceObservation struct {

	// dedicated cluster id.
	// dedicated cluster id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// db engine version, default to 0.
	// db engine version, default to 0.
	DBVersionID *string `json:"dbVersionId,omitempty" tf:"db_version_id,omitempty"`

	// number of instance.
	// number of instance.
	GoodsNum *float64 `json:"goodsNum,omitempty" tf:"goods_num,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// name of this instance.
	// name of this instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// instance memory.
	// instance memory.
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// project id.
	// project id.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// instance disk storage.
	// instance disk storage.
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// subnet id, it&#39;s required when vpcId is set.
	// subnet id, it&amp;#39;s required when vpcId is set.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Tag description list.
	// Tag description list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// vpc id.
	// vpc id.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// vip.
	// vip.
	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

type DedicatedclusterDBInstanceParameters struct {

	// dedicated cluster id.
	// dedicated cluster id.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// db engine version, default to 0.
	// db engine version, default to 0.
	// +kubebuilder:validation:Optional
	DBVersionID *string `json:"dbVersionId,omitempty" tf:"db_version_id,omitempty"`

	// number of instance.
	// number of instance.
	// +kubebuilder:validation:Optional
	GoodsNum *float64 `json:"goodsNum,omitempty" tf:"goods_num,omitempty"`

	// name of this instance.
	// name of this instance.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// instance memory.
	// instance memory.
	// +kubebuilder:validation:Optional
	Memory *float64 `json:"memory,omitempty" tf:"memory,omitempty"`

	// project id.
	// project id.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// instance disk storage.
	// instance disk storage.
	// +kubebuilder:validation:Optional
	Storage *float64 `json:"storage,omitempty" tf:"storage,omitempty"`

	// subnet id, it&#39;s required when vpcId is set.
	// subnet id, it&amp;#39;s required when vpcId is set.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// Tag description list.
	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// vpc id.
	// vpc id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// vip.
	// vip.
	// +kubebuilder:validation:Optional
	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

// DedicatedclusterDBInstanceSpec defines the desired state of DedicatedclusterDBInstance
type DedicatedclusterDBInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedclusterDBInstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DedicatedclusterDBInstanceInitParameters `json:"initProvider,omitempty"`
}

// DedicatedclusterDBInstanceStatus defines the observed state of DedicatedclusterDBInstance.
type DedicatedclusterDBInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedclusterDBInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedclusterDBInstance is the Schema for the DedicatedclusterDBInstances API. Provides a resource to create a mariadb dedicatedcluster_db_instance
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type DedicatedclusterDBInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.goodsNum) || (has(self.initProvider) && has(self.initProvider.goodsNum))",message="spec.forProvider.goodsNum is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memory) || (has(self.initProvider) && has(self.initProvider.memory))",message="spec.forProvider.memory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storage) || (has(self.initProvider) && has(self.initProvider.storage))",message="spec.forProvider.storage is a required parameter"
	Spec   DedicatedclusterDBInstanceSpec   `json:"spec"`
	Status DedicatedclusterDBInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedclusterDBInstanceList contains a list of DedicatedclusterDBInstances
type DedicatedclusterDBInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedclusterDBInstance `json:"items"`
}

// Repository type metadata.
var (
	DedicatedclusterDBInstance_Kind             = "DedicatedclusterDBInstance"
	DedicatedclusterDBInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedclusterDBInstance_Kind}.String()
	DedicatedclusterDBInstance_KindAPIVersion   = DedicatedclusterDBInstance_Kind + "." + CRDGroupVersion.String()
	DedicatedclusterDBInstance_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedclusterDBInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedclusterDBInstance{}, &DedicatedclusterDBInstanceList{})
}
