//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Certificate) DeepCopyInto(out *Certificate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Certificate.
func (in *Certificate) DeepCopy() *Certificate {
	if in == nil {
		return nil
	}
	out := new(Certificate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Certificate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateInitParameters) DeepCopyInto(out *CertificateInitParameters) {
	*out = *in
	if in.Cert != nil {
		in, out := &in.Cert, &out.Cert
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateInitParameters.
func (in *CertificateInitParameters) DeepCopy() *CertificateInitParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateList) DeepCopyInto(out *CertificateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Certificate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateList.
func (in *CertificateList) DeepCopy() *CertificateList {
	if in == nil {
		return nil
	}
	out := new(CertificateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CertificateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateObservation) DeepCopyInto(out *CertificateObservation) {
	*out = *in
	if in.BeginTime != nil {
		in, out := &in.BeginTime, &out.BeginTime
		*out = new(string)
		**out = **in
	}
	if in.Cert != nil {
		in, out := &in.Cert, &out.Cert
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.EndTime != nil {
		in, out := &in.EndTime, &out.EndTime
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProductZhName != nil {
		in, out := &in.ProductZhName, &out.ProductZhName
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(float64)
		**out = **in
	}
	if in.SubjectNames != nil {
		in, out := &in.SubjectNames, &out.SubjectNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateObservation.
func (in *CertificateObservation) DeepCopy() *CertificateObservation {
	if in == nil {
		return nil
	}
	out := new(CertificateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateParameters) DeepCopyInto(out *CertificateParameters) {
	*out = *in
	if in.Cert != nil {
		in, out := &in.Cert, &out.Cert
		*out = new(string)
		**out = **in
	}
	if in.KeySecretRef != nil {
		in, out := &in.KeySecretRef, &out.KeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateParameters.
func (in *CertificateParameters) DeepCopy() *CertificateParameters {
	if in == nil {
		return nil
	}
	out := new(CertificateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateSpec) DeepCopyInto(out *CertificateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateSpec.
func (in *CertificateSpec) DeepCopy() *CertificateSpec {
	if in == nil {
		return nil
	}
	out := new(CertificateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CertificateStatus) DeepCopyInto(out *CertificateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CertificateStatus.
func (in *CertificateStatus) DeepCopy() *CertificateStatus {
	if in == nil {
		return nil
	}
	out := new(CertificateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DvAuthsInitParameters) DeepCopyInto(out *DvAuthsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DvAuthsInitParameters.
func (in *DvAuthsInitParameters) DeepCopy() *DvAuthsInitParameters {
	if in == nil {
		return nil
	}
	out := new(DvAuthsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DvAuthsObservation) DeepCopyInto(out *DvAuthsObservation) {
	*out = *in
	if in.DvAuthKey != nil {
		in, out := &in.DvAuthKey, &out.DvAuthKey
		*out = new(string)
		**out = **in
	}
	if in.DvAuthValue != nil {
		in, out := &in.DvAuthValue, &out.DvAuthValue
		*out = new(string)
		**out = **in
	}
	if in.DvAuthVerifyType != nil {
		in, out := &in.DvAuthVerifyType, &out.DvAuthVerifyType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DvAuthsObservation.
func (in *DvAuthsObservation) DeepCopy() *DvAuthsObservation {
	if in == nil {
		return nil
	}
	out := new(DvAuthsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DvAuthsParameters) DeepCopyInto(out *DvAuthsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DvAuthsParameters.
func (in *DvAuthsParameters) DeepCopy() *DvAuthsParameters {
	if in == nil {
		return nil
	}
	out := new(DvAuthsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificate) DeepCopyInto(out *FreeCertificate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificate.
func (in *FreeCertificate) DeepCopy() *FreeCertificate {
	if in == nil {
		return nil
	}
	out := new(FreeCertificate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FreeCertificate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificateInitParameters) DeepCopyInto(out *FreeCertificateInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ContactEmail != nil {
		in, out := &in.ContactEmail, &out.ContactEmail
		*out = new(string)
		**out = **in
	}
	if in.ContactPhone != nil {
		in, out := &in.ContactPhone, &out.ContactPhone
		*out = new(string)
		**out = **in
	}
	if in.CsrEncryptAlgo != nil {
		in, out := &in.CsrEncryptAlgo, &out.CsrEncryptAlgo
		*out = new(string)
		**out = **in
	}
	if in.CsrKeyParameter != nil {
		in, out := &in.CsrKeyParameter, &out.CsrKeyParameter
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DvAuthMethod != nil {
		in, out := &in.DvAuthMethod, &out.DvAuthMethod
		*out = new(string)
		**out = **in
	}
	if in.OldCertificateID != nil {
		in, out := &in.OldCertificateID, &out.OldCertificateID
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ValidityPeriod != nil {
		in, out := &in.ValidityPeriod, &out.ValidityPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificateInitParameters.
func (in *FreeCertificateInitParameters) DeepCopy() *FreeCertificateInitParameters {
	if in == nil {
		return nil
	}
	out := new(FreeCertificateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificateList) DeepCopyInto(out *FreeCertificateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]FreeCertificate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificateList.
func (in *FreeCertificateList) DeepCopy() *FreeCertificateList {
	if in == nil {
		return nil
	}
	out := new(FreeCertificateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FreeCertificateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificateObservation) DeepCopyInto(out *FreeCertificateObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.CertBeginTime != nil {
		in, out := &in.CertBeginTime, &out.CertBeginTime
		*out = new(string)
		**out = **in
	}
	if in.CertEndTime != nil {
		in, out := &in.CertEndTime, &out.CertEndTime
		*out = new(string)
		**out = **in
	}
	if in.CertificatePrivateKey != nil {
		in, out := &in.CertificatePrivateKey, &out.CertificatePrivateKey
		*out = new(string)
		**out = **in
	}
	if in.CertificatePublicKey != nil {
		in, out := &in.CertificatePublicKey, &out.CertificatePublicKey
		*out = new(string)
		**out = **in
	}
	if in.ContactEmail != nil {
		in, out := &in.ContactEmail, &out.ContactEmail
		*out = new(string)
		**out = **in
	}
	if in.ContactPhone != nil {
		in, out := &in.ContactPhone, &out.ContactPhone
		*out = new(string)
		**out = **in
	}
	if in.CsrEncryptAlgo != nil {
		in, out := &in.CsrEncryptAlgo, &out.CsrEncryptAlgo
		*out = new(string)
		**out = **in
	}
	if in.CsrKeyParameter != nil {
		in, out := &in.CsrKeyParameter, &out.CsrKeyParameter
		*out = new(string)
		**out = **in
	}
	if in.Deployable != nil {
		in, out := &in.Deployable, &out.Deployable
		*out = new(bool)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DvAuthMethod != nil {
		in, out := &in.DvAuthMethod, &out.DvAuthMethod
		*out = new(string)
		**out = **in
	}
	if in.DvAuths != nil {
		in, out := &in.DvAuths, &out.DvAuths
		*out = make([]DvAuthsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InsertTime != nil {
		in, out := &in.InsertTime, &out.InsertTime
		*out = new(string)
		**out = **in
	}
	if in.OldCertificateID != nil {
		in, out := &in.OldCertificateID, &out.OldCertificateID
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.ProductZhName != nil {
		in, out := &in.ProductZhName, &out.ProductZhName
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Renewable != nil {
		in, out := &in.Renewable, &out.Renewable
		*out = new(bool)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(float64)
		**out = **in
	}
	if in.StatusMsg != nil {
		in, out := &in.StatusMsg, &out.StatusMsg
		*out = new(string)
		**out = **in
	}
	if in.StatusName != nil {
		in, out := &in.StatusName, &out.StatusName
		*out = new(string)
		**out = **in
	}
	if in.ValidityPeriod != nil {
		in, out := &in.ValidityPeriod, &out.ValidityPeriod
		*out = new(string)
		**out = **in
	}
	if in.VulnerabilityStatus != nil {
		in, out := &in.VulnerabilityStatus, &out.VulnerabilityStatus
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificateObservation.
func (in *FreeCertificateObservation) DeepCopy() *FreeCertificateObservation {
	if in == nil {
		return nil
	}
	out := new(FreeCertificateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificateParameters) DeepCopyInto(out *FreeCertificateParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ContactEmail != nil {
		in, out := &in.ContactEmail, &out.ContactEmail
		*out = new(string)
		**out = **in
	}
	if in.ContactPhone != nil {
		in, out := &in.ContactPhone, &out.ContactPhone
		*out = new(string)
		**out = **in
	}
	if in.CsrEncryptAlgo != nil {
		in, out := &in.CsrEncryptAlgo, &out.CsrEncryptAlgo
		*out = new(string)
		**out = **in
	}
	if in.CsrKeyParameter != nil {
		in, out := &in.CsrKeyParameter, &out.CsrKeyParameter
		*out = new(string)
		**out = **in
	}
	if in.CsrKeyPasswordSecretRef != nil {
		in, out := &in.CsrKeyPasswordSecretRef, &out.CsrKeyPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DvAuthMethod != nil {
		in, out := &in.DvAuthMethod, &out.DvAuthMethod
		*out = new(string)
		**out = **in
	}
	if in.OldCertificateID != nil {
		in, out := &in.OldCertificateID, &out.OldCertificateID
		*out = new(string)
		**out = **in
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.ValidityPeriod != nil {
		in, out := &in.ValidityPeriod, &out.ValidityPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificateParameters.
func (in *FreeCertificateParameters) DeepCopy() *FreeCertificateParameters {
	if in == nil {
		return nil
	}
	out := new(FreeCertificateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificateSpec) DeepCopyInto(out *FreeCertificateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificateSpec.
func (in *FreeCertificateSpec) DeepCopy() *FreeCertificateSpec {
	if in == nil {
		return nil
	}
	out := new(FreeCertificateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FreeCertificateStatus) DeepCopyInto(out *FreeCertificateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FreeCertificateStatus.
func (in *FreeCertificateStatus) DeepCopy() *FreeCertificateStatus {
	if in == nil {
		return nil
	}
	out := new(FreeCertificateStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InformationInitParameters) DeepCopyInto(out *InformationInitParameters) {
	*out = *in
	if in.AdminEmail != nil {
		in, out := &in.AdminEmail, &out.AdminEmail
		*out = new(string)
		**out = **in
	}
	if in.AdminFirstName != nil {
		in, out := &in.AdminFirstName, &out.AdminFirstName
		*out = new(string)
		**out = **in
	}
	if in.AdminLastName != nil {
		in, out := &in.AdminLastName, &out.AdminLastName
		*out = new(string)
		**out = **in
	}
	if in.AdminPhoneNum != nil {
		in, out := &in.AdminPhoneNum, &out.AdminPhoneNum
		*out = new(string)
		**out = **in
	}
	if in.AdminPosition != nil {
		in, out := &in.AdminPosition, &out.AdminPosition
		*out = new(string)
		**out = **in
	}
	if in.CertificateDomain != nil {
		in, out := &in.CertificateDomain, &out.CertificateDomain
		*out = new(string)
		**out = **in
	}
	if in.ContactEmail != nil {
		in, out := &in.ContactEmail, &out.ContactEmail
		*out = new(string)
		**out = **in
	}
	if in.ContactFirstName != nil {
		in, out := &in.ContactFirstName, &out.ContactFirstName
		*out = new(string)
		**out = **in
	}
	if in.ContactLastName != nil {
		in, out := &in.ContactLastName, &out.ContactLastName
		*out = new(string)
		**out = **in
	}
	if in.ContactNumber != nil {
		in, out := &in.ContactNumber, &out.ContactNumber
		*out = new(string)
		**out = **in
	}
	if in.ContactPosition != nil {
		in, out := &in.ContactPosition, &out.ContactPosition
		*out = new(string)
		**out = **in
	}
	if in.CsrContent != nil {
		in, out := &in.CsrContent, &out.CsrContent
		*out = new(string)
		**out = **in
	}
	if in.CsrType != nil {
		in, out := &in.CsrType, &out.CsrType
		*out = new(string)
		**out = **in
	}
	if in.DomainList != nil {
		in, out := &in.DomainList, &out.DomainList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPassword != nil {
		in, out := &in.KeyPassword, &out.KeyPassword
		*out = new(string)
		**out = **in
	}
	if in.OrganizationAddress != nil {
		in, out := &in.OrganizationAddress, &out.OrganizationAddress
		*out = new(string)
		**out = **in
	}
	if in.OrganizationCity != nil {
		in, out := &in.OrganizationCity, &out.OrganizationCity
		*out = new(string)
		**out = **in
	}
	if in.OrganizationCountry != nil {
		in, out := &in.OrganizationCountry, &out.OrganizationCountry
		*out = new(string)
		**out = **in
	}
	if in.OrganizationDivision != nil {
		in, out := &in.OrganizationDivision, &out.OrganizationDivision
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRegion != nil {
		in, out := &in.OrganizationRegion, &out.OrganizationRegion
		*out = new(string)
		**out = **in
	}
	if in.PhoneAreaCode != nil {
		in, out := &in.PhoneAreaCode, &out.PhoneAreaCode
		*out = new(string)
		**out = **in
	}
	if in.PhoneNumber != nil {
		in, out := &in.PhoneNumber, &out.PhoneNumber
		*out = new(string)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.VerifyType != nil {
		in, out := &in.VerifyType, &out.VerifyType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InformationInitParameters.
func (in *InformationInitParameters) DeepCopy() *InformationInitParameters {
	if in == nil {
		return nil
	}
	out := new(InformationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InformationObservation) DeepCopyInto(out *InformationObservation) {
	*out = *in
	if in.AdminEmail != nil {
		in, out := &in.AdminEmail, &out.AdminEmail
		*out = new(string)
		**out = **in
	}
	if in.AdminFirstName != nil {
		in, out := &in.AdminFirstName, &out.AdminFirstName
		*out = new(string)
		**out = **in
	}
	if in.AdminLastName != nil {
		in, out := &in.AdminLastName, &out.AdminLastName
		*out = new(string)
		**out = **in
	}
	if in.AdminPhoneNum != nil {
		in, out := &in.AdminPhoneNum, &out.AdminPhoneNum
		*out = new(string)
		**out = **in
	}
	if in.AdminPosition != nil {
		in, out := &in.AdminPosition, &out.AdminPosition
		*out = new(string)
		**out = **in
	}
	if in.CertificateDomain != nil {
		in, out := &in.CertificateDomain, &out.CertificateDomain
		*out = new(string)
		**out = **in
	}
	if in.ContactEmail != nil {
		in, out := &in.ContactEmail, &out.ContactEmail
		*out = new(string)
		**out = **in
	}
	if in.ContactFirstName != nil {
		in, out := &in.ContactFirstName, &out.ContactFirstName
		*out = new(string)
		**out = **in
	}
	if in.ContactLastName != nil {
		in, out := &in.ContactLastName, &out.ContactLastName
		*out = new(string)
		**out = **in
	}
	if in.ContactNumber != nil {
		in, out := &in.ContactNumber, &out.ContactNumber
		*out = new(string)
		**out = **in
	}
	if in.ContactPosition != nil {
		in, out := &in.ContactPosition, &out.ContactPosition
		*out = new(string)
		**out = **in
	}
	if in.CsrContent != nil {
		in, out := &in.CsrContent, &out.CsrContent
		*out = new(string)
		**out = **in
	}
	if in.CsrType != nil {
		in, out := &in.CsrType, &out.CsrType
		*out = new(string)
		**out = **in
	}
	if in.DomainList != nil {
		in, out := &in.DomainList, &out.DomainList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPassword != nil {
		in, out := &in.KeyPassword, &out.KeyPassword
		*out = new(string)
		**out = **in
	}
	if in.OrganizationAddress != nil {
		in, out := &in.OrganizationAddress, &out.OrganizationAddress
		*out = new(string)
		**out = **in
	}
	if in.OrganizationCity != nil {
		in, out := &in.OrganizationCity, &out.OrganizationCity
		*out = new(string)
		**out = **in
	}
	if in.OrganizationCountry != nil {
		in, out := &in.OrganizationCountry, &out.OrganizationCountry
		*out = new(string)
		**out = **in
	}
	if in.OrganizationDivision != nil {
		in, out := &in.OrganizationDivision, &out.OrganizationDivision
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRegion != nil {
		in, out := &in.OrganizationRegion, &out.OrganizationRegion
		*out = new(string)
		**out = **in
	}
	if in.PhoneAreaCode != nil {
		in, out := &in.PhoneAreaCode, &out.PhoneAreaCode
		*out = new(string)
		**out = **in
	}
	if in.PhoneNumber != nil {
		in, out := &in.PhoneNumber, &out.PhoneNumber
		*out = new(string)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.VerifyType != nil {
		in, out := &in.VerifyType, &out.VerifyType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InformationObservation.
func (in *InformationObservation) DeepCopy() *InformationObservation {
	if in == nil {
		return nil
	}
	out := new(InformationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InformationParameters) DeepCopyInto(out *InformationParameters) {
	*out = *in
	if in.AdminEmail != nil {
		in, out := &in.AdminEmail, &out.AdminEmail
		*out = new(string)
		**out = **in
	}
	if in.AdminFirstName != nil {
		in, out := &in.AdminFirstName, &out.AdminFirstName
		*out = new(string)
		**out = **in
	}
	if in.AdminLastName != nil {
		in, out := &in.AdminLastName, &out.AdminLastName
		*out = new(string)
		**out = **in
	}
	if in.AdminPhoneNum != nil {
		in, out := &in.AdminPhoneNum, &out.AdminPhoneNum
		*out = new(string)
		**out = **in
	}
	if in.AdminPosition != nil {
		in, out := &in.AdminPosition, &out.AdminPosition
		*out = new(string)
		**out = **in
	}
	if in.CertificateDomain != nil {
		in, out := &in.CertificateDomain, &out.CertificateDomain
		*out = new(string)
		**out = **in
	}
	if in.ContactEmail != nil {
		in, out := &in.ContactEmail, &out.ContactEmail
		*out = new(string)
		**out = **in
	}
	if in.ContactFirstName != nil {
		in, out := &in.ContactFirstName, &out.ContactFirstName
		*out = new(string)
		**out = **in
	}
	if in.ContactLastName != nil {
		in, out := &in.ContactLastName, &out.ContactLastName
		*out = new(string)
		**out = **in
	}
	if in.ContactNumber != nil {
		in, out := &in.ContactNumber, &out.ContactNumber
		*out = new(string)
		**out = **in
	}
	if in.ContactPosition != nil {
		in, out := &in.ContactPosition, &out.ContactPosition
		*out = new(string)
		**out = **in
	}
	if in.CsrContent != nil {
		in, out := &in.CsrContent, &out.CsrContent
		*out = new(string)
		**out = **in
	}
	if in.CsrType != nil {
		in, out := &in.CsrType, &out.CsrType
		*out = new(string)
		**out = **in
	}
	if in.DomainList != nil {
		in, out := &in.DomainList, &out.DomainList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.KeyPassword != nil {
		in, out := &in.KeyPassword, &out.KeyPassword
		*out = new(string)
		**out = **in
	}
	if in.OrganizationAddress != nil {
		in, out := &in.OrganizationAddress, &out.OrganizationAddress
		*out = new(string)
		**out = **in
	}
	if in.OrganizationCity != nil {
		in, out := &in.OrganizationCity, &out.OrganizationCity
		*out = new(string)
		**out = **in
	}
	if in.OrganizationCountry != nil {
		in, out := &in.OrganizationCountry, &out.OrganizationCountry
		*out = new(string)
		**out = **in
	}
	if in.OrganizationDivision != nil {
		in, out := &in.OrganizationDivision, &out.OrganizationDivision
		*out = new(string)
		**out = **in
	}
	if in.OrganizationName != nil {
		in, out := &in.OrganizationName, &out.OrganizationName
		*out = new(string)
		**out = **in
	}
	if in.OrganizationRegion != nil {
		in, out := &in.OrganizationRegion, &out.OrganizationRegion
		*out = new(string)
		**out = **in
	}
	if in.PhoneAreaCode != nil {
		in, out := &in.PhoneAreaCode, &out.PhoneAreaCode
		*out = new(string)
		**out = **in
	}
	if in.PhoneNumber != nil {
		in, out := &in.PhoneNumber, &out.PhoneNumber
		*out = new(string)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.VerifyType != nil {
		in, out := &in.VerifyType, &out.VerifyType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InformationParameters.
func (in *InformationParameters) DeepCopy() *InformationParameters {
	if in == nil {
		return nil
	}
	out := new(InformationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificate) DeepCopyInto(out *PayCertificate) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificate.
func (in *PayCertificate) DeepCopy() *PayCertificate {
	if in == nil {
		return nil
	}
	out := new(PayCertificate)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PayCertificate) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateDvAuthsInitParameters) DeepCopyInto(out *PayCertificateDvAuthsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateDvAuthsInitParameters.
func (in *PayCertificateDvAuthsInitParameters) DeepCopy() *PayCertificateDvAuthsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PayCertificateDvAuthsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateDvAuthsObservation) DeepCopyInto(out *PayCertificateDvAuthsObservation) {
	*out = *in
	if in.DvAuthKey != nil {
		in, out := &in.DvAuthKey, &out.DvAuthKey
		*out = new(string)
		**out = **in
	}
	if in.DvAuthValue != nil {
		in, out := &in.DvAuthValue, &out.DvAuthValue
		*out = new(string)
		**out = **in
	}
	if in.DvAuthVerifyType != nil {
		in, out := &in.DvAuthVerifyType, &out.DvAuthVerifyType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateDvAuthsObservation.
func (in *PayCertificateDvAuthsObservation) DeepCopy() *PayCertificateDvAuthsObservation {
	if in == nil {
		return nil
	}
	out := new(PayCertificateDvAuthsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateDvAuthsParameters) DeepCopyInto(out *PayCertificateDvAuthsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateDvAuthsParameters.
func (in *PayCertificateDvAuthsParameters) DeepCopy() *PayCertificateDvAuthsParameters {
	if in == nil {
		return nil
	}
	out := new(PayCertificateDvAuthsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateInitParameters) DeepCopyInto(out *PayCertificateInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ConfirmLetter != nil {
		in, out := &in.ConfirmLetter, &out.ConfirmLetter
		*out = new(string)
		**out = **in
	}
	if in.DomainNum != nil {
		in, out := &in.DomainNum, &out.DomainNum
		*out = new(float64)
		**out = **in
	}
	if in.DvAuths != nil {
		in, out := &in.DvAuths, &out.DvAuths
		*out = make([]PayCertificateDvAuthsInitParameters, len(*in))
		copy(*out, *in)
	}
	if in.Information != nil {
		in, out := &in.Information, &out.Information
		*out = make([]InformationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.TimeSpan != nil {
		in, out := &in.TimeSpan, &out.TimeSpan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateInitParameters.
func (in *PayCertificateInitParameters) DeepCopy() *PayCertificateInitParameters {
	if in == nil {
		return nil
	}
	out := new(PayCertificateInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateList) DeepCopyInto(out *PayCertificateList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PayCertificate, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateList.
func (in *PayCertificateList) DeepCopy() *PayCertificateList {
	if in == nil {
		return nil
	}
	out := new(PayCertificateList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PayCertificateList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateObservation) DeepCopyInto(out *PayCertificateObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.CertificateID != nil {
		in, out := &in.CertificateID, &out.CertificateID
		*out = new(string)
		**out = **in
	}
	if in.ConfirmLetter != nil {
		in, out := &in.ConfirmLetter, &out.ConfirmLetter
		*out = new(string)
		**out = **in
	}
	if in.DomainNum != nil {
		in, out := &in.DomainNum, &out.DomainNum
		*out = new(float64)
		**out = **in
	}
	if in.DvAuths != nil {
		in, out := &in.DvAuths, &out.DvAuths
		*out = make([]PayCertificateDvAuthsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Information != nil {
		in, out := &in.Information, &out.Information
		*out = make([]InformationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OrderID != nil {
		in, out := &in.OrderID, &out.OrderID
		*out = new(string)
		**out = **in
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(float64)
		**out = **in
	}
	if in.TimeSpan != nil {
		in, out := &in.TimeSpan, &out.TimeSpan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateObservation.
func (in *PayCertificateObservation) DeepCopy() *PayCertificateObservation {
	if in == nil {
		return nil
	}
	out := new(PayCertificateObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateParameters) DeepCopyInto(out *PayCertificateParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ConfirmLetter != nil {
		in, out := &in.ConfirmLetter, &out.ConfirmLetter
		*out = new(string)
		**out = **in
	}
	if in.DomainNum != nil {
		in, out := &in.DomainNum, &out.DomainNum
		*out = new(float64)
		**out = **in
	}
	if in.DvAuths != nil {
		in, out := &in.DvAuths, &out.DvAuths
		*out = make([]PayCertificateDvAuthsParameters, len(*in))
		copy(*out, *in)
	}
	if in.Information != nil {
		in, out := &in.Information, &out.Information
		*out = make([]InformationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ProductID != nil {
		in, out := &in.ProductID, &out.ProductID
		*out = new(float64)
		**out = **in
	}
	if in.ProjectID != nil {
		in, out := &in.ProjectID, &out.ProjectID
		*out = new(float64)
		**out = **in
	}
	if in.TimeSpan != nil {
		in, out := &in.TimeSpan, &out.TimeSpan
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateParameters.
func (in *PayCertificateParameters) DeepCopy() *PayCertificateParameters {
	if in == nil {
		return nil
	}
	out := new(PayCertificateParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateSpec) DeepCopyInto(out *PayCertificateSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateSpec.
func (in *PayCertificateSpec) DeepCopy() *PayCertificateSpec {
	if in == nil {
		return nil
	}
	out := new(PayCertificateSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PayCertificateStatus) DeepCopyInto(out *PayCertificateStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PayCertificateStatus.
func (in *PayCertificateStatus) DeepCopy() *PayCertificateStatus {
	if in == nil {
		return nil
	}
	out := new(PayCertificateStatus)
	in.DeepCopyInto(out)
	return out
}
