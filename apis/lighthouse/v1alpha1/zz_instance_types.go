// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainersInitParameters struct {

	// The command to run.
	// The command to run.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// Container image address.
	// Container image address.
	ContainerImage *string `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// Container name.
	// Container name.
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// List of environment variables.
	// List of environment variables.
	Envs []EnvsInitParameters `json:"envs,omitempty" tf:"envs,omitempty"`

	// List of mappings of container ports and host ports.
	// List of mappings of container ports and host ports.
	PublishPorts []PublishPortsInitParameters `json:"publishPorts,omitempty" tf:"publish_ports,omitempty"`

	// List of container mount volumes.
	// List of container mount volumes.
	Volumes []VolumesInitParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type ContainersObservation struct {

	// The command to run.
	// The command to run.
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// Container image address.
	// Container image address.
	ContainerImage *string `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// Container name.
	// Container name.
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// List of environment variables.
	// List of environment variables.
	Envs []EnvsObservation `json:"envs,omitempty" tf:"envs,omitempty"`

	// List of mappings of container ports and host ports.
	// List of mappings of container ports and host ports.
	PublishPorts []PublishPortsObservation `json:"publishPorts,omitempty" tf:"publish_ports,omitempty"`

	// List of container mount volumes.
	// List of container mount volumes.
	Volumes []VolumesObservation `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type ContainersParameters struct {

	// The command to run.
	// The command to run.
	// +kubebuilder:validation:Optional
	Command *string `json:"command,omitempty" tf:"command,omitempty"`

	// Container image address.
	// Container image address.
	// +kubebuilder:validation:Optional
	ContainerImage *string `json:"containerImage,omitempty" tf:"container_image,omitempty"`

	// Container name.
	// Container name.
	// +kubebuilder:validation:Optional
	ContainerName *string `json:"containerName,omitempty" tf:"container_name,omitempty"`

	// List of environment variables.
	// List of environment variables.
	// +kubebuilder:validation:Optional
	Envs []EnvsParameters `json:"envs,omitempty" tf:"envs,omitempty"`

	// List of mappings of container ports and host ports.
	// List of mappings of container ports and host ports.
	// +kubebuilder:validation:Optional
	PublishPorts []PublishPortsParameters `json:"publishPorts,omitempty" tf:"publish_ports,omitempty"`

	// List of container mount volumes.
	// List of container mount volumes.
	// +kubebuilder:validation:Optional
	Volumes []VolumesParameters `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

type EnvsInitParameters struct {

	// Environment variable key.
	// Environment variable key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvsObservation struct {

	// Environment variable key.
	// Environment variable key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Environment variable value.
	// Environment variable value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvsParameters struct {

	// Environment variable key.
	// Environment variable key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Environment variable value.
	// Environment variable value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type InstanceInitParameters struct {

	// ID of the Lighthouse image.
	// ID of the Lighthouse image.
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// ID of the Lighthouse package.
	// ID of the Lighthouse package.
	BundleID *string `json:"bundleId,omitempty" tf:"bundle_id,omitempty"`

	// A unique string supplied by the client to ensure that the request is idempotent. Its maximum length is 64 ASCII characters. If this parameter is not specified, the idem-potency of the request cannot be guaranteed.
	// A unique string supplied by the client to ensure that the request is idempotent. Its maximum length is 64 ASCII characters. If this parameter is not specified, the idem-potency of the request cannot be guaranteed.
	ClientToken *string `json:"clientToken,omitempty" tf:"client_token,omitempty"`

	// Configuration of the containers to create.
	// Configuration of the containers to create.
	Containers []ContainersInitParameters `json:"containers,omitempty" tf:"containers,omitempty"`

	// Whether the request is a dry run only.true: dry run only. The request will not create instance(s). A dry run can check whether all the required parameters are specified, whether the request format is right, whether the request exceeds service limits, and whether the specified CVMs are available. If the dry run fails, the corresponding error code will be returned.If the dry run succeeds, the RequestId will be returned.false (default value): send a normal request and create instance(s) if all the requirements are met.
	// Whether the request is a dry run only.true: dry run only. The request will not create instance(s). A dry run can check whether all the required parameters are specified, whether the request format is right, whether the request exceeds service limits, and whether the specified CVMs are available. If the dry run fails, the corresponding error code will be returned.If the dry run succeeds, the RequestId will be returned.false (default value): send a normal request and create instance(s) if all the requirements are met.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// Firewall template ID. If this parameter is not specified, the default firewall policy is used.
	// Firewall template ID. If this parameter is not specified, the default firewall policy is used.
	FirewallTemplateID *string `json:"firewallTemplateId,omitempty" tf:"firewall_template_id,omitempty"`

	// The display name of the Lighthouse instance.
	// The display name of the Lighthouse instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// Whether the voucher is deducted automatically when update bundle id. Value range: true: indicates automatic deduction of vouchers, false: does not automatically deduct vouchers. Default value: false.
	// Whether the voucher is deducted automatically when update bundle id. Value range: `true`: indicates automatic deduction of vouchers, `false`: does not automatically deduct vouchers. Default value: `false`.
	IsUpdateBundleIDAutoVoucher *bool `json:"isUpdateBundleIdAutoVoucher,omitempty" tf:"is_update_bundle_id_auto_voucher,omitempty"`

	// Whether to return the mounted data disk. true: returns both the instance and the mounted data disk; false: returns the instance and no longer returns its mounted data disk. Default: true.
	// Whether to return the mounted data disk. `true`: returns both the instance and the mounted data disk; `false`: returns the instance and no longer returns its mounted data disk. Default: `true`.
	IsolateDataDisk *bool `json:"isolateDataDisk,omitempty" tf:"isolate_data_disk,omitempty"`

	// Login password of the instance. It is only available for Windows instances. If it is not specified, it means that the user choose to set the login password after the instance creation.
	// Login password of the instance. It is only available for Windows instances. If it is not specified, it means that the user choose to set the login password after the instance creation.
	LoginConfiguration []LoginConfigurationInitParameters `json:"loginConfiguration,omitempty" tf:"login_configuration,omitempty"`

	// Subscription period in months. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
	// Subscription period in months. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// It has been deprecated from version v1.81.8. Use tencentcloud_lighthouse_key_pair_attachment manage key pair. Whether to allow login using the default key pair. YES: allow login; NO: disable login. Default: YES.
	// Whether to allow login using the default key pair. `YES`: allow login; `NO`: disable login. Default: `YES`.
	PermitDefaultKeyPairLogin *string `json:"permitDefaultKeyPairLogin,omitempty" tf:"permit_default_key_pair_login,omitempty"`

	// Auto-Renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically; NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically. You need to manually renew DISABLE_NOTIFY_AND_AUTO_RENEW: neither notify upon expiration nor renew automatically. Default value: NOTIFY_AND_MANUAL_RENEW.
	// Auto-Renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically; NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically. You need to manually renew DISABLE_NOTIFY_AND_AUTO_RENEW: neither notify upon expiration nor renew automatically. Default value: NOTIFY_AND_MANUAL_RENEW.
	RenewFlag *string `json:"renewFlag,omitempty" tf:"renew_flag,omitempty"`

	// List of availability zones. A random AZ is selected by default.
	// List of availability zones. A random AZ is selected by default.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type InstanceObservation struct {

	// ID of the Lighthouse image.
	// ID of the Lighthouse image.
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// ID of the Lighthouse package.
	// ID of the Lighthouse package.
	BundleID *string `json:"bundleId,omitempty" tf:"bundle_id,omitempty"`

	// A unique string supplied by the client to ensure that the request is idempotent. Its maximum length is 64 ASCII characters. If this parameter is not specified, the idem-potency of the request cannot be guaranteed.
	// A unique string supplied by the client to ensure that the request is idempotent. Its maximum length is 64 ASCII characters. If this parameter is not specified, the idem-potency of the request cannot be guaranteed.
	ClientToken *string `json:"clientToken,omitempty" tf:"client_token,omitempty"`

	// Configuration of the containers to create.
	// Configuration of the containers to create.
	Containers []ContainersObservation `json:"containers,omitempty" tf:"containers,omitempty"`

	// Whether the request is a dry run only.true: dry run only. The request will not create instance(s). A dry run can check whether all the required parameters are specified, whether the request format is right, whether the request exceeds service limits, and whether the specified CVMs are available. If the dry run fails, the corresponding error code will be returned.If the dry run succeeds, the RequestId will be returned.false (default value): send a normal request and create instance(s) if all the requirements are met.
	// Whether the request is a dry run only.true: dry run only. The request will not create instance(s). A dry run can check whether all the required parameters are specified, whether the request format is right, whether the request exceeds service limits, and whether the specified CVMs are available. If the dry run fails, the corresponding error code will be returned.If the dry run succeeds, the RequestId will be returned.false (default value): send a normal request and create instance(s) if all the requirements are met.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// Firewall template ID. If this parameter is not specified, the default firewall policy is used.
	// Firewall template ID. If this parameter is not specified, the default firewall policy is used.
	FirewallTemplateID *string `json:"firewallTemplateId,omitempty" tf:"firewall_template_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The display name of the Lighthouse instance.
	// The display name of the Lighthouse instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// Whether the voucher is deducted automatically when update bundle id. Value range: true: indicates automatic deduction of vouchers, false: does not automatically deduct vouchers. Default value: false.
	// Whether the voucher is deducted automatically when update bundle id. Value range: `true`: indicates automatic deduction of vouchers, `false`: does not automatically deduct vouchers. Default value: `false`.
	IsUpdateBundleIDAutoVoucher *bool `json:"isUpdateBundleIdAutoVoucher,omitempty" tf:"is_update_bundle_id_auto_voucher,omitempty"`

	// Whether to return the mounted data disk. true: returns both the instance and the mounted data disk; false: returns the instance and no longer returns its mounted data disk. Default: true.
	// Whether to return the mounted data disk. `true`: returns both the instance and the mounted data disk; `false`: returns the instance and no longer returns its mounted data disk. Default: `true`.
	IsolateDataDisk *bool `json:"isolateDataDisk,omitempty" tf:"isolate_data_disk,omitempty"`

	// Login password of the instance. It is only available for Windows instances. If it is not specified, it means that the user choose to set the login password after the instance creation.
	// Login password of the instance. It is only available for Windows instances. If it is not specified, it means that the user choose to set the login password after the instance creation.
	LoginConfiguration []LoginConfigurationObservation `json:"loginConfiguration,omitempty" tf:"login_configuration,omitempty"`

	// Subscription period in months. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
	// Subscription period in months. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// It has been deprecated from version v1.81.8. Use tencentcloud_lighthouse_key_pair_attachment manage key pair. Whether to allow login using the default key pair. YES: allow login; NO: disable login. Default: YES.
	// Whether to allow login using the default key pair. `YES`: allow login; `NO`: disable login. Default: `YES`.
	PermitDefaultKeyPairLogin *string `json:"permitDefaultKeyPairLogin,omitempty" tf:"permit_default_key_pair_login,omitempty"`

	// Private addresses.
	// Private addresses.
	PrivateAddresses []*string `json:"privateAddresses,omitempty" tf:"private_addresses,omitempty"`

	// Public addresses.
	// Public addresses.
	PublicAddresses []*string `json:"publicAddresses,omitempty" tf:"public_addresses,omitempty"`

	// Auto-Renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically; NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically. You need to manually renew DISABLE_NOTIFY_AND_AUTO_RENEW: neither notify upon expiration nor renew automatically. Default value: NOTIFY_AND_MANUAL_RENEW.
	// Auto-Renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically; NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically. You need to manually renew DISABLE_NOTIFY_AND_AUTO_RENEW: neither notify upon expiration nor renew automatically. Default value: NOTIFY_AND_MANUAL_RENEW.
	RenewFlag *string `json:"renewFlag,omitempty" tf:"renew_flag,omitempty"`

	// List of availability zones. A random AZ is selected by default.
	// List of availability zones. A random AZ is selected by default.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type InstanceParameters struct {

	// ID of the Lighthouse image.
	// ID of the Lighthouse image.
	// +kubebuilder:validation:Optional
	BlueprintID *string `json:"blueprintId,omitempty" tf:"blueprint_id,omitempty"`

	// ID of the Lighthouse package.
	// ID of the Lighthouse package.
	// +kubebuilder:validation:Optional
	BundleID *string `json:"bundleId,omitempty" tf:"bundle_id,omitempty"`

	// A unique string supplied by the client to ensure that the request is idempotent. Its maximum length is 64 ASCII characters. If this parameter is not specified, the idem-potency of the request cannot be guaranteed.
	// A unique string supplied by the client to ensure that the request is idempotent. Its maximum length is 64 ASCII characters. If this parameter is not specified, the idem-potency of the request cannot be guaranteed.
	// +kubebuilder:validation:Optional
	ClientToken *string `json:"clientToken,omitempty" tf:"client_token,omitempty"`

	// Configuration of the containers to create.
	// Configuration of the containers to create.
	// +kubebuilder:validation:Optional
	Containers []ContainersParameters `json:"containers,omitempty" tf:"containers,omitempty"`

	// Whether the request is a dry run only.true: dry run only. The request will not create instance(s). A dry run can check whether all the required parameters are specified, whether the request format is right, whether the request exceeds service limits, and whether the specified CVMs are available. If the dry run fails, the corresponding error code will be returned.If the dry run succeeds, the RequestId will be returned.false (default value): send a normal request and create instance(s) if all the requirements are met.
	// Whether the request is a dry run only.true: dry run only. The request will not create instance(s). A dry run can check whether all the required parameters are specified, whether the request format is right, whether the request exceeds service limits, and whether the specified CVMs are available. If the dry run fails, the corresponding error code will be returned.If the dry run succeeds, the RequestId will be returned.false (default value): send a normal request and create instance(s) if all the requirements are met.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// Firewall template ID. If this parameter is not specified, the default firewall policy is used.
	// Firewall template ID. If this parameter is not specified, the default firewall policy is used.
	// +kubebuilder:validation:Optional
	FirewallTemplateID *string `json:"firewallTemplateId,omitempty" tf:"firewall_template_id,omitempty"`

	// The display name of the Lighthouse instance.
	// The display name of the Lighthouse instance.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// Whether the voucher is deducted automatically when update bundle id. Value range: true: indicates automatic deduction of vouchers, false: does not automatically deduct vouchers. Default value: false.
	// Whether the voucher is deducted automatically when update bundle id. Value range: `true`: indicates automatic deduction of vouchers, `false`: does not automatically deduct vouchers. Default value: `false`.
	// +kubebuilder:validation:Optional
	IsUpdateBundleIDAutoVoucher *bool `json:"isUpdateBundleIdAutoVoucher,omitempty" tf:"is_update_bundle_id_auto_voucher,omitempty"`

	// Whether to return the mounted data disk. true: returns both the instance and the mounted data disk; false: returns the instance and no longer returns its mounted data disk. Default: true.
	// Whether to return the mounted data disk. `true`: returns both the instance and the mounted data disk; `false`: returns the instance and no longer returns its mounted data disk. Default: `true`.
	// +kubebuilder:validation:Optional
	IsolateDataDisk *bool `json:"isolateDataDisk,omitempty" tf:"isolate_data_disk,omitempty"`

	// Login password of the instance. It is only available for Windows instances. If it is not specified, it means that the user choose to set the login password after the instance creation.
	// Login password of the instance. It is only available for Windows instances. If it is not specified, it means that the user choose to set the login password after the instance creation.
	// +kubebuilder:validation:Optional
	LoginConfiguration []LoginConfigurationParameters `json:"loginConfiguration,omitempty" tf:"login_configuration,omitempty"`

	// Subscription period in months. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
	// Subscription period in months. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 60.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// It has been deprecated from version v1.81.8. Use tencentcloud_lighthouse_key_pair_attachment manage key pair. Whether to allow login using the default key pair. YES: allow login; NO: disable login. Default: YES.
	// Whether to allow login using the default key pair. `YES`: allow login; `NO`: disable login. Default: `YES`.
	// +kubebuilder:validation:Optional
	PermitDefaultKeyPairLogin *string `json:"permitDefaultKeyPairLogin,omitempty" tf:"permit_default_key_pair_login,omitempty"`

	// Auto-Renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically; NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically. You need to manually renew DISABLE_NOTIFY_AND_AUTO_RENEW: neither notify upon expiration nor renew automatically. Default value: NOTIFY_AND_MANUAL_RENEW.
	// Auto-Renewal flag. Valid values: NOTIFY_AND_AUTO_RENEW: notify upon expiration and renew automatically; NOTIFY_AND_MANUAL_RENEW: notify upon expiration but do not renew automatically. You need to manually renew DISABLE_NOTIFY_AND_AUTO_RENEW: neither notify upon expiration nor renew automatically. Default value: NOTIFY_AND_MANUAL_RENEW.
	// +kubebuilder:validation:Optional
	RenewFlag *string `json:"renewFlag,omitempty" tf:"renew_flag,omitempty"`

	// List of availability zones. A random AZ is selected by default.
	// List of availability zones. A random AZ is selected by default.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type LoginConfigurationInitParameters struct {

	// whether auto generate password. if false, need set password.
	// whether auto generate password. if false, need set password.
	AutoGeneratePassword *string `json:"autoGeneratePassword,omitempty" tf:"auto_generate_password,omitempty"`

	// Login password.
	// Login password.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`
}

type LoginConfigurationObservation struct {

	// whether auto generate password. if false, need set password.
	// whether auto generate password. if false, need set password.
	AutoGeneratePassword *string `json:"autoGeneratePassword,omitempty" tf:"auto_generate_password,omitempty"`

	// Login password.
	// Login password.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`
}

type LoginConfigurationParameters struct {

	// whether auto generate password. if false, need set password.
	// whether auto generate password. if false, need set password.
	// +kubebuilder:validation:Optional
	AutoGeneratePassword *string `json:"autoGeneratePassword" tf:"auto_generate_password,omitempty"`

	// Login password.
	// Login password.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`
}

type PublishPortsInitParameters struct {

	// Container port.
	// Container port.
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// Host port.
	// Host port.
	HostPort *float64 `json:"hostPort,omitempty" tf:"host_port,omitempty"`

	// External IP. It defaults to 0.0.0.0.
	// External IP. It defaults to 0.0.0.0.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// The protocol defaults to tcp. Valid values: tcp, udp and sctp.
	// The protocol defaults to tcp. Valid values: tcp, udp and sctp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type PublishPortsObservation struct {

	// Container port.
	// Container port.
	ContainerPort *float64 `json:"containerPort,omitempty" tf:"container_port,omitempty"`

	// Host port.
	// Host port.
	HostPort *float64 `json:"hostPort,omitempty" tf:"host_port,omitempty"`

	// External IP. It defaults to 0.0.0.0.
	// External IP. It defaults to 0.0.0.0.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// The protocol defaults to tcp. Valid values: tcp, udp and sctp.
	// The protocol defaults to tcp. Valid values: tcp, udp and sctp.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type PublishPortsParameters struct {

	// Container port.
	// Container port.
	// +kubebuilder:validation:Optional
	ContainerPort *float64 `json:"containerPort" tf:"container_port,omitempty"`

	// Host port.
	// Host port.
	// +kubebuilder:validation:Optional
	HostPort *float64 `json:"hostPort" tf:"host_port,omitempty"`

	// External IP. It defaults to 0.0.0.0.
	// External IP. It defaults to 0.0.0.0.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// The protocol defaults to tcp. Valid values: tcp, udp and sctp.
	// The protocol defaults to tcp. Valid values: tcp, udp and sctp.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type VolumesInitParameters struct {

	// Container path.
	// Container path.
	ContainerPath *string `json:"containerPath,omitempty" tf:"container_path,omitempty"`

	// Host path.
	// Host path.
	HostPath *string `json:"hostPath,omitempty" tf:"host_path,omitempty"`
}

type VolumesObservation struct {

	// Container path.
	// Container path.
	ContainerPath *string `json:"containerPath,omitempty" tf:"container_path,omitempty"`

	// Host path.
	// Host path.
	HostPath *string `json:"hostPath,omitempty" tf:"host_path,omitempty"`
}

type VolumesParameters struct {

	// Container path.
	// Container path.
	// +kubebuilder:validation:Optional
	ContainerPath *string `json:"containerPath" tf:"container_path,omitempty"`

	// Host path.
	// Host path.
	// +kubebuilder:validation:Optional
	HostPath *string `json:"hostPath" tf:"host_path,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API. Provides a resource to create a lighthouse instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.blueprintId) || (has(self.initProvider) && has(self.initProvider.blueprintId))",message="spec.forProvider.blueprintId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bundleId) || (has(self.initProvider) && has(self.initProvider.bundleId))",message="spec.forProvider.bundleId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceName) || (has(self.initProvider) && has(self.initProvider.instanceName))",message="spec.forProvider.instanceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.renewFlag) || (has(self.initProvider) && has(self.initProvider.renewFlag))",message="spec.forProvider.renewFlag is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
