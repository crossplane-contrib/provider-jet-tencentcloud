// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BatchTasksInitParameters struct {

	// Task name.
	// Task name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target address.
	// Target address.
	TargetAddress *string `json:"targetAddress,omitempty" tf:"target_address,omitempty"`
}

type BatchTasksObservation struct {

	// Task name.
	// Task name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target address.
	// Target address.
	TargetAddress *string `json:"targetAddress,omitempty" tf:"target_address,omitempty"`
}

type BatchTasksParameters struct {

	// Task name.
	// Task name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Target address.
	// Target address.
	// +kubebuilder:validation:Optional
	TargetAddress *string `json:"targetAddress" tf:"target_address,omitempty"`
}

type TaskSetInitParameters struct {

	// Batch task name address.
	// Batch task name address.
	BatchTasks []BatchTasksInitParameters `json:"batchTasks,omitempty" tf:"batch_tasks,omitempty"`

	// Timer task cron expression.
	// Timer task cron expression.
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// Task interval minutes in (1,5,10,15,30,60,120,240).
	// Task interval minutes in (1,5,10,15,30,60,120,240).
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// 0-Unlimit ip type, 1-IPv4, 2-IPv6.
	// `0`-Unlimit ip type, `1`-IPv4, `2`-IPv6.
	NodeIPType *float64 `json:"nodeIpType,omitempty" tf:"node_ip_type,omitempty"`

	// Task Nodes.
	// Task Nodes.
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The input is valid when the parameter is modified, suspend/resume, used to suspend/resume the dial test task.
	// The input is valid when the parameter is modified, `suspend`/`resume`, used to suspend/resume the dial test task.
	Operate *string `json:"operate,omitempty" tf:"operate,omitempty"`

	// tasks parameters.
	// tasks parameters.
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Tag description list.
	// Tag description list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Task category,1:PC,2:Mobile.
	// Task category,1:PC,2:Mobile.
	TaskCategory *float64 `json:"taskCategory,omitempty" tf:"task_category,omitempty"`

	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	TaskType *float64 `json:"taskType,omitempty" tf:"task_type,omitempty"`
}

type TaskSetObservation struct {

	// Batch task name address.
	// Batch task name address.
	BatchTasks []BatchTasksObservation `json:"batchTasks,omitempty" tf:"batch_tasks,omitempty"`

	// Timer task cron expression.
	// Timer task cron expression.
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Task interval minutes in (1,5,10,15,30,60,120,240).
	// Task interval minutes in (1,5,10,15,30,60,120,240).
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// 0-Unlimit ip type, 1-IPv4, 2-IPv6.
	// `0`-Unlimit ip type, `1`-IPv4, `2`-IPv6.
	NodeIPType *float64 `json:"nodeIpType,omitempty" tf:"node_ip_type,omitempty"`

	// Task Nodes.
	// Task Nodes.
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The input is valid when the parameter is modified, suspend/resume, used to suspend/resume the dial test task.
	// The input is valid when the parameter is modified, `suspend`/`resume`, used to suspend/resume the dial test task.
	Operate *string `json:"operate,omitempty" tf:"operate,omitempty"`

	// tasks parameters.
	// tasks parameters.
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Task status 1:TaskPending, 2:TaskRunning,3:TaskRunException,4:TaskSuspending 5:TaskSuspendException,6:TaskSuspendException,7:TaskSuspended,9:TaskDeleted.
	// Task status 1:TaskPending, 2:TaskRunning,3:TaskRunException,4:TaskSuspending 5:TaskSuspendException,6:TaskSuspendException,7:TaskSuspended,9:TaskDeleted.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`

	// Tag description list.
	// Tag description list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Task category,1:PC,2:Mobile.
	// Task category,1:PC,2:Mobile.
	TaskCategory *float64 `json:"taskCategory,omitempty" tf:"task_category,omitempty"`

	// Task Id.
	// Task Id.
	TaskID *string `json:"taskId,omitempty" tf:"task_id,omitempty"`

	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	TaskType *float64 `json:"taskType,omitempty" tf:"task_type,omitempty"`
}

type TaskSetParameters struct {

	// Batch task name address.
	// Batch task name address.
	// +kubebuilder:validation:Optional
	BatchTasks []BatchTasksParameters `json:"batchTasks,omitempty" tf:"batch_tasks,omitempty"`

	// Timer task cron expression.
	// Timer task cron expression.
	// +kubebuilder:validation:Optional
	Cron *string `json:"cron,omitempty" tf:"cron,omitempty"`

	// Task interval minutes in (1,5,10,15,30,60,120,240).
	// Task interval minutes in (1,5,10,15,30,60,120,240).
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// 0-Unlimit ip type, 1-IPv4, 2-IPv6.
	// `0`-Unlimit ip type, `1`-IPv4, `2`-IPv6.
	// +kubebuilder:validation:Optional
	NodeIPType *float64 `json:"nodeIpType,omitempty" tf:"node_ip_type,omitempty"`

	// Task Nodes.
	// Task Nodes.
	// +kubebuilder:validation:Optional
	Nodes []*string `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The input is valid when the parameter is modified, suspend/resume, used to suspend/resume the dial test task.
	// The input is valid when the parameter is modified, `suspend`/`resume`, used to suspend/resume the dial test task.
	// +kubebuilder:validation:Optional
	Operate *string `json:"operate,omitempty" tf:"operate,omitempty"`

	// tasks parameters.
	// tasks parameters.
	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// Tag description list.
	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Task category,1:PC,2:Mobile.
	// Task category,1:PC,2:Mobile.
	// +kubebuilder:validation:Optional
	TaskCategory *float64 `json:"taskCategory,omitempty" tf:"task_category,omitempty"`

	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	// Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
	// +kubebuilder:validation:Optional
	TaskType *float64 `json:"taskType,omitempty" tf:"task_type,omitempty"`
}

// TaskSetSpec defines the desired state of TaskSet
type TaskSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TaskSetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TaskSetInitParameters `json:"initProvider,omitempty"`
}

// TaskSetStatus defines the observed state of TaskSet.
type TaskSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TaskSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TaskSet is the Schema for the TaskSets API. Provides a resource to create a cat task_set
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TaskSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.batchTasks) || (has(self.initProvider) && has(self.initProvider.batchTasks))",message="spec.forProvider.batchTasks is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.interval) || (has(self.initProvider) && has(self.initProvider.interval))",message="spec.forProvider.interval is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodes) || (has(self.initProvider) && has(self.initProvider.nodes))",message="spec.forProvider.nodes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.parameters) || (has(self.initProvider) && has(self.initProvider.parameters))",message="spec.forProvider.parameters is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.taskCategory) || (has(self.initProvider) && has(self.initProvider.taskCategory))",message="spec.forProvider.taskCategory is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.taskType) || (has(self.initProvider) && has(self.initProvider.taskType))",message="spec.forProvider.taskType is a required parameter"
	Spec   TaskSetSpec   `json:"spec"`
	Status TaskSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TaskSetList contains a list of TaskSets
type TaskSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TaskSet `json:"items"`
}

// Repository type metadata.
var (
	TaskSet_Kind             = "TaskSet"
	TaskSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TaskSet_Kind}.String()
	TaskSet_KindAPIVersion   = TaskSet_Kind + "." + CRDGroupVersion.String()
	TaskSet_GroupVersionKind = CRDGroupVersion.WithKind(TaskSet_Kind)
)

func init() {
	SchemeBuilder.Register(&TaskSet{}, &TaskSetList{})
}
