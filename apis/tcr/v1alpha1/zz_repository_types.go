// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryInitParameters struct {

	// Brief description of the repository. Valid length is [1~100].
	// Brief description of the repository. Valid length is [1~100].
	BriefDesc *string `json:"briefDesc,omitempty" tf:"brief_desc,omitempty"`

	// Description of the repository. Valid length is [1~1000].
	// Description of the repository. Valid length is [1~1000].
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the TCR repository. Valid length is [2~200]. It can only contain lowercase letters, numbers and separators (., _, -, /), and cannot start, end or continue with separators. Support the use of multi-level address formats, such as sub1/sub2/repo.
	// Name of the TCR repository. Valid length is [2~200]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`, `/`), and cannot start, end or continue with separators. Support the use of multi-level address formats, such as `sub1/sub2/repo`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the TCR namespace.
	// Name of the TCR namespace.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`
}

type RepositoryObservation struct {

	// Brief description of the repository. Valid length is [1~100].
	// Brief description of the repository. Valid length is [1~100].
	BriefDesc *string `json:"briefDesc,omitempty" tf:"brief_desc,omitempty"`

	// Create time.
	// Create time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description of the repository. Valid length is [1~1000].
	// Description of the repository. Valid length is [1~1000].
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the TCR instance.
	// ID of the TCR instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Indicate the repository is public or not.
	// Indicate the repository is public or not.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Name of the TCR repository. Valid length is [2~200]. It can only contain lowercase letters, numbers and separators (., _, -, /), and cannot start, end or continue with separators. Support the use of multi-level address formats, such as sub1/sub2/repo.
	// Name of the TCR repository. Valid length is [2~200]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`, `/`), and cannot start, end or continue with separators. Support the use of multi-level address formats, such as `sub1/sub2/repo`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the TCR namespace.
	// Name of the TCR namespace.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// URL of the repository.
	// URL of the repository.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Last updated time.
	// Last updated time.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type RepositoryParameters struct {

	// Brief description of the repository. Valid length is [1~100].
	// Brief description of the repository. Valid length is [1~100].
	// +kubebuilder:validation:Optional
	BriefDesc *string `json:"briefDesc,omitempty" tf:"brief_desc,omitempty"`

	// Description of the repository. Valid length is [1~1000].
	// Description of the repository. Valid length is [1~1000].
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the TCR instance.
	// ID of the TCR instance.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Name of the TCR repository. Valid length is [2~200]. It can only contain lowercase letters, numbers and separators (., _, -, /), and cannot start, end or continue with separators. Support the use of multi-level address formats, such as sub1/sub2/repo.
	// Name of the TCR repository. Valid length is [2~200]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`, `/`), and cannot start, end or continue with separators. Support the use of multi-level address formats, such as `sub1/sub2/repo`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the TCR namespace.
	// Name of the TCR namespace.
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`
}

// RepositorySpec defines the desired state of Repository
type RepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryInitParameters `json:"initProvider,omitempty"`
}

// RepositoryStatus defines the observed state of Repository.
type RepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Repository is the Schema for the Repositorys API. Use this resource to create tcr repository.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Repository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.namespaceName) || (has(self.initProvider) && has(self.initProvider.namespaceName))",message="spec.forProvider.namespaceName is a required parameter"
	Spec   RepositorySpec   `json:"spec"`
	Status RepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryList contains a list of Repositorys
type RepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Repository `json:"items"`
}

// Repository type metadata.
var (
	Repository_Kind             = "Repository"
	Repository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Repository_Kind}.String()
	Repository_KindAPIVersion   = Repository_Kind + "." + CRDGroupVersion.String()
	Repository_GroupVersionKind = CRDGroupVersion.WithKind(Repository_Kind)
)

func init() {
	SchemeBuilder.Register(&Repository{}, &RepositoryList{})
}
