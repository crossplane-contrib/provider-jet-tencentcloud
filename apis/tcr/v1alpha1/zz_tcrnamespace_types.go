// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CveWhitelistItemsInitParameters struct {

	// Vulnerability Whitelist ID.
	// Vulnerability Whitelist ID.
	CveID *string `json:"cveId,omitempty" tf:"cve_id,omitempty"`
}

type CveWhitelistItemsObservation struct {

	// Vulnerability Whitelist ID.
	// Vulnerability Whitelist ID.
	CveID *string `json:"cveId,omitempty" tf:"cve_id,omitempty"`
}

type CveWhitelistItemsParameters struct {

	// Vulnerability Whitelist ID.
	// Vulnerability Whitelist ID.
	// +kubebuilder:validation:Optional
	CveID *string `json:"cveId,omitempty" tf:"cve_id,omitempty"`
}

type TcrNamespaceInitParameters struct {

	// Vulnerability Whitelist.
	// Vulnerability Whitelist.
	CveWhitelistItems []CveWhitelistItemsInitParameters `json:"cveWhitelistItems,omitempty" tf:"cve_whitelist_items,omitempty"`

	// ID of the TCR instance.
	// ID of the TCR instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Scanning level, True is automatic, False is manual. Default is false.
	// Scanning level, `True` is automatic, `False` is manual. Default is `false`.
	IsAutoScan *bool `json:"isAutoScan,omitempty" tf:"is_auto_scan,omitempty"`

	// Blocking switch, True is open, False is closed. Default is false.
	// Blocking switch, `True` is open, `False` is closed. Default is `false`.
	IsPreventVul *bool `json:"isPreventVul,omitempty" tf:"is_prevent_vul,omitempty"`

	// Indicate that the namespace is public or not. Default is false.
	// Indicate that the namespace is public or not. Default is `false`.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (., _, -), and cannot start, end or continue with separators.
	// Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Block vulnerability level, currently only supports low, medium, high.
	// Block vulnerability level, currently only supports `low`, `medium`, `high`.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`
}

type TcrNamespaceObservation struct {

	// Vulnerability Whitelist.
	// Vulnerability Whitelist.
	CveWhitelistItems []CveWhitelistItemsObservation `json:"cveWhitelistItems,omitempty" tf:"cve_whitelist_items,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the TCR instance.
	// ID of the TCR instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Scanning level, True is automatic, False is manual. Default is false.
	// Scanning level, `True` is automatic, `False` is manual. Default is `false`.
	IsAutoScan *bool `json:"isAutoScan,omitempty" tf:"is_auto_scan,omitempty"`

	// Blocking switch, True is open, False is closed. Default is false.
	// Blocking switch, `True` is open, `False` is closed. Default is `false`.
	IsPreventVul *bool `json:"isPreventVul,omitempty" tf:"is_prevent_vul,omitempty"`

	// Indicate that the namespace is public or not. Default is false.
	// Indicate that the namespace is public or not. Default is `false`.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (., _, -), and cannot start, end or continue with separators.
	// Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Block vulnerability level, currently only supports low, medium, high.
	// Block vulnerability level, currently only supports `low`, `medium`, `high`.
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`
}

type TcrNamespaceParameters struct {

	// Vulnerability Whitelist.
	// Vulnerability Whitelist.
	// +kubebuilder:validation:Optional
	CveWhitelistItems []CveWhitelistItemsParameters `json:"cveWhitelistItems,omitempty" tf:"cve_whitelist_items,omitempty"`

	// ID of the TCR instance.
	// ID of the TCR instance.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Scanning level, True is automatic, False is manual. Default is false.
	// Scanning level, `True` is automatic, `False` is manual. Default is `false`.
	// +kubebuilder:validation:Optional
	IsAutoScan *bool `json:"isAutoScan,omitempty" tf:"is_auto_scan,omitempty"`

	// Blocking switch, True is open, False is closed. Default is false.
	// Blocking switch, `True` is open, `False` is closed. Default is `false`.
	// +kubebuilder:validation:Optional
	IsPreventVul *bool `json:"isPreventVul,omitempty" tf:"is_prevent_vul,omitempty"`

	// Indicate that the namespace is public or not. Default is false.
	// Indicate that the namespace is public or not. Default is `false`.
	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (., _, -), and cannot start, end or continue with separators.
	// Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Block vulnerability level, currently only supports low, medium, high.
	// Block vulnerability level, currently only supports `low`, `medium`, `high`.
	// +kubebuilder:validation:Optional
	Severity *string `json:"severity,omitempty" tf:"severity,omitempty"`
}

// TcrNamespaceSpec defines the desired state of TcrNamespace
type TcrNamespaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TcrNamespaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TcrNamespaceInitParameters `json:"initProvider,omitempty"`
}

// TcrNamespaceStatus defines the observed state of TcrNamespace.
type TcrNamespaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TcrNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TcrNamespace is the Schema for the TcrNamespaces API. Use this resource to create tcr namespace.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TcrNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TcrNamespaceSpec   `json:"spec"`
	Status TcrNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TcrNamespaceList contains a list of TcrNamespaces
type TcrNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TcrNamespace `json:"items"`
}

// Repository type metadata.
var (
	TcrNamespace_Kind             = "TcrNamespace"
	TcrNamespace_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TcrNamespace_Kind}.String()
	TcrNamespace_KindAPIVersion   = TcrNamespace_Kind + "." + CRDGroupVersion.String()
	TcrNamespace_GroupVersionKind = CRDGroupVersion.WithKind(TcrNamespace_Kind)
)

func init() {
	SchemeBuilder.Register(&TcrNamespace{}, &TcrNamespaceList{})
}
