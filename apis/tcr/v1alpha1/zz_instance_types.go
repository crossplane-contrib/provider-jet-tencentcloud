// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceInitParameters struct {

	// Indicate to delete the COS bucket which is auto-created with the instance or not.
	// Indicate to delete the COS bucket which is auto-created with the instance or not.
	DeleteBucket *bool `json:"deleteBucket,omitempty" tf:"delete_bucket,omitempty"`

	// Length of time to purchase an instance (in month). Must set when registry_charge_type is prepaid.
	// Length of time to purchase an instance (in month). Must set when registry_charge_type is prepaid.
	InstanceChargeTypePrepaidPeriod *float64 `json:"instanceChargeTypePrepaidPeriod,omitempty" tf:"instance_charge_type_prepaid_period,omitempty"`

	// Auto renewal flag. 1: manual renewal, 2: automatic renewal, 3: no renewal and no notification. Must set when registry_charge_type is prepaid.
	// Auto renewal flag. 1: manual renewal, 2: automatic renewal, 3: no renewal and no notification. Must set when registry_charge_type is prepaid.
	InstanceChargeTypePrepaidRenewFlag *float64 `json:"instanceChargeTypePrepaidRenewFlag,omitempty" tf:"instance_charge_type_prepaid_renew_flag,omitempty"`

	// TCR types. Valid values are: standard, basic, premium.
	// TCR types. Valid values are: `standard`, `basic`, `premium`.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Name of the TCR instance.
	// Name of the TCR instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Control public network access.
	// Control public network access.
	OpenPublicOperation *bool `json:"openPublicOperation,omitempty" tf:"open_public_operation,omitempty"`

	// Charge type of instance. 1: postpaid; 2: prepaid. Default is postpaid.
	// Charge type of instance. 1: postpaid; 2: prepaid. Default is postpaid.
	RegistryChargeType *float64 `json:"registryChargeType,omitempty" tf:"registry_charge_type,omitempty"`

	// Specify List of instance Replications, premium only. The available source region list is here.
	// Specify List of instance Replications, premium only. The available [source region list](https://www.tencentcloud.com/document/api/1051/41101) is here.
	Replications []ReplicationsInitParameters `json:"replications,omitempty" tf:"replications,omitempty"`

	// Public network access allowlist policies of the TCR instance. Only available when open_public_operation is true.
	// Public network access allowlist policies of the TCR instance. Only available when `open_public_operation` is `true`.
	SecurityPolicy []SecurityPolicyInitParameters `json:"securityPolicy,omitempty" tf:"security_policy,omitempty"`

	// The available tags within this TCR instance.
	// The available tags within this TCR instance.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type InstanceObservation struct {

	// Indicate to delete the COS bucket which is auto-created with the instance or not.
	// Indicate to delete the COS bucket which is auto-created with the instance or not.
	DeleteBucket *bool `json:"deleteBucket,omitempty" tf:"delete_bucket,omitempty"`

	// Instance expiration time (prepaid).
	// Instance expiration time (prepaid).
	ExpiredAt *string `json:"expiredAt,omitempty" tf:"expired_at,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Length of time to purchase an instance (in month). Must set when registry_charge_type is prepaid.
	// Length of time to purchase an instance (in month). Must set when registry_charge_type is prepaid.
	InstanceChargeTypePrepaidPeriod *float64 `json:"instanceChargeTypePrepaidPeriod,omitempty" tf:"instance_charge_type_prepaid_period,omitempty"`

	// Auto renewal flag. 1: manual renewal, 2: automatic renewal, 3: no renewal and no notification. Must set when registry_charge_type is prepaid.
	// Auto renewal flag. 1: manual renewal, 2: automatic renewal, 3: no renewal and no notification. Must set when registry_charge_type is prepaid.
	InstanceChargeTypePrepaidRenewFlag *float64 `json:"instanceChargeTypePrepaidRenewFlag,omitempty" tf:"instance_charge_type_prepaid_renew_flag,omitempty"`

	// TCR types. Valid values are: standard, basic, premium.
	// TCR types. Valid values are: `standard`, `basic`, `premium`.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Internal address for access of the TCR instance.
	// Internal address for access of the TCR instance.
	InternalEndPoint *string `json:"internalEndPoint,omitempty" tf:"internal_end_point,omitempty"`

	// Name of the TCR instance.
	// Name of the TCR instance.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Control public network access.
	// Control public network access.
	OpenPublicOperation *bool `json:"openPublicOperation,omitempty" tf:"open_public_operation,omitempty"`

	// Public address for access of the TCR instance.
	// Public address for access of the TCR instance.
	PublicDomain *string `json:"publicDomain,omitempty" tf:"public_domain,omitempty"`

	// Status of the TCR instance public network access.
	// Status of the TCR instance public network access.
	PublicStatus *string `json:"publicStatus,omitempty" tf:"public_status,omitempty"`

	// Charge type of instance. 1: postpaid; 2: prepaid. Default is postpaid.
	// Charge type of instance. 1: postpaid; 2: prepaid. Default is postpaid.
	RegistryChargeType *float64 `json:"registryChargeType,omitempty" tf:"registry_charge_type,omitempty"`

	// Specify List of instance Replications, premium only. The available source region list is here.
	// Specify List of instance Replications, premium only. The available [source region list](https://www.tencentcloud.com/document/api/1051/41101) is here.
	Replications []ReplicationsObservation `json:"replications,omitempty" tf:"replications,omitempty"`

	// Public network access allowlist policies of the TCR instance. Only available when open_public_operation is true.
	// Public network access allowlist policies of the TCR instance. Only available when `open_public_operation` is `true`.
	SecurityPolicy []SecurityPolicyObservation `json:"securityPolicy,omitempty" tf:"security_policy,omitempty"`

	// Status of the TCR instance.
	// Status of the TCR instance.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The available tags within this TCR instance.
	// The available tags within this TCR instance.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type InstanceParameters struct {

	// Indicate to delete the COS bucket which is auto-created with the instance or not.
	// Indicate to delete the COS bucket which is auto-created with the instance or not.
	// +kubebuilder:validation:Optional
	DeleteBucket *bool `json:"deleteBucket,omitempty" tf:"delete_bucket,omitempty"`

	// Length of time to purchase an instance (in month). Must set when registry_charge_type is prepaid.
	// Length of time to purchase an instance (in month). Must set when registry_charge_type is prepaid.
	// +kubebuilder:validation:Optional
	InstanceChargeTypePrepaidPeriod *float64 `json:"instanceChargeTypePrepaidPeriod,omitempty" tf:"instance_charge_type_prepaid_period,omitempty"`

	// Auto renewal flag. 1: manual renewal, 2: automatic renewal, 3: no renewal and no notification. Must set when registry_charge_type is prepaid.
	// Auto renewal flag. 1: manual renewal, 2: automatic renewal, 3: no renewal and no notification. Must set when registry_charge_type is prepaid.
	// +kubebuilder:validation:Optional
	InstanceChargeTypePrepaidRenewFlag *float64 `json:"instanceChargeTypePrepaidRenewFlag,omitempty" tf:"instance_charge_type_prepaid_renew_flag,omitempty"`

	// TCR types. Valid values are: standard, basic, premium.
	// TCR types. Valid values are: `standard`, `basic`, `premium`.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Name of the TCR instance.
	// Name of the TCR instance.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Control public network access.
	// Control public network access.
	// +kubebuilder:validation:Optional
	OpenPublicOperation *bool `json:"openPublicOperation,omitempty" tf:"open_public_operation,omitempty"`

	// Charge type of instance. 1: postpaid; 2: prepaid. Default is postpaid.
	// Charge type of instance. 1: postpaid; 2: prepaid. Default is postpaid.
	// +kubebuilder:validation:Optional
	RegistryChargeType *float64 `json:"registryChargeType,omitempty" tf:"registry_charge_type,omitempty"`

	// Specify List of instance Replications, premium only. The available source region list is here.
	// Specify List of instance Replications, premium only. The available [source region list](https://www.tencentcloud.com/document/api/1051/41101) is here.
	// +kubebuilder:validation:Optional
	Replications []ReplicationsParameters `json:"replications,omitempty" tf:"replications,omitempty"`

	// Public network access allowlist policies of the TCR instance. Only available when open_public_operation is true.
	// Public network access allowlist policies of the TCR instance. Only available when `open_public_operation` is `true`.
	// +kubebuilder:validation:Optional
	SecurityPolicy []SecurityPolicyParameters `json:"securityPolicy,omitempty" tf:"security_policy,omitempty"`

	// The available tags within this TCR instance.
	// The available tags within this TCR instance.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReplicationsInitParameters struct {

	// Replication region ID, check the example at the top of page to find out id of region.
	// Replication region ID, check the example at the top of page to find out id of region.
	RegionID *float64 `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// Replication region name.
	// Replication region name.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
	// Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
	SynTag *bool `json:"synTag,omitempty" tf:"syn_tag,omitempty"`
}

type ReplicationsObservation struct {

	// ID of the resource.
	// Replication registry ID (readonly).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Replication region ID, check the example at the top of page to find out id of region.
	// Replication region ID, check the example at the top of page to find out id of region.
	RegionID *float64 `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// Replication region name.
	// Replication region name.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
	// Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
	SynTag *bool `json:"synTag,omitempty" tf:"syn_tag,omitempty"`
}

type ReplicationsParameters struct {

	// Replication region ID, check the example at the top of page to find out id of region.
	// Replication region ID, check the example at the top of page to find out id of region.
	// +kubebuilder:validation:Optional
	RegionID *float64 `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// Replication region name.
	// Replication region name.
	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
	// Specify whether to sync TCR cloud tags to COS Bucket. NOTE: You have to specify when adding, modifying will be ignored for now.
	// +kubebuilder:validation:Optional
	SynTag *bool `json:"synTag,omitempty" tf:"syn_tag,omitempty"`
}

type SecurityPolicyInitParameters struct {

	// The public network IP address of the access source.
	// The public network IP address of the access source.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Remarks of policy.
	// Remarks of policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

type SecurityPolicyObservation struct {

	// The public network IP address of the access source.
	// The public network IP address of the access source.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Remarks of policy.
	// Remarks of policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Index of policy.
	Index *float64 `json:"index,omitempty" tf:"index,omitempty"`

	// Version of policy.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SecurityPolicyParameters struct {

	// The public network IP address of the access source.
	// The public network IP address of the access source.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Remarks of policy.
	// Remarks of policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Instance is the Schema for the Instances API. Use this resource to create tcr instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceType) || (has(self.initProvider) && has(self.initProvider.instanceType))",message="spec.forProvider.instanceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
