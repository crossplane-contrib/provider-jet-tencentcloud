// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateInitParameters struct {

	// Content of the certificate, and URL encoding. When the certificate is basic authentication, use the user:xxx password:xxx format, where the password is encrypted with htpasswd or openssl; When the certificate is CA or SSL, the format is pem.
	// Content of the certificate, and URL encoding. When the certificate is basic authentication, use the `user:xxx password:xxx` format, where the password is encrypted with `htpasswd` or `openssl`; When the certificate is `CA` or `SSL`, the format is `pem`.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Name of the certificate.
	// Name of the certificate.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of the certificate. Valid value: BASIC, CLIENT, SERVER, REALSERVER and PROXY. BASIC means basic certificate; CLIENT means client CA certificate; SERVER means server SSL certificate; REALSERVER means realserver CA certificate; PROXY means proxy SSL certificate.
	// Type of the certificate. Valid value: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CertificateObservation struct {

	// Beginning time of the certificate.
	// Beginning time of the certificate.
	BeginTime *string `json:"beginTime,omitempty" tf:"begin_time,omitempty"`

	// Content of the certificate, and URL encoding. When the certificate is basic authentication, use the user:xxx password:xxx format, where the password is encrypted with htpasswd or openssl; When the certificate is CA or SSL, the format is pem.
	// Content of the certificate, and URL encoding. When the certificate is basic authentication, use the `user:xxx password:xxx` format, where the password is encrypted with `htpasswd` or `openssl`; When the certificate is `CA` or `SSL`, the format is `pem`.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Creation time of the certificate.
	// Creation time of the certificate.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Ending time of the certificate.
	// Ending time of the certificate.
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Issuer name of the certificate.
	// Issuer name of the certificate.
	IssuerCn *string `json:"issuerCn,omitempty" tf:"issuer_cn,omitempty"`

	// Name of the certificate.
	// Name of the certificate.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Subject name of the certificate.
	// Subject name of the certificate.
	SubjectCn *string `json:"subjectCn,omitempty" tf:"subject_cn,omitempty"`

	// Type of the certificate. Valid value: BASIC, CLIENT, SERVER, REALSERVER and PROXY. BASIC means basic certificate; CLIENT means client CA certificate; SERVER means server SSL certificate; REALSERVER means realserver CA certificate; PROXY means proxy SSL certificate.
	// Type of the certificate. Valid value: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CertificateParameters struct {

	// Content of the certificate, and URL encoding. When the certificate is basic authentication, use the user:xxx password:xxx format, where the password is encrypted with htpasswd or openssl; When the certificate is CA or SSL, the format is pem.
	// Content of the certificate, and URL encoding. When the certificate is basic authentication, use the `user:xxx password:xxx` format, where the password is encrypted with `htpasswd` or `openssl`; When the certificate is `CA` or `SSL`, the format is `pem`.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Key of the SSL certificate.
	// Key of the `SSL` certificate.
	// +kubebuilder:validation:Optional
	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	// Name of the certificate.
	// Name of the certificate.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type of the certificate. Valid value: BASIC, CLIENT, SERVER, REALSERVER and PROXY. BASIC means basic certificate; CLIENT means client CA certificate; SERVER means server SSL certificate; REALSERVER means realserver CA certificate; PROXY means proxy SSL certificate.
	// Type of the certificate. Valid value: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver CA certificate; `PROXY` means proxy SSL certificate.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CertificateSpec defines the desired state of Certificate
type CertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CertificateInitParameters `json:"initProvider,omitempty"`
}

// CertificateStatus defines the observed state of Certificate.
type CertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Certificate is the Schema for the Certificates API. Provides a resource to create a certificate of GAAP.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Certificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   CertificateSpec   `json:"spec"`
	Status CertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateList contains a list of Certificates
type CertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Certificate `json:"items"`
}

// Repository type metadata.
var (
	Certificate_Kind             = "Certificate"
	Certificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Certificate_Kind}.String()
	Certificate_KindAPIVersion   = Certificate_Kind + "." + CRDGroupVersion.String()
	Certificate_GroupVersionKind = CRDGroupVersion.WithKind(Certificate_Kind)
)

func init() {
	SchemeBuilder.Register(&Certificate{}, &CertificateList{})
}
