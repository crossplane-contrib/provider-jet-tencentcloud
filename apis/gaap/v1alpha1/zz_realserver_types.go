// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RealserverInitParameters struct {

	// Domain of the GAAP realserver, conflict with ip.
	// Domain of the GAAP realserver, conflict with `ip`.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// IP of the GAAP realserver, conflict with domain.
	// IP of the GAAP realserver, conflict with `domain`.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the GAAP realserver, the maximum length is 30.
	// Name of the GAAP realserver, the maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project within the GAAP realserver, '0' means is default project.
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Tags of the GAAP realserver.
	// Tags of the GAAP realserver.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type RealserverObservation struct {

	// Domain of the GAAP realserver, conflict with ip.
	// Domain of the GAAP realserver, conflict with `ip`.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP of the GAAP realserver, conflict with domain.
	// IP of the GAAP realserver, conflict with `domain`.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the GAAP realserver, the maximum length is 30.
	// Name of the GAAP realserver, the maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project within the GAAP realserver, '0' means is default project.
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Tags of the GAAP realserver.
	// Tags of the GAAP realserver.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type RealserverParameters struct {

	// Domain of the GAAP realserver, conflict with ip.
	// Domain of the GAAP realserver, conflict with `ip`.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// IP of the GAAP realserver, conflict with domain.
	// IP of the GAAP realserver, conflict with `domain`.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the GAAP realserver, the maximum length is 30.
	// Name of the GAAP realserver, the maximum length is 30.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the project within the GAAP realserver, '0' means is default project.
	// ID of the project within the GAAP realserver, '0' means is default project.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Tags of the GAAP realserver.
	// Tags of the GAAP realserver.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// RealserverSpec defines the desired state of Realserver
type RealserverSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RealserverParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RealserverInitParameters `json:"initProvider,omitempty"`
}

// RealserverStatus defines the observed state of Realserver.
type RealserverStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RealserverObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Realserver is the Schema for the Realservers API. Provides a resource to create a GAAP realserver.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Realserver struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RealserverSpec   `json:"spec"`
	Status RealserverStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RealserverList contains a list of Realservers
type RealserverList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Realserver `json:"items"`
}

// Repository type metadata.
var (
	Realserver_Kind             = "Realserver"
	Realserver_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Realserver_Kind}.String()
	Realserver_KindAPIVersion   = Realserver_Kind + "." + CRDGroupVersion.String()
	Realserver_GroupVersionKind = CRDGroupVersion.WithKind(Realserver_Kind)
)

func init() {
	SchemeBuilder.Register(&Realserver{}, &RealserverList{})
}
