// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Layer4ListenerInitParameters struct {

	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of TCP protocol.
	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of `TCP` protocol.
	ClientIPMethod *float64 `json:"clientIpMethod,omitempty" tf:"client_ip_method,omitempty"`

	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of TCP protocol and require less than interval.
	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of `TCP` protocol and require less than `interval`.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Indicates whether health check is enable, default value is false. NOTES: Only supports listeners of TCP protocol.
	// Indicates whether health check is enable, default value is `false`. NOTES: Only supports listeners of `TCP` protocol.
	HealthCheck *bool `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of TCP protocol.
	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of `TCP` protocol.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Name of the layer4 listener, the maximum length is 30.
	// Name of the layer4 listener, the maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the layer4 listener.
	// Port of the layer4 listener.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the layer4 listener. Valid value: TCP and UDP.
	// Protocol of the layer4 listener. Valid value: `TCP` and `UDP`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// An information list of GAAP realserver.
	// An information list of GAAP realserver.
	RealserverBindSet []RealserverBindSetInitParameters `json:"realserverBindSet,omitempty" tf:"realserver_bind_set,omitempty"`

	// Type of the realserver. Valid value: IP and DOMAIN. NOTES: when the protocol is specified as TCP and the scheduler is specified as wrr, the item can only be set to IP.
	// Type of the realserver. Valid value: `IP` and `DOMAIN`. NOTES: when the `protocol` is specified as `TCP` and the `scheduler` is specified as `wrr`, the item can only be set to `IP`.
	RealserverType *string `json:"realserverType,omitempty" tf:"realserver_type,omitempty"`

	// Scheduling policy of the layer4 listener, default value is rr. Valid value: rr, wrr and lc.
	// Scheduling policy of the layer4 listener, default value is `rr`. Valid value: `rr`, `wrr` and `lc`.
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`
}

type Layer4ListenerObservation struct {

	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of TCP protocol.
	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of `TCP` protocol.
	ClientIPMethod *float64 `json:"clientIpMethod,omitempty" tf:"client_ip_method,omitempty"`

	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of TCP protocol and require less than interval.
	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of `TCP` protocol and require less than `interval`.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Creation time of the layer4 listener.
	// Creation time of the layer4 listener.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Indicates whether health check is enable, default value is false. NOTES: Only supports listeners of TCP protocol.
	// Indicates whether health check is enable, default value is `false`. NOTES: Only supports listeners of `TCP` protocol.
	HealthCheck *bool `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// ID of the GAAP realserver.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of TCP protocol.
	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of `TCP` protocol.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Name of the layer4 listener, the maximum length is 30.
	// Name of the layer4 listener, the maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the layer4 listener.
	// Port of the layer4 listener.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the layer4 listener. Valid value: TCP and UDP.
	// Protocol of the layer4 listener. Valid value: `TCP` and `UDP`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the GAAP proxy.
	// ID of the GAAP proxy.
	ProxyID *string `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	// An information list of GAAP realserver.
	// An information list of GAAP realserver.
	RealserverBindSet []RealserverBindSetObservation `json:"realserverBindSet,omitempty" tf:"realserver_bind_set,omitempty"`

	// Type of the realserver. Valid value: IP and DOMAIN. NOTES: when the protocol is specified as TCP and the scheduler is specified as wrr, the item can only be set to IP.
	// Type of the realserver. Valid value: `IP` and `DOMAIN`. NOTES: when the `protocol` is specified as `TCP` and the `scheduler` is specified as `wrr`, the item can only be set to `IP`.
	RealserverType *string `json:"realserverType,omitempty" tf:"realserver_type,omitempty"`

	// Scheduling policy of the layer4 listener, default value is rr. Valid value: rr, wrr and lc.
	// Scheduling policy of the layer4 listener, default value is `rr`. Valid value: `rr`, `wrr` and `lc`.
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Status of the layer4 listener.
	// Status of the layer4 listener.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type Layer4ListenerParameters struct {

	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of TCP protocol.
	// The way the listener gets the client IP, 0 for TOA, 1 for Proxy Protocol, default value is 0. NOTES: Only supports listeners of `TCP` protocol.
	// +kubebuilder:validation:Optional
	ClientIPMethod *float64 `json:"clientIpMethod,omitempty" tf:"client_ip_method,omitempty"`

	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of TCP protocol and require less than interval.
	// Timeout of the health check response, should less than interval, default value is 2s. NOTES: Only supports listeners of `TCP` protocol and require less than `interval`.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Indicates whether health check is enable, default value is false. NOTES: Only supports listeners of TCP protocol.
	// Indicates whether health check is enable, default value is `false`. NOTES: Only supports listeners of `TCP` protocol.
	// +kubebuilder:validation:Optional
	HealthCheck *bool `json:"healthCheck,omitempty" tf:"health_check,omitempty"`

	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of TCP protocol.
	// Interval of the health check, default value is 5s. NOTES: Only supports listeners of `TCP` protocol.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Name of the layer4 listener, the maximum length is 30.
	// Name of the layer4 listener, the maximum length is 30.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the layer4 listener.
	// Port of the layer4 listener.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the layer4 listener. Valid value: TCP and UDP.
	// Protocol of the layer4 listener. Valid value: `TCP` and `UDP`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the GAAP proxy.
	// ID of the GAAP proxy.
	// +crossplane:generate:reference:type=Proxy
	// +kubebuilder:validation:Optional
	ProxyID *string `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	// Reference to a Proxy to populate proxyId.
	// +kubebuilder:validation:Optional
	ProxyIDRef *v1.Reference `json:"proxyIdRef,omitempty" tf:"-"`

	// Selector for a Proxy to populate proxyId.
	// +kubebuilder:validation:Optional
	ProxyIDSelector *v1.Selector `json:"proxyIdSelector,omitempty" tf:"-"`

	// An information list of GAAP realserver.
	// An information list of GAAP realserver.
	// +kubebuilder:validation:Optional
	RealserverBindSet []RealserverBindSetParameters `json:"realserverBindSet,omitempty" tf:"realserver_bind_set,omitempty"`

	// Type of the realserver. Valid value: IP and DOMAIN. NOTES: when the protocol is specified as TCP and the scheduler is specified as wrr, the item can only be set to IP.
	// Type of the realserver. Valid value: `IP` and `DOMAIN`. NOTES: when the `protocol` is specified as `TCP` and the `scheduler` is specified as `wrr`, the item can only be set to `IP`.
	// +kubebuilder:validation:Optional
	RealserverType *string `json:"realserverType,omitempty" tf:"realserver_type,omitempty"`

	// Scheduling policy of the layer4 listener, default value is rr. Valid value: rr, wrr and lc.
	// Scheduling policy of the layer4 listener, default value is `rr`. Valid value: `rr`, `wrr` and `lc`.
	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`
}

type RealserverBindSetInitParameters struct {

	// ID of the GAAP realserver.
	// ID of the GAAP realserver.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP of the GAAP realserver.
	// IP of the GAAP realserver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Port of the layer4 listener.
	// Port of the GAAP realserver.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Scheduling weight, default value is 1. The range of values is [1,100].
	// Scheduling weight, default value is `1`. The range of values is [1,100].
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RealserverBindSetObservation struct {

	// ID of the GAAP realserver.
	// ID of the GAAP realserver.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP of the GAAP realserver.
	// IP of the GAAP realserver.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Port of the layer4 listener.
	// Port of the GAAP realserver.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Scheduling weight, default value is 1. The range of values is [1,100].
	// Scheduling weight, default value is `1`. The range of values is [1,100].
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RealserverBindSetParameters struct {

	// ID of the GAAP realserver.
	// ID of the GAAP realserver.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// IP of the GAAP realserver.
	// IP of the GAAP realserver.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Port of the layer4 listener.
	// Port of the GAAP realserver.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Scheduling weight, default value is 1. The range of values is [1,100].
	// Scheduling weight, default value is `1`. The range of values is [1,100].
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// Layer4ListenerSpec defines the desired state of Layer4Listener
type Layer4ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Layer4ListenerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider Layer4ListenerInitParameters `json:"initProvider,omitempty"`
}

// Layer4ListenerStatus defines the observed state of Layer4Listener.
type Layer4ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Layer4ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Layer4Listener is the Schema for the Layer4Listeners API. Provides a resource to create a layer4 listener of GAAP.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Layer4Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.realserverType) || (has(self.initProvider) && has(self.initProvider.realserverType))",message="spec.forProvider.realserverType is a required parameter"
	Spec   Layer4ListenerSpec   `json:"spec"`
	Status Layer4ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Layer4ListenerList contains a list of Layer4Listeners
type Layer4ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Layer4Listener `json:"items"`
}

// Repository type metadata.
var (
	Layer4Listener_Kind             = "Layer4Listener"
	Layer4Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Layer4Listener_Kind}.String()
	Layer4Listener_KindAPIVersion   = Layer4Listener_Kind + "." + CRDGroupVersion.String()
	Layer4Listener_GroupVersionKind = CRDGroupVersion.WithKind(Layer4Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Layer4Listener{}, &Layer4ListenerList{})
}
