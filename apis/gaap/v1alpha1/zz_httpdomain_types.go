// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HttpDomainInitParameters struct {

	// Indicates whether basic authentication is enable, default value is false.
	// Indicates whether basic authentication is enable, default value is `false`.
	BasicAuth *bool `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// ID of the basic authentication.
	// ID of the basic authentication.
	BasicAuthID *string `json:"basicAuthId,omitempty" tf:"basic_auth_id,omitempty"`

	// ID of the server certificate, default value is default.
	// ID of the server certificate, default value is `default`.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// It has been deprecated from version 1.26.0. Set client_certificate_ids instead. ID of the client certificate, default value is default.
	// ID of the client certificate, default value is `default`.
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the poly client certificate.
	// ID list of the poly client certificate.
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Forward domain of the layer7 listener.
	// Forward domain of the layer7 listener.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Indicates whether SSL certificate authentication is enable, default value is false.
	// Indicates whether SSL certificate authentication is enable, default value is `false`.
	GaapAuth *bool `json:"gaapAuth,omitempty" tf:"gaap_auth,omitempty"`

	// ID of the SSL certificate.
	// ID of the SSL certificate.
	GaapAuthID *string `json:"gaapAuthId,omitempty" tf:"gaap_auth_id,omitempty"`

	// Indicates whether realserver authentication is enable, default value is false.
	// Indicates whether realserver authentication is enable, default value is `false`.
	RealserverAuth *bool `json:"realserverAuth,omitempty" tf:"realserver_auth,omitempty"`

	// CA certificate domain of the realserver. It has been deprecated.
	// CA certificate domain of the realserver. It has been deprecated.
	RealserverCertificateDomain *string `json:"realserverCertificateDomain,omitempty" tf:"realserver_certificate_domain,omitempty"`

	// It has been deprecated from version 1.28.0. Set realserver_certificate_ids instead. CA certificate ID of the realserver.
	// CA certificate ID of the realserver.
	RealserverCertificateID *string `json:"realserverCertificateId,omitempty" tf:"realserver_certificate_id,omitempty"`

	// CA certificate ID list of the realserver.
	// CA certificate ID list of the realserver.
	RealserverCertificateIds []*string `json:"realserverCertificateIds,omitempty" tf:"realserver_certificate_ids,omitempty"`
}

type HttpDomainObservation struct {

	// Indicates whether basic authentication is enable, default value is false.
	// Indicates whether basic authentication is enable, default value is `false`.
	BasicAuth *bool `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// ID of the basic authentication.
	// ID of the basic authentication.
	BasicAuthID *string `json:"basicAuthId,omitempty" tf:"basic_auth_id,omitempty"`

	// ID of the server certificate, default value is default.
	// ID of the server certificate, default value is `default`.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// It has been deprecated from version 1.26.0. Set client_certificate_ids instead. ID of the client certificate, default value is default.
	// ID of the client certificate, default value is `default`.
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the poly client certificate.
	// ID list of the poly client certificate.
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Forward domain of the layer7 listener.
	// Forward domain of the layer7 listener.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Indicates whether SSL certificate authentication is enable, default value is false.
	// Indicates whether SSL certificate authentication is enable, default value is `false`.
	GaapAuth *bool `json:"gaapAuth,omitempty" tf:"gaap_auth,omitempty"`

	// ID of the SSL certificate.
	// ID of the SSL certificate.
	GaapAuthID *string `json:"gaapAuthId,omitempty" tf:"gaap_auth_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the layer7 listener.
	// ID of the layer7 listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Indicates whether realserver authentication is enable, default value is false.
	// Indicates whether realserver authentication is enable, default value is `false`.
	RealserverAuth *bool `json:"realserverAuth,omitempty" tf:"realserver_auth,omitempty"`

	// CA certificate domain of the realserver. It has been deprecated.
	// CA certificate domain of the realserver. It has been deprecated.
	RealserverCertificateDomain *string `json:"realserverCertificateDomain,omitempty" tf:"realserver_certificate_domain,omitempty"`

	// It has been deprecated from version 1.28.0. Set realserver_certificate_ids instead. CA certificate ID of the realserver.
	// CA certificate ID of the realserver.
	RealserverCertificateID *string `json:"realserverCertificateId,omitempty" tf:"realserver_certificate_id,omitempty"`

	// CA certificate ID list of the realserver.
	// CA certificate ID list of the realserver.
	RealserverCertificateIds []*string `json:"realserverCertificateIds,omitempty" tf:"realserver_certificate_ids,omitempty"`
}

type HttpDomainParameters struct {

	// Indicates whether basic authentication is enable, default value is false.
	// Indicates whether basic authentication is enable, default value is `false`.
	// +kubebuilder:validation:Optional
	BasicAuth *bool `json:"basicAuth,omitempty" tf:"basic_auth,omitempty"`

	// ID of the basic authentication.
	// ID of the basic authentication.
	// +kubebuilder:validation:Optional
	BasicAuthID *string `json:"basicAuthId,omitempty" tf:"basic_auth_id,omitempty"`

	// ID of the server certificate, default value is default.
	// ID of the server certificate, default value is `default`.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// It has been deprecated from version 1.26.0. Set client_certificate_ids instead. ID of the client certificate, default value is default.
	// ID of the client certificate, default value is `default`.
	// +kubebuilder:validation:Optional
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the poly client certificate.
	// ID list of the poly client certificate.
	// +kubebuilder:validation:Optional
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Forward domain of the layer7 listener.
	// Forward domain of the layer7 listener.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Indicates whether SSL certificate authentication is enable, default value is false.
	// Indicates whether SSL certificate authentication is enable, default value is `false`.
	// +kubebuilder:validation:Optional
	GaapAuth *bool `json:"gaapAuth,omitempty" tf:"gaap_auth,omitempty"`

	// ID of the SSL certificate.
	// ID of the SSL certificate.
	// +kubebuilder:validation:Optional
	GaapAuthID *string `json:"gaapAuthId,omitempty" tf:"gaap_auth_id,omitempty"`

	// ID of the layer7 listener.
	// ID of the layer7 listener.
	// +crossplane:generate:reference:type=Layer7Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a Layer7Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a Layer7Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Indicates whether realserver authentication is enable, default value is false.
	// Indicates whether realserver authentication is enable, default value is `false`.
	// +kubebuilder:validation:Optional
	RealserverAuth *bool `json:"realserverAuth,omitempty" tf:"realserver_auth,omitempty"`

	// CA certificate domain of the realserver. It has been deprecated.
	// CA certificate domain of the realserver. It has been deprecated.
	// +kubebuilder:validation:Optional
	RealserverCertificateDomain *string `json:"realserverCertificateDomain,omitempty" tf:"realserver_certificate_domain,omitempty"`

	// It has been deprecated from version 1.28.0. Set realserver_certificate_ids instead. CA certificate ID of the realserver.
	// CA certificate ID of the realserver.
	// +kubebuilder:validation:Optional
	RealserverCertificateID *string `json:"realserverCertificateId,omitempty" tf:"realserver_certificate_id,omitempty"`

	// CA certificate ID list of the realserver.
	// CA certificate ID list of the realserver.
	// +kubebuilder:validation:Optional
	RealserverCertificateIds []*string `json:"realserverCertificateIds,omitempty" tf:"realserver_certificate_ids,omitempty"`
}

// HttpDomainSpec defines the desired state of HttpDomain
type HttpDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HttpDomainParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HttpDomainInitParameters `json:"initProvider,omitempty"`
}

// HttpDomainStatus defines the observed state of HttpDomain.
type HttpDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HttpDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HttpDomain is the Schema for the HttpDomains API. Provides a resource to create a forward domain of layer7 listener.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type HttpDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	Spec   HttpDomainSpec   `json:"spec"`
	Status HttpDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HttpDomainList contains a list of HttpDomains
type HttpDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HttpDomain `json:"items"`
}

// Repository type metadata.
var (
	HttpDomain_Kind             = "HttpDomain"
	HttpDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HttpDomain_Kind}.String()
	HttpDomain_KindAPIVersion   = HttpDomain_Kind + "." + CRDGroupVersion.String()
	HttpDomain_GroupVersionKind = CRDGroupVersion.WithKind(HttpDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&HttpDomain{}, &HttpDomainList{})
}
