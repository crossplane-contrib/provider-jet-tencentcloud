// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Layer7ListenerInitParameters struct {

	// Authentication type of the layer7 listener. 0 is one-way authentication and 1 is mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	AuthType *float64 `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Certificate ID of the layer7 listener. NOTES: Only supports listeners of HTTPS protocol.
	// Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// It has been deprecated from version 1.26.0. Set client_certificate_ids instead. ID of the client certificate. Set only when auth_type is specified as mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the client certificate. Set only when auth_type is specified as mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Protocol type of the forwarding. Valid value: HTTP and HTTPS. NOTES: Only supports listeners of HTTPS protocol.
	// Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
	ForwardProtocol *string `json:"forwardProtocol,omitempty" tf:"forward_protocol,omitempty"`

	// Name of the layer7 listener, the maximum length is 30.
	// Name of the layer7 listener, the maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the layer7 listener.
	// Port of the layer7 listener.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the layer7 listener. Valid value: HTTP and HTTPS.
	// Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type Layer7ListenerObservation struct {

	// Authentication type of the layer7 listener. 0 is one-way authentication and 1 is mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	AuthType *float64 `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Certificate ID of the layer7 listener. NOTES: Only supports listeners of HTTPS protocol.
	// Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// It has been deprecated from version 1.26.0. Set client_certificate_ids instead. ID of the client certificate. Set only when auth_type is specified as mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the client certificate. Set only when auth_type is specified as mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Creation time of the layer7 listener.
	// Creation time of the layer7 listener.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Protocol type of the forwarding. Valid value: HTTP and HTTPS. NOTES: Only supports listeners of HTTPS protocol.
	// Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
	ForwardProtocol *string `json:"forwardProtocol,omitempty" tf:"forward_protocol,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the layer7 listener, the maximum length is 30.
	// Name of the layer7 listener, the maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the layer7 listener.
	// Port of the layer7 listener.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the layer7 listener. Valid value: HTTP and HTTPS.
	// Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the GAAP proxy.
	// ID of the GAAP proxy.
	ProxyID *string `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	// Status of the layer7 listener.
	// Status of the layer7 listener.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type Layer7ListenerParameters struct {

	// Authentication type of the layer7 listener. 0 is one-way authentication and 1 is mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// Authentication type of the layer7 listener. `0` is one-way authentication and `1` is mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	AuthType *float64 `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Certificate ID of the layer7 listener. NOTES: Only supports listeners of HTTPS protocol.
	// Certificate ID of the layer7 listener. NOTES: Only supports listeners of `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// It has been deprecated from version 1.26.0. Set client_certificate_ids instead. ID of the client certificate. Set only when auth_type is specified as mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// ID list of the client certificate. Set only when auth_type is specified as mutual authentication. NOTES: Only supports listeners of HTTPS protocol.
	// ID list of the client certificate. Set only when `auth_type` is specified as mutual authentication. NOTES: Only supports listeners of `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	ClientCertificateIds []*string `json:"clientCertificateIds,omitempty" tf:"client_certificate_ids,omitempty"`

	// Protocol type of the forwarding. Valid value: HTTP and HTTPS. NOTES: Only supports listeners of HTTPS protocol.
	// Protocol type of the forwarding. Valid value: `HTTP` and `HTTPS`. NOTES: Only supports listeners of `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	ForwardProtocol *string `json:"forwardProtocol,omitempty" tf:"forward_protocol,omitempty"`

	// Name of the layer7 listener, the maximum length is 30.
	// Name of the layer7 listener, the maximum length is 30.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Port of the layer7 listener.
	// Port of the layer7 listener.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the layer7 listener. Valid value: HTTP and HTTPS.
	// Protocol of the layer7 listener. Valid value: `HTTP` and `HTTPS`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the GAAP proxy.
	// ID of the GAAP proxy.
	// +crossplane:generate:reference:type=Proxy
	// +kubebuilder:validation:Optional
	ProxyID *string `json:"proxyId,omitempty" tf:"proxy_id,omitempty"`

	// Reference to a Proxy to populate proxyId.
	// +kubebuilder:validation:Optional
	ProxyIDRef *v1.Reference `json:"proxyIdRef,omitempty" tf:"-"`

	// Selector for a Proxy to populate proxyId.
	// +kubebuilder:validation:Optional
	ProxyIDSelector *v1.Selector `json:"proxyIdSelector,omitempty" tf:"-"`
}

// Layer7ListenerSpec defines the desired state of Layer7Listener
type Layer7ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Layer7ListenerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider Layer7ListenerInitParameters `json:"initProvider,omitempty"`
}

// Layer7ListenerStatus defines the observed state of Layer7Listener.
type Layer7ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Layer7ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Layer7Listener is the Schema for the Layer7Listeners API. Provides a resource to create a layer7 listener of GAAP.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Layer7Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   Layer7ListenerSpec   `json:"spec"`
	Status Layer7ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Layer7ListenerList contains a list of Layer7Listeners
type Layer7ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Layer7Listener `json:"items"`
}

// Repository type metadata.
var (
	Layer7Listener_Kind             = "Layer7Listener"
	Layer7Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Layer7Listener_Kind}.String()
	Layer7Listener_KindAPIVersion   = Layer7Listener_Kind + "." + CRDGroupVersion.String()
	Layer7Listener_GroupVersionKind = CRDGroupVersion.WithKind(Layer7Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Layer7Listener{}, &Layer7ListenerList{})
}
