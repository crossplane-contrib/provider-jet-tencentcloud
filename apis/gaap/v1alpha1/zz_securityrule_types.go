// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityRuleInitParameters struct {

	// Policy of the rule. Valid value: ACCEPT and DROP.
	// Policy of the rule. Valid value: `ACCEPT` and `DROP`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A network address block of the request source.
	// A network address block of the request source.
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// Name of the security policy rule. Maximum length is 30.
	// Name of the security policy rule. Maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Target port. Default value is ALL. Valid examples: 80, 80,443 and 3306-20000.
	// Target port. Default value is `ALL`. Valid examples: `80`, `80,443` and `3306-20000`.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the security policy rule. Default value is ALL. Valid value: TCP, UDP and ALL.
	// Protocol of the security policy rule. Default value is `ALL`. Valid value: `TCP`, `UDP` and `ALL`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type SecurityRuleObservation struct {

	// Policy of the rule. Valid value: ACCEPT and DROP.
	// Policy of the rule. Valid value: `ACCEPT` and `DROP`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A network address block of the request source.
	// A network address block of the request source.
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the security policy rule. Maximum length is 30.
	// Name of the security policy rule. Maximum length is 30.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the security policy.
	// ID of the security policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Target port. Default value is ALL. Valid examples: 80, 80,443 and 3306-20000.
	// Target port. Default value is `ALL`. Valid examples: `80`, `80,443` and `3306-20000`.
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the security policy rule. Default value is ALL. Valid value: TCP, UDP and ALL.
	// Protocol of the security policy rule. Default value is `ALL`. Valid value: `TCP`, `UDP` and `ALL`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type SecurityRuleParameters struct {

	// Policy of the rule. Valid value: ACCEPT and DROP.
	// Policy of the rule. Valid value: `ACCEPT` and `DROP`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// A network address block of the request source.
	// A network address block of the request source.
	// +kubebuilder:validation:Optional
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// Name of the security policy rule. Maximum length is 30.
	// Name of the security policy rule. Maximum length is 30.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the security policy.
	// ID of the security policy.
	// +crossplane:generate:reference:type=SecurityPolicy
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Reference to a SecurityPolicy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDRef *v1.Reference `json:"policyIdRef,omitempty" tf:"-"`

	// Selector for a SecurityPolicy to populate policyId.
	// +kubebuilder:validation:Optional
	PolicyIDSelector *v1.Selector `json:"policyIdSelector,omitempty" tf:"-"`

	// Target port. Default value is ALL. Valid examples: 80, 80,443 and 3306-20000.
	// Target port. Default value is `ALL`. Valid examples: `80`, `80,443` and `3306-20000`.
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Protocol of the security policy rule. Default value is ALL. Valid value: TCP, UDP and ALL.
	// Protocol of the security policy rule. Default value is `ALL`. Valid value: `TCP`, `UDP` and `ALL`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

// SecurityRuleSpec defines the desired state of SecurityRule
type SecurityRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityRuleInitParameters `json:"initProvider,omitempty"`
}

// SecurityRuleStatus defines the observed state of SecurityRule.
type SecurityRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityRule is the Schema for the SecurityRules API. Provides a resource to create a security policy rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type SecurityRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidrIp) || (has(self.initProvider) && has(self.initProvider.cidrIp))",message="spec.forProvider.cidrIp is a required parameter"
	Spec   SecurityRuleSpec   `json:"spec"`
	Status SecurityRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityRuleList contains a list of SecurityRules
type SecurityRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityRule_Kind             = "SecurityRule"
	SecurityRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityRule_Kind}.String()
	SecurityRule_KindAPIVersion   = SecurityRule_Kind + "." + CRDGroupVersion.String()
	SecurityRule_GroupVersionKind = CRDGroupVersion.WithKind(SecurityRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityRule{}, &SecurityRuleList{})
}
