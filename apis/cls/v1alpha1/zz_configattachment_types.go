// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigAttachmentInitParameters struct {
}

type ConfigAttachmentObservation struct {

	// Collection configuration id.
	// Collection configuration id.
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Machine group id.
	// Machine group id.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigAttachmentParameters struct {

	// Collection configuration id.
	// Collection configuration id.
	// +crossplane:generate:reference:type=Config
	// +kubebuilder:validation:Optional
	ConfigID *string `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Reference to a Config to populate configId.
	// +kubebuilder:validation:Optional
	ConfigIDRef *v1.Reference `json:"configIdRef,omitempty" tf:"-"`

	// Selector for a Config to populate configId.
	// +kubebuilder:validation:Optional
	ConfigIDSelector *v1.Selector `json:"configIdSelector,omitempty" tf:"-"`

	// Machine group id.
	// Machine group id.
	// +crossplane:generate:reference:type=MachineGroup
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a MachineGroup to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.Reference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a MachineGroup to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.Selector `json:"groupIdSelector,omitempty" tf:"-"`
}

// ConfigAttachmentSpec defines the desired state of ConfigAttachment
type ConfigAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigAttachmentInitParameters `json:"initProvider,omitempty"`
}

// ConfigAttachmentStatus defines the observed state of ConfigAttachment.
type ConfigAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAttachment is the Schema for the ConfigAttachments API. Provides a resource to create a cls config attachment
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ConfigAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigAttachmentSpec   `json:"spec"`
	Status            ConfigAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigAttachmentList contains a list of ConfigAttachments
type ConfigAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigAttachment `json:"items"`
}

// Repository type metadata.
var (
	ConfigAttachment_Kind             = "ConfigAttachment"
	ConfigAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigAttachment_Kind}.String()
	ConfigAttachment_KindAPIVersion   = ConfigAttachment_Kind + "." + CRDGroupVersion.String()
	ConfigAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ConfigAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigAttachment{}, &ConfigAttachmentList{})
}
