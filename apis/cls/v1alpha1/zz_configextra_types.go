// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigExtraExcludePathsInitParameters struct {

	// Type. Valid values: container_stdout; container_file; host_file.
	// Type. Valid values: File, Path.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specific content corresponding to Type.
	// Specific content corresponding to Type.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigExtraExcludePathsObservation struct {

	// Type. Valid values: container_stdout; container_file; host_file.
	// Type. Valid values: File, Path.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specific content corresponding to Type.
	// Specific content corresponding to Type.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigExtraExcludePathsParameters struct {

	// Type. Valid values: container_stdout; container_file; host_file.
	// Type. Valid values: File, Path.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Specific content corresponding to Type.
	// Specific content corresponding to Type.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigExtraExtractRuleInitParameters struct {

	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	Backtracking *float64 `json:"backtracking,omitempty" tf:"backtracking,omitempty"`

	// First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
	// First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
	BeginRegex *string `json:"beginRegex,omitempty" tf:"begin_regex,omitempty"`

	// Delimiter for delimited log, which is valid only if log_type is delimiter_log.
	// Delimiter for delimited log, which is valid only if log_type is delimiter_log.
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	// Log keys to be filtered and the corresponding regex.
	// Log keys to be filtered and the corresponding regex.
	FilterKeyRegex []ExtractRuleFilterKeyRegexInitParameters `json:"filterKeyRegex,omitempty" tf:"filter_key_regex,omitempty"`

	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Full log matching rule, which is valid only if log_type is fullregex_log.
	// Full log matching rule, which is valid only if log_type is fullregex_log.
	LogRegex *string `json:"logRegex,omitempty" tf:"log_regex,omitempty"`

	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	TimeFormat *string `json:"timeFormat,omitempty" tf:"time_format,omitempty"`

	// Time field key name. time_key and time_format must appear in pair.
	// Time field key name. time_key and time_format must appear in pair.
	TimeKey *string `json:"timeKey,omitempty" tf:"time_key,omitempty"`

	// Unmatched log key.
	// Unmatched log key.
	UnMatchLogKey *string `json:"unMatchLogKey,omitempty" tf:"un_match_log_key,omitempty"`

	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	UnMatchUpLoadSwitch *bool `json:"unMatchUpLoadSwitch,omitempty" tf:"un_match_up_load_switch,omitempty"`
}

type ConfigExtraExtractRuleObservation struct {

	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	Backtracking *float64 `json:"backtracking,omitempty" tf:"backtracking,omitempty"`

	// First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
	// First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
	BeginRegex *string `json:"beginRegex,omitempty" tf:"begin_regex,omitempty"`

	// Delimiter for delimited log, which is valid only if log_type is delimiter_log.
	// Delimiter for delimited log, which is valid only if log_type is delimiter_log.
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	// Log keys to be filtered and the corresponding regex.
	// Log keys to be filtered and the corresponding regex.
	FilterKeyRegex []ExtractRuleFilterKeyRegexObservation `json:"filterKeyRegex,omitempty" tf:"filter_key_regex,omitempty"`

	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Full log matching rule, which is valid only if log_type is fullregex_log.
	// Full log matching rule, which is valid only if log_type is fullregex_log.
	LogRegex *string `json:"logRegex,omitempty" tf:"log_regex,omitempty"`

	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	TimeFormat *string `json:"timeFormat,omitempty" tf:"time_format,omitempty"`

	// Time field key name. time_key and time_format must appear in pair.
	// Time field key name. time_key and time_format must appear in pair.
	TimeKey *string `json:"timeKey,omitempty" tf:"time_key,omitempty"`

	// Unmatched log key.
	// Unmatched log key.
	UnMatchLogKey *string `json:"unMatchLogKey,omitempty" tf:"un_match_log_key,omitempty"`

	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	UnMatchUpLoadSwitch *bool `json:"unMatchUpLoadSwitch,omitempty" tf:"un_match_up_load_switch,omitempty"`
}

type ConfigExtraExtractRuleParameters struct {

	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	// Size of the data to be rewound in incremental collection mode. Default value: -1 (full collection).
	// +kubebuilder:validation:Optional
	Backtracking *float64 `json:"backtracking,omitempty" tf:"backtracking,omitempty"`

	// First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
	// First-Line matching rule, which is valid only if log_type is multiline_log or fullregex_log.
	// +kubebuilder:validation:Optional
	BeginRegex *string `json:"beginRegex,omitempty" tf:"begin_regex,omitempty"`

	// Delimiter for delimited log, which is valid only if log_type is delimiter_log.
	// Delimiter for delimited log, which is valid only if log_type is delimiter_log.
	// +kubebuilder:validation:Optional
	Delimiter *string `json:"delimiter,omitempty" tf:"delimiter,omitempty"`

	// Log keys to be filtered and the corresponding regex.
	// Log keys to be filtered and the corresponding regex.
	// +kubebuilder:validation:Optional
	FilterKeyRegex []ExtractRuleFilterKeyRegexParameters `json:"filterKeyRegex,omitempty" tf:"filter_key_regex,omitempty"`

	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
	// Key name of each extracted field. An empty key indicates to discard the field. This parameter is valid only if log_type is delimiter_log. json_log logs use the key of JSON itself.
	// +kubebuilder:validation:Optional
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// Full log matching rule, which is valid only if log_type is fullregex_log.
	// Full log matching rule, which is valid only if log_type is fullregex_log.
	// +kubebuilder:validation:Optional
	LogRegex *string `json:"logRegex,omitempty" tf:"log_regex,omitempty"`

	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	// Time field format. For more information, please see the output parameters of the time format description of the strftime function in C language.
	// +kubebuilder:validation:Optional
	TimeFormat *string `json:"timeFormat,omitempty" tf:"time_format,omitempty"`

	// Time field key name. time_key and time_format must appear in pair.
	// Time field key name. time_key and time_format must appear in pair.
	// +kubebuilder:validation:Optional
	TimeKey *string `json:"timeKey,omitempty" tf:"time_key,omitempty"`

	// Unmatched log key.
	// Unmatched log key.
	// +kubebuilder:validation:Optional
	UnMatchLogKey *string `json:"unMatchLogKey,omitempty" tf:"un_match_log_key,omitempty"`

	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	// Whether to upload the logs that failed to be parsed. Valid values: true: yes; false: no.
	// +kubebuilder:validation:Optional
	UnMatchUpLoadSwitch *bool `json:"unMatchUpLoadSwitch,omitempty" tf:"un_match_up_load_switch,omitempty"`
}

type ConfigExtraInitParameters struct {

	// Collection configuration flag.
	// Collection configuration flag.
	ConfigFlag *string `json:"configFlag,omitempty" tf:"config_flag,omitempty"`

	// Container file path info.
	// Container file path info.
	ContainerFile []ContainerFileInitParameters `json:"containerFile,omitempty" tf:"container_file,omitempty"`

	// Container stdout info.
	// Container stdout info.
	ContainerStdout []ContainerStdoutInitParameters `json:"containerStdout,omitempty" tf:"container_stdout,omitempty"`

	// Collection path blocklist.
	// Collection path blocklist.
	ExcludePaths []ConfigExtraExcludePathsInitParameters `json:"excludePaths,omitempty" tf:"exclude_paths,omitempty"`

	// Extraction rule. If ExtractRule is set, LogType must be set.
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule []ConfigExtraExtractRuleInitParameters `json:"extractRule,omitempty" tf:"extract_rule,omitempty"`

	// Binding group id.
	// Binding group id.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Binding group ids.
	// Binding group ids.
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// Node file config info.
	// Node file config info.
	HostFile []HostFileInitParameters `json:"hostFile,omitempty" tf:"host_file,omitempty"`

	// Log format.
	// Log format.
	LogFormat *string `json:"logFormat,omitempty" tf:"log_format,omitempty"`

	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// Logset Name.
	// Logset Name.
	LogsetName *string `json:"logsetName,omitempty" tf:"logset_name,omitempty"`

	// Collection configuration name.
	// Collection configuration name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Topic Name.
	// Topic Name.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Type. Valid values: container_stdout; container_file; host_file.
	// Type. Valid values: container_stdout; container_file; host_file.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Custom collection rule, which is a serialized JSON string.
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule *string `json:"userDefineRule,omitempty" tf:"user_define_rule,omitempty"`
}

type ConfigExtraObservation struct {

	// Collection configuration flag.
	// Collection configuration flag.
	ConfigFlag *string `json:"configFlag,omitempty" tf:"config_flag,omitempty"`

	// Container file path info.
	// Container file path info.
	ContainerFile []ContainerFileObservation `json:"containerFile,omitempty" tf:"container_file,omitempty"`

	// Container stdout info.
	// Container stdout info.
	ContainerStdout []ContainerStdoutObservation `json:"containerStdout,omitempty" tf:"container_stdout,omitempty"`

	// Collection path blocklist.
	// Collection path blocklist.
	ExcludePaths []ConfigExtraExcludePathsObservation `json:"excludePaths,omitempty" tf:"exclude_paths,omitempty"`

	// Extraction rule. If ExtractRule is set, LogType must be set.
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule []ConfigExtraExtractRuleObservation `json:"extractRule,omitempty" tf:"extract_rule,omitempty"`

	// Binding group id.
	// Binding group id.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Binding group ids.
	// Binding group ids.
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// Node file config info.
	// Node file config info.
	HostFile []HostFileObservation `json:"hostFile,omitempty" tf:"host_file,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Log format.
	// Log format.
	LogFormat *string `json:"logFormat,omitempty" tf:"log_format,omitempty"`

	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// Logset Id.
	// Logset Id.
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// Logset Name.
	// Logset Name.
	LogsetName *string `json:"logsetName,omitempty" tf:"logset_name,omitempty"`

	// Collection configuration name.
	// Collection configuration name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Log topic ID (TopicId) of collection configuration.
	// Log topic ID (TopicId) of collection configuration.
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`

	// Topic Name.
	// Topic Name.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Type. Valid values: container_stdout; container_file; host_file.
	// Type. Valid values: container_stdout; container_file; host_file.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Custom collection rule, which is a serialized JSON string.
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule *string `json:"userDefineRule,omitempty" tf:"user_define_rule,omitempty"`
}

type ConfigExtraParameters struct {

	// Collection configuration flag.
	// Collection configuration flag.
	// +kubebuilder:validation:Optional
	ConfigFlag *string `json:"configFlag,omitempty" tf:"config_flag,omitempty"`

	// Container file path info.
	// Container file path info.
	// +kubebuilder:validation:Optional
	ContainerFile []ContainerFileParameters `json:"containerFile,omitempty" tf:"container_file,omitempty"`

	// Container stdout info.
	// Container stdout info.
	// +kubebuilder:validation:Optional
	ContainerStdout []ContainerStdoutParameters `json:"containerStdout,omitempty" tf:"container_stdout,omitempty"`

	// Collection path blocklist.
	// Collection path blocklist.
	// +kubebuilder:validation:Optional
	ExcludePaths []ConfigExtraExcludePathsParameters `json:"excludePaths,omitempty" tf:"exclude_paths,omitempty"`

	// Extraction rule. If ExtractRule is set, LogType must be set.
	// Extraction rule. If ExtractRule is set, LogType must be set.
	// +kubebuilder:validation:Optional
	ExtractRule []ConfigExtraExtractRuleParameters `json:"extractRule,omitempty" tf:"extract_rule,omitempty"`

	// Binding group id.
	// Binding group id.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Binding group ids.
	// Binding group ids.
	// +kubebuilder:validation:Optional
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// Node file config info.
	// Node file config info.
	// +kubebuilder:validation:Optional
	HostFile []HostFileParameters `json:"hostFile,omitempty" tf:"host_file,omitempty"`

	// Log format.
	// Log format.
	// +kubebuilder:validation:Optional
	LogFormat *string `json:"logFormat,omitempty" tf:"log_format,omitempty"`

	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	// +kubebuilder:validation:Optional
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// Logset Id.
	// Logset Id.
	// +crossplane:generate:reference:type=Logset
	// +kubebuilder:validation:Optional
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// Reference to a Logset to populate logsetId.
	// +kubebuilder:validation:Optional
	LogsetIDRef *v1.Reference `json:"logsetIdRef,omitempty" tf:"-"`

	// Selector for a Logset to populate logsetId.
	// +kubebuilder:validation:Optional
	LogsetIDSelector *v1.Selector `json:"logsetIdSelector,omitempty" tf:"-"`

	// Logset Name.
	// Logset Name.
	// +kubebuilder:validation:Optional
	LogsetName *string `json:"logsetName,omitempty" tf:"logset_name,omitempty"`

	// Collection configuration name.
	// Collection configuration name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Log topic ID (TopicId) of collection configuration.
	// Log topic ID (TopicId) of collection configuration.
	// +crossplane:generate:reference:type=Topic
	// +kubebuilder:validation:Optional
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`

	// Reference to a Topic to populate topicId.
	// +kubebuilder:validation:Optional
	TopicIDRef *v1.Reference `json:"topicIdRef,omitempty" tf:"-"`

	// Selector for a Topic to populate topicId.
	// +kubebuilder:validation:Optional
	TopicIDSelector *v1.Selector `json:"topicIdSelector,omitempty" tf:"-"`

	// Topic Name.
	// Topic Name.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// Type. Valid values: container_stdout; container_file; host_file.
	// Type. Valid values: container_stdout; container_file; host_file.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Custom collection rule, which is a serialized JSON string.
	// Custom collection rule, which is a serialized JSON string.
	// +kubebuilder:validation:Optional
	UserDefineRule *string `json:"userDefineRule,omitempty" tf:"user_define_rule,omitempty"`
}

type ContainerFileInitParameters struct {

	// Container name.
	// Container name.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// Pod label to be excluded.
	// Pod label to be excluded.
	ExcludeLabels []*string `json:"excludeLabels,omitempty" tf:"exclude_labels,omitempty"`

	// Namespaces to be excluded, separated by separators, such as A, B.
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace *string `json:"excludeNamespace,omitempty" tf:"exclude_namespace,omitempty"`

	// log name.
	// log name.
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// Pod label info.
	// Pod label info.
	IncludeLabels []*string `json:"includeLabels,omitempty" tf:"include_labels,omitempty"`

	// Log Path.
	// Log Path.
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Workload info.
	// Workload info.
	Workload []WorkloadInitParameters `json:"workload,omitempty" tf:"workload,omitempty"`
}

type ContainerFileObservation struct {

	// Container name.
	// Container name.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// Pod label to be excluded.
	// Pod label to be excluded.
	ExcludeLabels []*string `json:"excludeLabels,omitempty" tf:"exclude_labels,omitempty"`

	// Namespaces to be excluded, separated by separators, such as A, B.
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace *string `json:"excludeNamespace,omitempty" tf:"exclude_namespace,omitempty"`

	// log name.
	// log name.
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// Pod label info.
	// Pod label info.
	IncludeLabels []*string `json:"includeLabels,omitempty" tf:"include_labels,omitempty"`

	// Log Path.
	// Log Path.
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Workload info.
	// Workload info.
	Workload []WorkloadObservation `json:"workload,omitempty" tf:"workload,omitempty"`
}

type ContainerFileParameters struct {

	// Container name.
	// Container name.
	// +kubebuilder:validation:Optional
	Container *string `json:"container" tf:"container,omitempty"`

	// Pod label to be excluded.
	// Pod label to be excluded.
	// +kubebuilder:validation:Optional
	ExcludeLabels []*string `json:"excludeLabels,omitempty" tf:"exclude_labels,omitempty"`

	// Namespaces to be excluded, separated by separators, such as A, B.
	// Namespaces to be excluded, separated by separators, such as A, B.
	// +kubebuilder:validation:Optional
	ExcludeNamespace *string `json:"excludeNamespace,omitempty" tf:"exclude_namespace,omitempty"`

	// log name.
	// log name.
	// +kubebuilder:validation:Optional
	FilePattern *string `json:"filePattern" tf:"file_pattern,omitempty"`

	// Pod label info.
	// Pod label info.
	// +kubebuilder:validation:Optional
	IncludeLabels []*string `json:"includeLabels,omitempty" tf:"include_labels,omitempty"`

	// Log Path.
	// Log Path.
	// +kubebuilder:validation:Optional
	LogPath *string `json:"logPath" tf:"log_path,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace" tf:"namespace,omitempty"`

	// Workload info.
	// Workload info.
	// +kubebuilder:validation:Optional
	Workload []WorkloadParameters `json:"workload,omitempty" tf:"workload,omitempty"`
}

type ContainerStdoutInitParameters struct {

	// Is all containers.
	// Is all containers.
	AllContainers *bool `json:"allContainers,omitempty" tf:"all_containers,omitempty"`

	// Pod label to be excluded.
	// Pod label to be excluded.
	ExcludeLabels []*string `json:"excludeLabels,omitempty" tf:"exclude_labels,omitempty"`

	// Namespaces to be excluded, separated by separators, such as A, B.
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace *string `json:"excludeNamespace,omitempty" tf:"exclude_namespace,omitempty"`

	// Pod label info.
	// Pod label info.
	IncludeLabels []*string `json:"includeLabels,omitempty" tf:"include_labels,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Workload info.
	// Workload info.
	Workloads []WorkloadsInitParameters `json:"workloads,omitempty" tf:"workloads,omitempty"`
}

type ContainerStdoutObservation struct {

	// Is all containers.
	// Is all containers.
	AllContainers *bool `json:"allContainers,omitempty" tf:"all_containers,omitempty"`

	// Pod label to be excluded.
	// Pod label to be excluded.
	ExcludeLabels []*string `json:"excludeLabels,omitempty" tf:"exclude_labels,omitempty"`

	// Namespaces to be excluded, separated by separators, such as A, B.
	// Namespaces to be excluded, separated by separators, such as A, B.
	ExcludeNamespace *string `json:"excludeNamespace,omitempty" tf:"exclude_namespace,omitempty"`

	// Pod label info.
	// Pod label info.
	IncludeLabels []*string `json:"includeLabels,omitempty" tf:"include_labels,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Workload info.
	// Workload info.
	Workloads []WorkloadsObservation `json:"workloads,omitempty" tf:"workloads,omitempty"`
}

type ContainerStdoutParameters struct {

	// Is all containers.
	// Is all containers.
	// +kubebuilder:validation:Optional
	AllContainers *bool `json:"allContainers" tf:"all_containers,omitempty"`

	// Pod label to be excluded.
	// Pod label to be excluded.
	// +kubebuilder:validation:Optional
	ExcludeLabels []*string `json:"excludeLabels,omitempty" tf:"exclude_labels,omitempty"`

	// Namespaces to be excluded, separated by separators, such as A, B.
	// Namespaces to be excluded, separated by separators, such as A, B.
	// +kubebuilder:validation:Optional
	ExcludeNamespace *string `json:"excludeNamespace,omitempty" tf:"exclude_namespace,omitempty"`

	// Pod label info.
	// Pod label info.
	// +kubebuilder:validation:Optional
	IncludeLabels []*string `json:"includeLabels,omitempty" tf:"include_labels,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Workload info.
	// Workload info.
	// +kubebuilder:validation:Optional
	Workloads []WorkloadsParameters `json:"workloads,omitempty" tf:"workloads,omitempty"`
}

type ExtractRuleFilterKeyRegexInitParameters struct {

	// Log key to be filtered.
	// Log key to be filtered.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Filter rule regex corresponding to key.
	// Filter rule regex corresponding to key.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ExtractRuleFilterKeyRegexObservation struct {

	// Log key to be filtered.
	// Log key to be filtered.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Filter rule regex corresponding to key.
	// Filter rule regex corresponding to key.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ExtractRuleFilterKeyRegexParameters struct {

	// Log key to be filtered.
	// Log key to be filtered.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Filter rule regex corresponding to key.
	// Filter rule regex corresponding to key.
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type HostFileInitParameters struct {

	// Metadata info.
	// Metadata info.
	CustomLabels []*string `json:"customLabels,omitempty" tf:"custom_labels,omitempty"`

	// log name.
	// Log file name.
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// Log Path.
	// Log file dir.
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`
}

type HostFileObservation struct {

	// Metadata info.
	// Metadata info.
	CustomLabels []*string `json:"customLabels,omitempty" tf:"custom_labels,omitempty"`

	// log name.
	// Log file name.
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// Log Path.
	// Log file dir.
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`
}

type HostFileParameters struct {

	// Metadata info.
	// Metadata info.
	// +kubebuilder:validation:Optional
	CustomLabels []*string `json:"customLabels,omitempty" tf:"custom_labels,omitempty"`

	// log name.
	// Log file name.
	// +kubebuilder:validation:Optional
	FilePattern *string `json:"filePattern" tf:"file_pattern,omitempty"`

	// Log Path.
	// Log file dir.
	// +kubebuilder:validation:Optional
	LogPath *string `json:"logPath" tf:"log_path,omitempty"`
}

type WorkloadInitParameters struct {

	// Container name.
	// container name.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// workload type.
	// workload type.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Collection configuration name.
	// workload name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// namespace.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type WorkloadObservation struct {

	// Container name.
	// container name.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// workload type.
	// workload type.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Collection configuration name.
	// workload name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// namespace.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type WorkloadParameters struct {

	// Container name.
	// container name.
	// +kubebuilder:validation:Optional
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// workload type.
	// workload type.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// Collection configuration name.
	// workload name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// namespace.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type WorkloadsInitParameters struct {

	// Container name.
	// container name.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// workload type.
	// workload type.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Collection configuration name.
	// workload name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// namespace.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type WorkloadsObservation struct {

	// Container name.
	// container name.
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// workload type.
	// workload type.
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// Collection configuration name.
	// workload name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// namespace.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

type WorkloadsParameters struct {

	// Container name.
	// container name.
	// +kubebuilder:validation:Optional
	Container *string `json:"container,omitempty" tf:"container,omitempty"`

	// workload type.
	// workload type.
	// +kubebuilder:validation:Optional
	Kind *string `json:"kind" tf:"kind,omitempty"`

	// Collection configuration name.
	// workload name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Namespace. There can be multiple namespaces, separated by separators, such as A, B.
	// namespace.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`
}

// ConfigExtraSpec defines the desired state of ConfigExtra
type ConfigExtraSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigExtraParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigExtraInitParameters `json:"initProvider,omitempty"`
}

// ConfigExtraStatus defines the observed state of ConfigExtra.
type ConfigExtraStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigExtraObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigExtra is the Schema for the ConfigExtras API. Provides a resource to create a cls config extra
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ConfigExtra struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configFlag) || (has(self.initProvider) && has(self.initProvider.configFlag))",message="spec.forProvider.configFlag is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logType) || (has(self.initProvider) && has(self.initProvider.logType))",message="spec.forProvider.logType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logsetName) || (has(self.initProvider) && has(self.initProvider.logsetName))",message="spec.forProvider.logsetName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.topicName) || (has(self.initProvider) && has(self.initProvider.topicName))",message="spec.forProvider.topicName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   ConfigExtraSpec   `json:"spec"`
	Status ConfigExtraStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigExtraList contains a list of ConfigExtras
type ConfigExtraList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigExtra `json:"items"`
}

// Repository type metadata.
var (
	ConfigExtra_Kind             = "ConfigExtra"
	ConfigExtra_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigExtra_Kind}.String()
	ConfigExtra_KindAPIVersion   = ConfigExtra_Kind + "." + CRDGroupVersion.String()
	ConfigExtra_GroupVersionKind = CRDGroupVersion.WithKind(ConfigExtra_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigExtra{}, &ConfigExtraList{})
}
