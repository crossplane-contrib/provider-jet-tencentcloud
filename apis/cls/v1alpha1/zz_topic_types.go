// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TopicInitParameters struct {

	// Whether to enable automatic split. Default value: true.
	// Whether to enable automatic split. Default value: true.
	AutoSplit *bool `json:"autoSplit,omitempty" tf:"auto_split,omitempty"`

	// Log Topic Description.
	// Log Topic Description.
	Describes *string `json:"describes,omitempty" tf:"describes,omitempty"`

	// 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
	// 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
	HotPeriod *float64 `json:"hotPeriod,omitempty" tf:"hot_period,omitempty"`

	// Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
	// Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
	MaxSplitPartitions *float64 `json:"maxSplitPartitions,omitempty" tf:"max_split_partitions,omitempty"`

	// Number of log topic partitions. Default value: 1. Maximum value: 10.
	// Number of log topic partitions. Default value: 1. Maximum value: 10.
	PartitionCount *float64 `json:"partitionCount,omitempty" tf:"partition_count,omitempty"`

	// Lifecycle in days. Value range: 1~366. Default value: 30.
	// Lifecycle in days. Value range: 1~366. Default value: 30.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
	// Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Log topic name.
	// Log topic name.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicObservation struct {

	// Whether to enable automatic split. Default value: true.
	// Whether to enable automatic split. Default value: true.
	AutoSplit *bool `json:"autoSplit,omitempty" tf:"auto_split,omitempty"`

	// Log Topic Description.
	// Log Topic Description.
	Describes *string `json:"describes,omitempty" tf:"describes,omitempty"`

	// 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
	// 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
	HotPeriod *float64 `json:"hotPeriod,omitempty" tf:"hot_period,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Logset ID.
	// Logset ID.
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
	// Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
	MaxSplitPartitions *float64 `json:"maxSplitPartitions,omitempty" tf:"max_split_partitions,omitempty"`

	// Number of log topic partitions. Default value: 1. Maximum value: 10.
	// Number of log topic partitions. Default value: 1. Maximum value: 10.
	PartitionCount *float64 `json:"partitionCount,omitempty" tf:"partition_count,omitempty"`

	// Lifecycle in days. Value range: 1~366. Default value: 30.
	// Lifecycle in days. Value range: 1~366. Default value: 30.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
	// Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Log topic name.
	// Log topic name.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type TopicParameters struct {

	// Whether to enable automatic split. Default value: true.
	// Whether to enable automatic split. Default value: true.
	// +kubebuilder:validation:Optional
	AutoSplit *bool `json:"autoSplit,omitempty" tf:"auto_split,omitempty"`

	// Log Topic Description.
	// Log Topic Description.
	// +kubebuilder:validation:Optional
	Describes *string `json:"describes,omitempty" tf:"describes,omitempty"`

	// 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
	// 0: Turn off log sinking. Non 0: The number of days of standard storage after enabling log settling. HotPeriod needs to be greater than or equal to 7 and less than Period. Only effective when StorageType is hot.
	// +kubebuilder:validation:Optional
	HotPeriod *float64 `json:"hotPeriod,omitempty" tf:"hot_period,omitempty"`

	// Logset ID.
	// Logset ID.
	// +crossplane:generate:reference:type=Logset
	// +kubebuilder:validation:Optional
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// Reference to a Logset to populate logsetId.
	// +kubebuilder:validation:Optional
	LogsetIDRef *v1.Reference `json:"logsetIdRef,omitempty" tf:"-"`

	// Selector for a Logset to populate logsetId.
	// +kubebuilder:validation:Optional
	LogsetIDSelector *v1.Selector `json:"logsetIdSelector,omitempty" tf:"-"`

	// Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
	// Maximum number of partitions to split into for this topic if automatic split is enabled. Default value: 50.
	// +kubebuilder:validation:Optional
	MaxSplitPartitions *float64 `json:"maxSplitPartitions,omitempty" tf:"max_split_partitions,omitempty"`

	// Number of log topic partitions. Default value: 1. Maximum value: 10.
	// Number of log topic partitions. Default value: 1. Maximum value: 10.
	// +kubebuilder:validation:Optional
	PartitionCount *float64 `json:"partitionCount,omitempty" tf:"partition_count,omitempty"`

	// Lifecycle in days. Value range: 1~366. Default value: 30.
	// Lifecycle in days. Value range: 1~366. Default value: 30.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
	// Log topic storage class. Valid values: hot: real-time storage; cold: offline storage. Default value: hot. If cold is passed in, please contact the customer service to add the log topic to the allowlist first.
	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	// Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Log topic name.
	// Log topic name.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

// TopicSpec defines the desired state of Topic
type TopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TopicParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TopicInitParameters `json:"initProvider,omitempty"`
}

// TopicStatus defines the observed state of Topic.
type TopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Topic is the Schema for the Topics API. Provides a resource to create a cls topic.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Topic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.topicName) || (has(self.initProvider) && has(self.initProvider.topicName))",message="spec.forProvider.topicName is a required parameter"
	Spec   TopicSpec   `json:"spec"`
	Status TopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicList contains a list of Topics
type TopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Topic `json:"items"`
}

// Repository type metadata.
var (
	Topic_Kind             = "Topic"
	Topic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Topic_Kind}.String()
	Topic_KindAPIVersion   = Topic_Kind + "." + CRDGroupVersion.String()
	Topic_GroupVersionKind = CRDGroupVersion.WithKind(Topic_Kind)
)

func init() {
	SchemeBuilder.Register(&Topic{}, &TopicList{})
}
