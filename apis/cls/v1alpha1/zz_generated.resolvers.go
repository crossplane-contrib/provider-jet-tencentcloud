/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ConfigAttachment.
func (mg *ConfigAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ConfigID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ConfigIDRef,
		Selector:     mg.Spec.ForProvider.ConfigIDSelector,
		To: reference.To{
			List:    &ConfigList{},
			Managed: &Config{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ConfigID")
	}
	mg.Spec.ForProvider.ConfigID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ConfigIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GroupIDRef,
		Selector:     mg.Spec.ForProvider.GroupIDSelector,
		To: reference.To{
			List:    &MachineGroupList{},
			Managed: &MachineGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupID")
	}
	mg.Spec.ForProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ConfigExtra.
func (mg *ConfigExtra) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogsetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LogsetIDRef,
		Selector:     mg.Spec.ForProvider.LogsetIDSelector,
		To: reference.To{
			List:    &LogsetList{},
			Managed: &Logset{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogsetID")
	}
	mg.Spec.ForProvider.LogsetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogsetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TopicIDRef,
		Selector:     mg.Spec.ForProvider.TopicIDSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicID")
	}
	mg.Spec.ForProvider.TopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CosShipper.
func (mg *CosShipper) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TopicIDRef,
		Selector:     mg.Spec.ForProvider.TopicIDSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicID")
	}
	mg.Spec.ForProvider.TopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Index.
func (mg *Index) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TopicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.TopicIDRef,
		Selector:     mg.Spec.ForProvider.TopicIDSelector,
		To: reference.To{
			List:    &TopicList{},
			Managed: &Topic{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TopicID")
	}
	mg.Spec.ForProvider.TopicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TopicIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Topic.
func (mg *Topic) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogsetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LogsetIDRef,
		Selector:     mg.Spec.ForProvider.LogsetIDSelector,
		To: reference.To{
			List:    &LogsetList{},
			Managed: &Logset{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogsetID")
	}
	mg.Spec.ForProvider.LogsetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogsetIDRef = rsp.ResolvedReference

	return nil
}
