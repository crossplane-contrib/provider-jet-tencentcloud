// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SignInitParameters struct {

	// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
	// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
	CommissionImage *string `json:"commissionImage,omitempty" tf:"commission_image,omitempty"`

	// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
	// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
	DocumentType *float64 `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
	// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
	International *float64 `json:"international,omitempty" tf:"international,omitempty"`

	// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
	// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
	ProofImage *string `json:"proofImage,omitempty" tf:"proof_image,omitempty"`

	// Signature application remarks.
	// Signature application remarks.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Sms sign name, unique.
	// Sms sign name, unique.
	SignName *string `json:"signName,omitempty" tf:"sign_name,omitempty"`

	// Signature purpose: 0: for personal use; 1: for others.
	// Signature purpose: 0: for personal use; 1: for others.
	SignPurpose *float64 `json:"signPurpose,omitempty" tf:"sign_purpose,omitempty"`

	// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
	// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
	SignType *float64 `json:"signType,omitempty" tf:"sign_type,omitempty"`
}

type SignObservation struct {

	// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
	// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
	CommissionImage *string `json:"commissionImage,omitempty" tf:"commission_image,omitempty"`

	// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
	// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
	DocumentType *float64 `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
	// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
	International *float64 `json:"international,omitempty" tf:"international,omitempty"`

	// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
	// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
	ProofImage *string `json:"proofImage,omitempty" tf:"proof_image,omitempty"`

	// Signature application remarks.
	// Signature application remarks.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Sms sign name, unique.
	// Sms sign name, unique.
	SignName *string `json:"signName,omitempty" tf:"sign_name,omitempty"`

	// Signature purpose: 0: for personal use; 1: for others.
	// Signature purpose: 0: for personal use; 1: for others.
	SignPurpose *float64 `json:"signPurpose,omitempty" tf:"sign_purpose,omitempty"`

	// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
	// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
	SignType *float64 `json:"signType,omitempty" tf:"sign_type,omitempty"`
}

type SignParameters struct {

	// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
	// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
	// +kubebuilder:validation:Optional
	CommissionImage *string `json:"commissionImage,omitempty" tf:"commission_image,omitempty"`

	// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
	// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
	// +kubebuilder:validation:Optional
	DocumentType *float64 `json:"documentType,omitempty" tf:"document_type,omitempty"`

	// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
	// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
	// +kubebuilder:validation:Optional
	International *float64 `json:"international,omitempty" tf:"international,omitempty"`

	// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
	// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
	// +kubebuilder:validation:Optional
	ProofImage *string `json:"proofImage,omitempty" tf:"proof_image,omitempty"`

	// Signature application remarks.
	// Signature application remarks.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Sms sign name, unique.
	// Sms sign name, unique.
	// +kubebuilder:validation:Optional
	SignName *string `json:"signName,omitempty" tf:"sign_name,omitempty"`

	// Signature purpose: 0: for personal use; 1: for others.
	// Signature purpose: 0: for personal use; 1: for others.
	// +kubebuilder:validation:Optional
	SignPurpose *float64 `json:"signPurpose,omitempty" tf:"sign_purpose,omitempty"`

	// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
	// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
	// +kubebuilder:validation:Optional
	SignType *float64 `json:"signType,omitempty" tf:"sign_type,omitempty"`
}

// SignSpec defines the desired state of Sign
type SignSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SignParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SignInitParameters `json:"initProvider,omitempty"`
}

// SignStatus defines the observed state of Sign.
type SignStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SignObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Sign is the Schema for the Signs API. Provides a resource to create a sms sign
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Sign struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.documentType) || (has(self.initProvider) && has(self.initProvider.documentType))",message="spec.forProvider.documentType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.international) || (has(self.initProvider) && has(self.initProvider.international))",message="spec.forProvider.international is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.proofImage) || (has(self.initProvider) && has(self.initProvider.proofImage))",message="spec.forProvider.proofImage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signName) || (has(self.initProvider) && has(self.initProvider.signName))",message="spec.forProvider.signName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signPurpose) || (has(self.initProvider) && has(self.initProvider.signPurpose))",message="spec.forProvider.signPurpose is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signType) || (has(self.initProvider) && has(self.initProvider.signType))",message="spec.forProvider.signType is a required parameter"
	Spec   SignSpec   `json:"spec"`
	Status SignStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SignList contains a list of Signs
type SignList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Sign `json:"items"`
}

// Repository type metadata.
var (
	Sign_Kind             = "Sign"
	Sign_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Sign_Kind}.String()
	Sign_KindAPIVersion   = Sign_Kind + "." + CRDGroupVersion.String()
	Sign_GroupVersionKind = CRDGroupVersion.WithKind(Sign_Kind)
)

func init() {
	SchemeBuilder.Register(&Sign{}, &SignList{})
}
