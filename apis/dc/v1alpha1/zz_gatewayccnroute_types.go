// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayCcnRouteInitParameters struct {

	// A network address segment of IDC.
	// A network address segment of IDC.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// ID of the DCG.
	// ID of the DCG.
	DcgID *string `json:"dcgId,omitempty" tf:"dcg_id,omitempty"`
}

type GatewayCcnRouteObservation struct {

	// As path list of the BGP.
	// As path list of the BGP.
	AsPath []*string `json:"asPath,omitempty" tf:"as_path,omitempty"`

	// A network address segment of IDC.
	// A network address segment of IDC.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// ID of the DCG.
	// ID of the DCG.
	DcgID *string `json:"dcgId,omitempty" tf:"dcg_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayCcnRouteParameters struct {

	// A network address segment of IDC.
	// A network address segment of IDC.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// ID of the DCG.
	// ID of the DCG.
	// +kubebuilder:validation:Optional
	DcgID *string `json:"dcgId,omitempty" tf:"dcg_id,omitempty"`
}

// GatewayCcnRouteSpec defines the desired state of GatewayCcnRoute
type GatewayCcnRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayCcnRouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GatewayCcnRouteInitParameters `json:"initProvider,omitempty"`
}

// GatewayCcnRouteStatus defines the observed state of GatewayCcnRoute.
type GatewayCcnRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayCcnRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayCcnRoute is the Schema for the GatewayCcnRoutes API. Provides a resource to creating direct connect gateway route entry.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type GatewayCcnRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cidrBlock) || (has(self.initProvider) && has(self.initProvider.cidrBlock))",message="spec.forProvider.cidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dcgId) || (has(self.initProvider) && has(self.initProvider.dcgId))",message="spec.forProvider.dcgId is a required parameter"
	Spec   GatewayCcnRouteSpec   `json:"spec"`
	Status GatewayCcnRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayCcnRouteList contains a list of GatewayCcnRoutes
type GatewayCcnRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayCcnRoute `json:"items"`
}

// Repository type metadata.
var (
	GatewayCcnRoute_Kind             = "GatewayCcnRoute"
	GatewayCcnRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayCcnRoute_Kind}.String()
	GatewayCcnRoute_KindAPIVersion   = GatewayCcnRoute_Kind + "." + CRDGroupVersion.String()
	GatewayCcnRoute_GroupVersionKind = CRDGroupVersion.WithKind(GatewayCcnRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayCcnRoute{}, &GatewayCcnRouteList{})
}
