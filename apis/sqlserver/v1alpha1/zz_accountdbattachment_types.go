// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountDBAttachmentInitParameters struct {

	// SQL Server account name.
	// SQL Server account name.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// SQL Server DB name.
	// SQL Server DB name.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Privilege of the account on DB. Valid values: ReadOnly, ReadWrite.
	// Privilege of the account on DB. Valid values: `ReadOnly`, `ReadWrite`.
	Privilege *string `json:"privilege,omitempty" tf:"privilege,omitempty"`
}

type AccountDBAttachmentObservation struct {

	// SQL Server account name.
	// SQL Server account name.
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// SQL Server DB name.
	// SQL Server DB name.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// SQL Server instance ID that the account belongs to.
	// SQL Server instance ID that the account belongs to.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Privilege of the account on DB. Valid values: ReadOnly, ReadWrite.
	// Privilege of the account on DB. Valid values: `ReadOnly`, `ReadWrite`.
	Privilege *string `json:"privilege,omitempty" tf:"privilege,omitempty"`
}

type AccountDBAttachmentParameters struct {

	// SQL Server account name.
	// SQL Server account name.
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// SQL Server DB name.
	// SQL Server DB name.
	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// SQL Server instance ID that the account belongs to.
	// SQL Server instance ID that the account belongs to.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Privilege of the account on DB. Valid values: ReadOnly, ReadWrite.
	// Privilege of the account on DB. Valid values: `ReadOnly`, `ReadWrite`.
	// +kubebuilder:validation:Optional
	Privilege *string `json:"privilege,omitempty" tf:"privilege,omitempty"`
}

// AccountDBAttachmentSpec defines the desired state of AccountDBAttachment
type AccountDBAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountDBAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountDBAttachmentInitParameters `json:"initProvider,omitempty"`
}

// AccountDBAttachmentStatus defines the observed state of AccountDBAttachment.
type AccountDBAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountDBAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountDBAttachment is the Schema for the AccountDBAttachments API. Use this resource to create SQL Server account DB attachment
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type AccountDBAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accountName) || (has(self.initProvider) && has(self.initProvider.accountName))",message="spec.forProvider.accountName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbName) || (has(self.initProvider) && has(self.initProvider.dbName))",message="spec.forProvider.dbName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privilege) || (has(self.initProvider) && has(self.initProvider.privilege))",message="spec.forProvider.privilege is a required parameter"
	Spec   AccountDBAttachmentSpec   `json:"spec"`
	Status AccountDBAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountDBAttachmentList contains a list of AccountDBAttachments
type AccountDBAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountDBAttachment `json:"items"`
}

// Repository type metadata.
var (
	AccountDBAttachment_Kind             = "AccountDBAttachment"
	AccountDBAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountDBAttachment_Kind}.String()
	AccountDBAttachment_KindAPIVersion   = AccountDBAttachment_Kind + "." + CRDGroupVersion.String()
	AccountDBAttachment_GroupVersionKind = CRDGroupVersion.WithKind(AccountDBAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountDBAttachment{}, &AccountDBAttachmentList{})
}
