// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageAttachmentInitParameters struct {
}

type StorageAttachmentObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the CVM instance.
	// ID of the CVM instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// ID of the mounted CBS.
	// ID of the mounted CBS.
	StorageID *string `json:"storageId,omitempty" tf:"storage_id,omitempty"`
}

type StorageAttachmentParameters struct {

	// ID of the CVM instance.
	// ID of the CVM instance.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/cvm/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cvm to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cvm to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// ID of the mounted CBS.
	// ID of the mounted CBS.
	// +crossplane:generate:reference:type=Storage
	// +kubebuilder:validation:Optional
	StorageID *string `json:"storageId,omitempty" tf:"storage_id,omitempty"`

	// Reference to a Storage to populate storageId.
	// +kubebuilder:validation:Optional
	StorageIDRef *v1.Reference `json:"storageIdRef,omitempty" tf:"-"`

	// Selector for a Storage to populate storageId.
	// +kubebuilder:validation:Optional
	StorageIDSelector *v1.Selector `json:"storageIdSelector,omitempty" tf:"-"`
}

// StorageAttachmentSpec defines the desired state of StorageAttachment
type StorageAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageAttachmentInitParameters `json:"initProvider,omitempty"`
}

// StorageAttachmentStatus defines the observed state of StorageAttachment.
type StorageAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageAttachment is the Schema for the StorageAttachments API. Provides a CBS storage attachment resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type StorageAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageAttachmentSpec   `json:"spec"`
	Status            StorageAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageAttachmentList contains a list of StorageAttachments
type StorageAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageAttachment `json:"items"`
}

// Repository type metadata.
var (
	StorageAttachment_Kind             = "StorageAttachment"
	StorageAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageAttachment_Kind}.String()
	StorageAttachment_KindAPIVersion   = StorageAttachment_Kind + "." + CRDGroupVersion.String()
	StorageAttachment_GroupVersionKind = CRDGroupVersion.WithKind(StorageAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageAttachment{}, &StorageAttachmentList{})
}
