// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageSetInitParameters struct {

	// The available zone that the CBS instance locates at.
	// The available zone that the CBS instance locates at.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The charge type of CBS instance. Only support POSTPAID_BY_HOUR.
	// The charge type of CBS instance. Only support `POSTPAID_BY_HOUR`.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The number of disks to be purchased. Default 1.
	// The number of disks to be purchased. Default 1.
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	// Indicates whether CBS is encrypted.
	// Indicates whether CBS is encrypted.
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// ID of the project to which the instance belongs.
	// ID of the project to which the instance belongs.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the snapshot. If specified, created the CBS by this snapshot.
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Name of CBS. The maximum length can not exceed 60 bytes.
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// Volume of CBS, and unit is GB.
	// Volume of CBS, and unit is GB.
	StorageSize *float64 `json:"storageSize,omitempty" tf:"storage_size,omitempty"`

	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Add extra performance to the data disk. Only works when disk type is CLOUD_TSSD or CLOUD_HSSD.
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance *float64 `json:"throughputPerformance,omitempty" tf:"throughput_performance,omitempty"`
}

type StorageSetObservation struct {

	// Indicates whether the CBS is mounted the CVM.
	// Indicates whether the CBS is mounted the CVM.
	Attached *bool `json:"attached,omitempty" tf:"attached,omitempty"`

	// The available zone that the CBS instance locates at.
	// The available zone that the CBS instance locates at.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The charge type of CBS instance. Only support POSTPAID_BY_HOUR.
	// The charge type of CBS instance. Only support `POSTPAID_BY_HOUR`.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The number of disks to be purchased. Default 1.
	// The number of disks to be purchased. Default 1.
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	// disk id list.
	// disk id list.
	DiskIds []*string `json:"diskIds,omitempty" tf:"disk_ids,omitempty"`

	// Indicates whether CBS is encrypted.
	// Indicates whether CBS is encrypted.
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the project to which the instance belongs.
	// ID of the project to which the instance belongs.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the snapshot. If specified, created the CBS by this snapshot.
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Name of CBS. The maximum length can not exceed 60 bytes.
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// Volume of CBS, and unit is GB.
	// Volume of CBS, and unit is GB.
	StorageSize *float64 `json:"storageSize,omitempty" tf:"storage_size,omitempty"`

	// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
	// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
	StorageStatus *string `json:"storageStatus,omitempty" tf:"storage_status,omitempty"`

	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Add extra performance to the data disk. Only works when disk type is CLOUD_TSSD or CLOUD_HSSD.
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance *float64 `json:"throughputPerformance,omitempty" tf:"throughput_performance,omitempty"`
}

type StorageSetParameters struct {

	// The available zone that the CBS instance locates at.
	// The available zone that the CBS instance locates at.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// The charge type of CBS instance. Only support POSTPAID_BY_HOUR.
	// The charge type of CBS instance. Only support `POSTPAID_BY_HOUR`.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// The number of disks to be purchased. Default 1.
	// The number of disks to be purchased. Default 1.
	// +kubebuilder:validation:Optional
	DiskCount *float64 `json:"diskCount,omitempty" tf:"disk_count,omitempty"`

	// Indicates whether CBS is encrypted.
	// Indicates whether CBS is encrypted.
	// +kubebuilder:validation:Optional
	Encrypt *bool `json:"encrypt,omitempty" tf:"encrypt,omitempty"`

	// ID of the project to which the instance belongs.
	// ID of the project to which the instance belongs.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// ID of the snapshot. If specified, created the CBS by this snapshot.
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Name of CBS. The maximum length can not exceed 60 bytes.
	// Name of CBS. The maximum length can not exceed 60 bytes.
	// +kubebuilder:validation:Optional
	StorageName *string `json:"storageName,omitempty" tf:"storage_name,omitempty"`

	// Volume of CBS, and unit is GB.
	// Volume of CBS, and unit is GB.
	// +kubebuilder:validation:Optional
	StorageSize *float64 `json:"storageSize,omitempty" tf:"storage_size,omitempty"`

	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	// +kubebuilder:validation:Optional
	StorageType *string `json:"storageType,omitempty" tf:"storage_type,omitempty"`

	// Add extra performance to the data disk. Only works when disk type is CLOUD_TSSD or CLOUD_HSSD.
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	// +kubebuilder:validation:Optional
	ThroughputPerformance *float64 `json:"throughputPerformance,omitempty" tf:"throughput_performance,omitempty"`
}

// StorageSetSpec defines the desired state of StorageSet
type StorageSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageSetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageSetInitParameters `json:"initProvider,omitempty"`
}

// StorageSetStatus defines the observed state of StorageSet.
type StorageSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSet is the Schema for the StorageSets API. Provides a resource to create CBS set.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type StorageSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityZone) || (has(self.initProvider) && has(self.initProvider.availabilityZone))",message="spec.forProvider.availabilityZone is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageName) || (has(self.initProvider) && has(self.initProvider.storageName))",message="spec.forProvider.storageName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageSize) || (has(self.initProvider) && has(self.initProvider.storageSize))",message="spec.forProvider.storageSize is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.storageType) || (has(self.initProvider) && has(self.initProvider.storageType))",message="spec.forProvider.storageType is a required parameter"
	Spec   StorageSetSpec   `json:"spec"`
	Status StorageSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageSetList contains a list of StorageSets
type StorageSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageSet `json:"items"`
}

// Repository type metadata.
var (
	StorageSet_Kind             = "StorageSet"
	StorageSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageSet_Kind}.String()
	StorageSet_KindAPIVersion   = StorageSet_Kind + "." + CRDGroupVersion.String()
	StorageSet_GroupVersionKind = CRDGroupVersion.WithKind(StorageSet_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageSet{}, &StorageSetList{})
}
