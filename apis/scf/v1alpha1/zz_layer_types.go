// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContentInitParameters struct {

	// Cos bucket name of the SCF layer, such as cos-1234567890, conflict with zip_file.
	// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF layer, conflict with zip_file.
	// Cos bucket region of the SCF layer, conflict with `zip_file`.
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF layer, should have suffix .zip or .jar, conflict with zip_file.
	// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Zip file of the SCF layer, conflict with cos_bucket_name, cos_object_name, cos_bucket_region.
	// Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type ContentObservation struct {

	// Cos bucket name of the SCF layer, such as cos-1234567890, conflict with zip_file.
	// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF layer, conflict with zip_file.
	// Cos bucket region of the SCF layer, conflict with `zip_file`.
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF layer, should have suffix .zip or .jar, conflict with zip_file.
	// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Zip file of the SCF layer, conflict with cos_bucket_name, cos_object_name, cos_bucket_region.
	// Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type ContentParameters struct {

	// Cos bucket name of the SCF layer, such as cos-1234567890, conflict with zip_file.
	// Cos bucket name of the SCF layer, such as `cos-1234567890`, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosBucketName *string `json:"cosBucketName,omitempty" tf:"cos_bucket_name,omitempty"`

	// Cos bucket region of the SCF layer, conflict with zip_file.
	// Cos bucket region of the SCF layer, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosBucketRegion *string `json:"cosBucketRegion,omitempty" tf:"cos_bucket_region,omitempty"`

	// Cos object name of the SCF layer, should have suffix .zip or .jar, conflict with zip_file.
	// Cos object name of the SCF layer, should have suffix `.zip` or `.jar`, conflict with `zip_file`.
	// +kubebuilder:validation:Optional
	CosObjectName *string `json:"cosObjectName,omitempty" tf:"cos_object_name,omitempty"`

	// Zip file of the SCF layer, conflict with cos_bucket_name, cos_object_name, cos_bucket_region.
	// Zip file of the SCF layer, conflict with `cos_bucket_name`, `cos_object_name`, `cos_bucket_region`.
	// +kubebuilder:validation:Optional
	ZipFile *string `json:"zipFile,omitempty" tf:"zip_file,omitempty"`
}

type LayerInitParameters struct {

	// The compatible runtimes of layer.
	// The compatible runtimes of layer.
	CompatibleRuntimes []*string `json:"compatibleRuntimes,omitempty" tf:"compatible_runtimes,omitempty"`

	// The source code of layer.
	// The source code of layer.
	Content []ContentInitParameters `json:"content,omitempty" tf:"content,omitempty"`

	// The description of layer.
	// The description of layer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of layer.
	// The name of layer.
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// The license info of layer.
	// The license info of layer.
	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info,omitempty"`
}

type LayerObservation struct {

	// The code type of layer.
	// The code type of layer.
	CodeSha256 *string `json:"codeSha256,omitempty" tf:"code_sha_256,omitempty"`

	// The compatible runtimes of layer.
	// The compatible runtimes of layer.
	CompatibleRuntimes []*string `json:"compatibleRuntimes,omitempty" tf:"compatible_runtimes,omitempty"`

	// The source code of layer.
	// The source code of layer.
	Content []ContentObservation `json:"content,omitempty" tf:"content,omitempty"`

	// The create time of layer.
	// The create time of layer.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// The description of layer.
	// The description of layer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of layer.
	// The name of layer.
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// The version of layer.
	// The version of layer.
	LayerVersion *float64 `json:"layerVersion,omitempty" tf:"layer_version,omitempty"`

	// The license info of layer.
	// The license info of layer.
	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info,omitempty"`

	// The download location url of layer.
	// The download location url of layer.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// The current status of layer.
	// The current status of layer.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type LayerParameters struct {

	// The compatible runtimes of layer.
	// The compatible runtimes of layer.
	// +kubebuilder:validation:Optional
	CompatibleRuntimes []*string `json:"compatibleRuntimes,omitempty" tf:"compatible_runtimes,omitempty"`

	// The source code of layer.
	// The source code of layer.
	// +kubebuilder:validation:Optional
	Content []ContentParameters `json:"content,omitempty" tf:"content,omitempty"`

	// The description of layer.
	// The description of layer.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of layer.
	// The name of layer.
	// +kubebuilder:validation:Optional
	LayerName *string `json:"layerName,omitempty" tf:"layer_name,omitempty"`

	// The license info of layer.
	// The license info of layer.
	// +kubebuilder:validation:Optional
	LicenseInfo *string `json:"licenseInfo,omitempty" tf:"license_info,omitempty"`
}

// LayerSpec defines the desired state of Layer
type LayerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LayerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LayerInitParameters `json:"initProvider,omitempty"`
}

// LayerStatus defines the observed state of Layer.
type LayerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LayerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Layer is the Schema for the Layers API. Provide a resource to create a SCF layer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Layer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compatibleRuntimes) || (has(self.initProvider) && has(self.initProvider.compatibleRuntimes))",message="spec.forProvider.compatibleRuntimes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.layerName) || (has(self.initProvider) && has(self.initProvider.layerName))",message="spec.forProvider.layerName is a required parameter"
	Spec   LayerSpec   `json:"spec"`
	Status LayerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LayerList contains a list of Layers
type LayerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Layer `json:"items"`
}

// Repository type metadata.
var (
	Layer_Kind             = "Layer"
	Layer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Layer_Kind}.String()
	Layer_KindAPIVersion   = Layer_Kind + "." + CRDGroupVersion.String()
	Layer_GroupVersionKind = CRDGroupVersion.WithKind(Layer_Kind)
)

func init() {
	SchemeBuilder.Register(&Layer{}, &LayerList{})
}
