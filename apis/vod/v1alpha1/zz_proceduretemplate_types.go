// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AIAnalysisTaskInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Video content analysis template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type AIAnalysisTaskObservation struct {

	// Adaptive bitrate streaming template ID.
	// Video content analysis template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type AIAnalysisTaskParameters struct {

	// Adaptive bitrate streaming template ID.
	// Video content analysis template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type AIRecognitionTaskInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Intelligent video recognition template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type AIRecognitionTaskObservation struct {

	// Adaptive bitrate streaming template ID.
	// Intelligent video recognition template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type AIRecognitionTaskParameters struct {

	// Adaptive bitrate streaming template ID.
	// Intelligent video recognition template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type AdaptiveDynamicStreamingTaskListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Adaptive bitrate streaming template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
	// Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
	SubtitleList []*string `json:"subtitleList,omitempty" tf:"subtitle_list,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []WatermarkListInitParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type AdaptiveDynamicStreamingTaskListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Adaptive bitrate streaming template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
	// Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
	SubtitleList []*string `json:"subtitleList,omitempty" tf:"subtitle_list,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []WatermarkListObservation `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type AdaptiveDynamicStreamingTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Adaptive bitrate streaming template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
	// Subtitle list, element is subtitle ID, support multiple subtitles, up to 16.
	// +kubebuilder:validation:Optional
	SubtitleList []*string `json:"subtitleList,omitempty" tf:"subtitle_list,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []WatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type AnimatedGraphicTaskListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Animated image generating template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time of animated image in video in seconds.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time of animated image in video in seconds.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`
}

type AnimatedGraphicTaskListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Animated image generating template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time of animated image in video in seconds.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time of animated image in video in seconds.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`
}

type AnimatedGraphicTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Animated image generating template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time of animated image in video in seconds.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time of animated image in video in seconds.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset" tf:"start_time_offset,omitempty"`
}

type CopyRightWatermarkInitParameters struct {

	// Copyright information, maximum length is 200 characters.
	// Copyright information, maximum length is 200 characters.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type CopyRightWatermarkObservation struct {

	// Copyright information, maximum length is 200 characters.
	// Copyright information, maximum length is 200 characters.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type CopyRightWatermarkParameters struct {

	// Copyright information, maximum length is 200 characters.
	// Copyright information, maximum length is 200 characters.
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type CoverBySnapshotTaskListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Time point screen capturing template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// Screen capturing mode. Valid values: Time, Percent. Time: screen captures by time point, Percent: screen captures by percentage.
	// Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
	PositionType *string `json:"positionType,omitempty" tf:"position_type,omitempty"`

	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	PositionValue *float64 `json:"positionValue,omitempty" tf:"position_value,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []CoverBySnapshotTaskListWatermarkListInitParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type CoverBySnapshotTaskListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Time point screen capturing template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// Screen capturing mode. Valid values: Time, Percent. Time: screen captures by time point, Percent: screen captures by percentage.
	// Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
	PositionType *string `json:"positionType,omitempty" tf:"position_type,omitempty"`

	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	PositionValue *float64 `json:"positionValue,omitempty" tf:"position_value,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []CoverBySnapshotTaskListWatermarkListObservation `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type CoverBySnapshotTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Time point screen capturing template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// Screen capturing mode. Valid values: Time, Percent. Time: screen captures by time point, Percent: screen captures by percentage.
	// Screen capturing mode. Valid values: `Time`, `Percent`. `Time`: screen captures by time point, `Percent`: screen captures by percentage.
	// +kubebuilder:validation:Optional
	PositionType *string `json:"positionType" tf:"position_type,omitempty"`

	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	// Screenshot position: For time point screen capturing, this means to take a screenshot at a specified time point (in seconds) and use it as the cover. For percentage screen capturing, this value means to take a screenshot at a specified percentage of the video duration and use it as the cover.
	// +kubebuilder:validation:Optional
	PositionValue *float64 `json:"positionValue" tf:"position_value,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []CoverBySnapshotTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type CoverBySnapshotTaskListWatermarkListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type CoverBySnapshotTaskListWatermarkListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type CoverBySnapshotTaskListWatermarkListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type HeadTailListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Video opening/closing credits configuration template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type HeadTailListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Video opening/closing credits configuration template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type HeadTailListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Video opening/closing credits configuration template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type ImageSpriteTaskListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Image sprite generating template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type ImageSpriteTaskListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Image sprite generating template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`
}

type ImageSpriteTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Image sprite generating template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`
}

type MediaProcessTaskInitParameters struct {

	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	AdaptiveDynamicStreamingTaskList []AdaptiveDynamicStreamingTaskListInitParameters `json:"adaptiveDynamicStreamingTaskList,omitempty" tf:"adaptive_dynamic_streaming_task_list,omitempty"`

	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	AnimatedGraphicTaskList []AnimatedGraphicTaskListInitParameters `json:"animatedGraphicTaskList,omitempty" tf:"animated_graphic_task_list,omitempty"`

	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	CoverBySnapshotTaskList []CoverBySnapshotTaskListInitParameters `json:"coverBySnapshotTaskList,omitempty" tf:"cover_by_snapshot_task_list,omitempty"`

	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	ImageSpriteTaskList []ImageSpriteTaskListInitParameters `json:"imageSpriteTaskList,omitempty" tf:"image_sprite_task_list,omitempty"`

	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	SampleSnapshotTaskList []SampleSnapshotTaskListInitParameters `json:"sampleSnapshotTaskList,omitempty" tf:"sample_snapshot_task_list,omitempty"`

	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	SnapshotByTimeOffsetTaskList []SnapshotByTimeOffsetTaskListInitParameters `json:"snapshotByTimeOffsetTaskList,omitempty" tf:"snapshot_by_time_offset_task_list,omitempty"`

	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	TranscodeTaskList []TranscodeTaskListInitParameters `json:"transcodeTaskList,omitempty" tf:"transcode_task_list,omitempty"`
}

type MediaProcessTaskObservation struct {

	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	AdaptiveDynamicStreamingTaskList []AdaptiveDynamicStreamingTaskListObservation `json:"adaptiveDynamicStreamingTaskList,omitempty" tf:"adaptive_dynamic_streaming_task_list,omitempty"`

	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	AnimatedGraphicTaskList []AnimatedGraphicTaskListObservation `json:"animatedGraphicTaskList,omitempty" tf:"animated_graphic_task_list,omitempty"`

	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	CoverBySnapshotTaskList []CoverBySnapshotTaskListObservation `json:"coverBySnapshotTaskList,omitempty" tf:"cover_by_snapshot_task_list,omitempty"`

	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	ImageSpriteTaskList []ImageSpriteTaskListObservation `json:"imageSpriteTaskList,omitempty" tf:"image_sprite_task_list,omitempty"`

	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	SampleSnapshotTaskList []SampleSnapshotTaskListObservation `json:"sampleSnapshotTaskList,omitempty" tf:"sample_snapshot_task_list,omitempty"`

	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	SnapshotByTimeOffsetTaskList []SnapshotByTimeOffsetTaskListObservation `json:"snapshotByTimeOffsetTaskList,omitempty" tf:"snapshot_by_time_offset_task_list,omitempty"`

	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	TranscodeTaskList []TranscodeTaskListObservation `json:"transcodeTaskList,omitempty" tf:"transcode_task_list,omitempty"`
}

type MediaProcessTaskParameters struct {

	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of adaptive bitrate streaming tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	AdaptiveDynamicStreamingTaskList []AdaptiveDynamicStreamingTaskListParameters `json:"adaptiveDynamicStreamingTaskList,omitempty" tf:"adaptive_dynamic_streaming_task_list,omitempty"`

	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of animated image generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	AnimatedGraphicTaskList []AnimatedGraphicTaskListParameters `json:"animatedGraphicTaskList,omitempty" tf:"animated_graphic_task_list,omitempty"`

	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of cover generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	CoverBySnapshotTaskList []CoverBySnapshotTaskListParameters `json:"coverBySnapshotTaskList,omitempty" tf:"cover_by_snapshot_task_list,omitempty"`

	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of image sprite generating tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	ImageSpriteTaskList []ImageSpriteTaskListParameters `json:"imageSpriteTaskList,omitempty" tf:"image_sprite_task_list,omitempty"`

	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of sampled screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SampleSnapshotTaskList []SampleSnapshotTaskListParameters `json:"sampleSnapshotTaskList,omitempty" tf:"sample_snapshot_task_list,omitempty"`

	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of time point screen capturing tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SnapshotByTimeOffsetTaskList []SnapshotByTimeOffsetTaskListParameters `json:"snapshotByTimeOffsetTaskList,omitempty" tf:"snapshot_by_time_offset_task_list,omitempty"`

	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of transcoding tasks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TranscodeTaskList []TranscodeTaskListParameters `json:"transcodeTaskList,omitempty" tf:"transcode_task_list,omitempty"`
}

type MosaicListInitParameters struct {

	// Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	// Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	CoordinateOrigin *string `json:"coordinateOrigin,omitempty" tf:"coordinate_origin,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Blur height. % and px formats are supported: If the string ends in %, the height of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in px, the height of the blur will be in px; for example, 100px means that Height is 100 px. Default value: 10%.
	// Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px. Default value: `10%`.
	Height *string `json:"height,omitempty" tf:"height,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Blur width. % and px formats are supported: If the string ends in %, the width of the blur will be the specified percentage of the video width; for example, 10% means that width is 10% of the video width; If the string ends in px, the width of the blur will be in px; for example, 100px means that Width is 100 px. Default value: 10%.
	// Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px. Default value: `10%`.
	Width *string `json:"width,omitempty" tf:"width,omitempty"`

	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in px, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: 0px.
	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: `0px`.
	XPos *string `json:"xPos,omitempty" tf:"x_pos,omitempty"`

	// Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported: If the string ends in %, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in px, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: 0px.
	// Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: `0px`.
	YPos *string `json:"yPos,omitempty" tf:"y_pos,omitempty"`
}

type MosaicListObservation struct {

	// Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	// Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	CoordinateOrigin *string `json:"coordinateOrigin,omitempty" tf:"coordinate_origin,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Blur height. % and px formats are supported: If the string ends in %, the height of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in px, the height of the blur will be in px; for example, 100px means that Height is 100 px. Default value: 10%.
	// Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px. Default value: `10%`.
	Height *string `json:"height,omitempty" tf:"height,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Blur width. % and px formats are supported: If the string ends in %, the width of the blur will be the specified percentage of the video width; for example, 10% means that width is 10% of the video width; If the string ends in px, the width of the blur will be in px; for example, 100px means that Width is 100 px. Default value: 10%.
	// Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px. Default value: `10%`.
	Width *string `json:"width,omitempty" tf:"width,omitempty"`

	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in px, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: 0px.
	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: `0px`.
	XPos *string `json:"xPos,omitempty" tf:"x_pos,omitempty"`

	// Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported: If the string ends in %, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in px, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: 0px.
	// Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: `0px`.
	YPos *string `json:"yPos,omitempty" tf:"y_pos,omitempty"`
}

type MosaicListParameters struct {

	// Origin position, which currently can only be: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	// Origin position, which currently can only be: `TopLeft`: the origin of coordinates is in the top-left corner of the video, and the origin of the blur is in the top-left corner of the image or text. Default value: TopLeft.
	// +kubebuilder:validation:Optional
	CoordinateOrigin *string `json:"coordinateOrigin,omitempty" tf:"coordinate_origin,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Blur height. % and px formats are supported: If the string ends in %, the height of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in px, the height of the blur will be in px; for example, 100px means that Height is 100 px. Default value: 10%.
	// Blur height. `%` and `px` formats are supported: If the string ends in `%`, the `height` of the blur will be the specified percentage of the video height; for example, 10% means that Height is 10% of the video height; If the string ends in `px`, the `height` of the blur will be in px; for example, 100px means that Height is 100 px. Default value: `10%`.
	// +kubebuilder:validation:Optional
	Height *string `json:"height,omitempty" tf:"height,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Blur width. % and px formats are supported: If the string ends in %, the width of the blur will be the specified percentage of the video width; for example, 10% means that width is 10% of the video width; If the string ends in px, the width of the blur will be in px; for example, 100px means that Width is 100 px. Default value: 10%.
	// Blur width. `%` and `px` formats are supported: If the string ends in `%`, the `width` of the blur will be the specified percentage of the video width; for example, 10% means that `width` is 10% of the video width; If the string ends in `px`, the `width` of the blur will be in px; for example, 100px means that Width is 100 px. Default value: `10%`.
	// +kubebuilder:validation:Optional
	Width *string `json:"width,omitempty" tf:"width,omitempty"`

	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in px, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: 0px.
	// The horizontal position of the origin of the blur relative to the origin of coordinates of the video. `%` and `px` formats are supported: If the string ends in `%`, the XPos of the blur will be the specified percentage of the video width; for example, 10% means that XPos is 10% of the video width; If the string ends in `px`, the XPos of the blur will be the specified px; for example, 100px means that XPos is 100 px. Default value: `0px`.
	// +kubebuilder:validation:Optional
	XPos *string `json:"xPos,omitempty" tf:"x_pos,omitempty"`

	// Vertical position of the origin of blur relative to the origin of coordinates of video. % and px formats are supported: If the string ends in %, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in px, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: 0px.
	// Vertical position of the origin of blur relative to the origin of coordinates of video. `%` and `px` formats are supported: If the string ends in `%`, the YPos of the blur will be the specified percentage of the video height; for example, 10% means that YPos is 10% of the video height; If the string ends in `px`, the YPos of the blur will be the specified px; for example, 100px means that YPos is 100 px. Default value: `0px`.
	// +kubebuilder:validation:Optional
	YPos *string `json:"yPos,omitempty" tf:"y_pos,omitempty"`
}

type ProcedureTemplateInitParameters struct {

	// Parameter of AI-based content analysis task.
	// Parameter of AI-based content analysis task.
	AIAnalysisTask []AIAnalysisTaskInitParameters `json:"aiAnalysisTask,omitempty" tf:"ai_analysis_task,omitempty"`

	// Type parameter of AI-based content recognition task.
	// Type parameter of AI-based content recognition task.
	AIRecognitionTask []AIRecognitionTaskInitParameters `json:"aiRecognitionTask,omitempty" tf:"ai_recognition_task,omitempty"`

	// Template description. Length limit: 256 characters.
	// Template description. Length limit: 256 characters.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Parameter of video processing task.
	// Parameter of video processing task.
	MediaProcessTask []MediaProcessTaskInitParameters `json:"mediaProcessTask,omitempty" tf:"media_process_task,omitempty"`

	// Task flow name (up to 20 characters).
	// Task flow name (up to 20 characters).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type parameter of AI-based content recognition task.
	// Type parameter of AI-based content recognition task.
	ReviewAudioVideoTask []ReviewAudioVideoTaskInitParameters `json:"reviewAudioVideoTask,omitempty" tf:"review_audio_video_task,omitempty"`

	// The VOD application ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`
}

type ProcedureTemplateObservation struct {

	// Parameter of AI-based content analysis task.
	// Parameter of AI-based content analysis task.
	AIAnalysisTask []AIAnalysisTaskObservation `json:"aiAnalysisTask,omitempty" tf:"ai_analysis_task,omitempty"`

	// Type parameter of AI-based content recognition task.
	// Type parameter of AI-based content recognition task.
	AIRecognitionTask []AIRecognitionTaskObservation `json:"aiRecognitionTask,omitempty" tf:"ai_recognition_task,omitempty"`

	// Template description. Length limit: 256 characters.
	// Template description. Length limit: 256 characters.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Creation time of template in ISO date format.
	// Creation time of template in ISO date format.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Parameter of video processing task.
	// Parameter of video processing task.
	MediaProcessTask []MediaProcessTaskObservation `json:"mediaProcessTask,omitempty" tf:"media_process_task,omitempty"`

	// Task flow name (up to 20 characters).
	// Task flow name (up to 20 characters).
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type parameter of AI-based content recognition task.
	// Type parameter of AI-based content recognition task.
	ReviewAudioVideoTask []ReviewAudioVideoTaskObservation `json:"reviewAudioVideoTask,omitempty" tf:"review_audio_video_task,omitempty"`

	// The VOD application ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`

	// Template type, value range:
	// Template type, value range:
	// - Preset: system preset template;
	// - Custom: user-defined templates.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Last modified time of template in ISO date format.
	// Last modified time of template in ISO date format.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type ProcedureTemplateParameters struct {

	// Parameter of AI-based content analysis task.
	// Parameter of AI-based content analysis task.
	// +kubebuilder:validation:Optional
	AIAnalysisTask []AIAnalysisTaskParameters `json:"aiAnalysisTask,omitempty" tf:"ai_analysis_task,omitempty"`

	// Type parameter of AI-based content recognition task.
	// Type parameter of AI-based content recognition task.
	// +kubebuilder:validation:Optional
	AIRecognitionTask []AIRecognitionTaskParameters `json:"aiRecognitionTask,omitempty" tf:"ai_recognition_task,omitempty"`

	// Template description. Length limit: 256 characters.
	// Template description. Length limit: 256 characters.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Parameter of video processing task.
	// Parameter of video processing task.
	// +kubebuilder:validation:Optional
	MediaProcessTask []MediaProcessTaskParameters `json:"mediaProcessTask,omitempty" tf:"media_process_task,omitempty"`

	// Task flow name (up to 20 characters).
	// Task flow name (up to 20 characters).
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Type parameter of AI-based content recognition task.
	// Type parameter of AI-based content recognition task.
	// +kubebuilder:validation:Optional
	ReviewAudioVideoTask []ReviewAudioVideoTaskParameters `json:"reviewAudioVideoTask,omitempty" tf:"review_audio_video_task,omitempty"`

	// The VOD application ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// +kubebuilder:validation:Optional
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`
}

type ReviewAudioVideoTaskInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Review template.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// The type of moderated content. Valid values:
	// The type of moderated content. Valid values:
	// - `Media`: The original audio/video;
	// - `Cover`: Thumbnails.
	ReviewContents []*string `json:"reviewContents,omitempty" tf:"review_contents,omitempty"`
}

type ReviewAudioVideoTaskObservation struct {

	// Adaptive bitrate streaming template ID.
	// Review template.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// The type of moderated content. Valid values:
	// The type of moderated content. Valid values:
	// - `Media`: The original audio/video;
	// - `Cover`: Thumbnails.
	ReviewContents []*string `json:"reviewContents,omitempty" tf:"review_contents,omitempty"`
}

type ReviewAudioVideoTaskParameters struct {

	// Adaptive bitrate streaming template ID.
	// Review template.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// The type of moderated content. Valid values:
	// The type of moderated content. Valid values:
	// - `Media`: The original audio/video;
	// - `Cover`: Thumbnails.
	// +kubebuilder:validation:Optional
	ReviewContents []*string `json:"reviewContents,omitempty" tf:"review_contents,omitempty"`
}

type SampleSnapshotTaskListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Sampled screen capturing template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []SampleSnapshotTaskListWatermarkListInitParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SampleSnapshotTaskListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Sampled screen capturing template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []SampleSnapshotTaskListWatermarkListObservation `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SampleSnapshotTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Sampled screen capturing template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []SampleSnapshotTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SampleSnapshotTaskListWatermarkListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type SampleSnapshotTaskListWatermarkListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type SampleSnapshotTaskListWatermarkListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type SnapshotByTimeOffsetTaskListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Time point screen capturing template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// The list of screenshot time points. s and % formats are supported: When a time point string ends with s, its unit is second. For example, 3.5s means the 3.5th second of the video; When a time point string ends with %, it is marked with corresponding percentage of the video duration. For example, 10% means that the time point is at the 10% of the video entire duration.
	// The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
	ExtTimeOffsetList []*string `json:"extTimeOffsetList,omitempty" tf:"ext_time_offset_list,omitempty"`

	// List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
	// List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
	TimeOffsetList []*float64 `json:"timeOffsetList,omitempty" tf:"time_offset_list,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []SnapshotByTimeOffsetTaskListWatermarkListInitParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SnapshotByTimeOffsetTaskListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Time point screen capturing template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// The list of screenshot time points. s and % formats are supported: When a time point string ends with s, its unit is second. For example, 3.5s means the 3.5th second of the video; When a time point string ends with %, it is marked with corresponding percentage of the video duration. For example, 10% means that the time point is at the 10% of the video entire duration.
	// The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
	ExtTimeOffsetList []*string `json:"extTimeOffsetList,omitempty" tf:"ext_time_offset_list,omitempty"`

	// List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
	// List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
	TimeOffsetList []*float64 `json:"timeOffsetList,omitempty" tf:"time_offset_list,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []SnapshotByTimeOffsetTaskListWatermarkListObservation `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SnapshotByTimeOffsetTaskListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Time point screen capturing template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// The list of screenshot time points. s and % formats are supported: When a time point string ends with s, its unit is second. For example, 3.5s means the 3.5th second of the video; When a time point string ends with %, it is marked with corresponding percentage of the video duration. For example, 10% means that the time point is at the 10% of the video entire duration.
	// The list of screenshot time points. `s` and `%` formats are supported: When a time point string ends with `s`, its unit is second. For example, `3.5s` means the 3.5th second of the video; When a time point string ends with `%`, it is marked with corresponding percentage of the video duration. For example, `10%` means that the time point is at the 10% of the video entire duration.
	// +kubebuilder:validation:Optional
	ExtTimeOffsetList []*string `json:"extTimeOffsetList,omitempty" tf:"ext_time_offset_list,omitempty"`

	// List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
	// List of time points for screencapturing in milliseconds. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TimeOffsetList []*float64 `json:"timeOffsetList,omitempty" tf:"time_offset_list,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []SnapshotByTimeOffsetTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type SnapshotByTimeOffsetTaskListWatermarkListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type SnapshotByTimeOffsetTaskListWatermarkListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type SnapshotByTimeOffsetTaskListWatermarkListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type TraceWatermarkInitParameters struct {

	// Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
	// Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
	Switch *string `json:"switch,omitempty" tf:"switch,omitempty"`
}

type TraceWatermarkObservation struct {

	// Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
	// Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
	Switch *string `json:"switch,omitempty" tf:"switch,omitempty"`
}

type TraceWatermarkParameters struct {

	// Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
	// Whether to use digital watermarks. This parameter is required. Valid values: ON, OFF.
	// +kubebuilder:validation:Optional
	Switch *string `json:"switch,omitempty" tf:"switch,omitempty"`
}

type TranscodeTaskListInitParameters struct {

	// opyright watermark.
	// opyright watermark.
	CopyRightWatermark []CopyRightWatermarkInitParameters `json:"copyRightWatermark,omitempty" tf:"copy_right_watermark,omitempty"`

	// Adaptive bitrate streaming template ID.
	// Video transcoding template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
	// List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
	HeadTailList []HeadTailListInitParameters `json:"headTailList,omitempty" tf:"head_tail_list,omitempty"`

	// List of blurs. Up to 10 ones can be supported.
	// List of blurs. Up to 10 ones can be supported.
	MosaicList []MosaicListInitParameters `json:"mosaicList,omitempty" tf:"mosaic_list,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Digital watermark.
	// Digital watermark.
	TraceWatermark []TraceWatermarkInitParameters `json:"traceWatermark,omitempty" tf:"trace_watermark,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []TranscodeTaskListWatermarkListInitParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type TranscodeTaskListObservation struct {

	// opyright watermark.
	// opyright watermark.
	CopyRightWatermark []CopyRightWatermarkObservation `json:"copyRightWatermark,omitempty" tf:"copy_right_watermark,omitempty"`

	// Adaptive bitrate streaming template ID.
	// Video transcoding template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
	// List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
	HeadTailList []HeadTailListObservation `json:"headTailList,omitempty" tf:"head_tail_list,omitempty"`

	// List of blurs. Up to 10 ones can be supported.
	// List of blurs. Up to 10 ones can be supported.
	MosaicList []MosaicListObservation `json:"mosaicList,omitempty" tf:"mosaic_list,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Digital watermark.
	// Digital watermark.
	TraceWatermark []TraceWatermarkObservation `json:"traceWatermark,omitempty" tf:"trace_watermark,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	WatermarkList []TranscodeTaskListWatermarkListObservation `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type TranscodeTaskListParameters struct {

	// opyright watermark.
	// opyright watermark.
	// +kubebuilder:validation:Optional
	CopyRightWatermark []CopyRightWatermarkParameters `json:"copyRightWatermark,omitempty" tf:"copy_right_watermark,omitempty"`

	// Adaptive bitrate streaming template ID.
	// Video transcoding template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will exist till the last video frame; If this value is greater than `0` (e.g., n), the blur will exist till second n; If this value is smaller than `0` (e.g., -n), the blur will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
	// List of video opening/closing credits configuration template IDs. You can enter up to 10 IDs.
	// +kubebuilder:validation:Optional
	HeadTailList []HeadTailListParameters `json:"headTailList,omitempty" tf:"head_tail_list,omitempty"`

	// List of blurs. Up to 10 ones can be supported.
	// List of blurs. Up to 10 ones can be supported.
	// +kubebuilder:validation:Optional
	MosaicList []MosaicListParameters `json:"mosaicList,omitempty" tf:"mosaic_list,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of blur in seconds. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame. If this parameter is left empty or `0` is entered, the blur will appear upon the first video frame; If this value is greater than `0` (e.g., n), the blur will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the blur will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// Digital watermark.
	// Digital watermark.
	// +kubebuilder:validation:Optional
	TraceWatermark []TraceWatermarkParameters `json:"traceWatermark,omitempty" tf:"trace_watermark,omitempty"`

	// List of up to 10 image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// List of up to `10` image or text watermarks. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	WatermarkList []TranscodeTaskListWatermarkListParameters `json:"watermarkList,omitempty" tf:"watermark_list,omitempty"`
}

type TranscodeTaskListWatermarkListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type TranscodeTaskListWatermarkListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type TranscodeTaskListWatermarkListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type WatermarkListInitParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type WatermarkListObservation struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	Definition *string `json:"definition,omitempty" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

type WatermarkListParameters struct {

	// Adaptive bitrate streaming template ID.
	// Watermarking template ID.
	// +kubebuilder:validation:Optional
	Definition *string `json:"definition" tf:"definition,omitempty"`

	// End time of animated image in video in seconds.
	// End time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will exist till the last video frame; If this value is greater than `0` (e.g., n), the watermark will exist till second n; If this value is smaller than `0` (e.g., -n), the watermark will exist till second n before the last video frame.
	// +kubebuilder:validation:Optional
	EndTimeOffset *float64 `json:"endTimeOffset,omitempty" tf:"end_time_offset,omitempty"`

	// Start time of animated image in video in seconds.
	// Start time offset of a watermark in seconds. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame. If this parameter is left blank or `0` is entered, the watermark will appear upon the first video frame; If this value is greater than `0` (e.g., n), the watermark will appear at second n after the first video frame; If this value is smaller than `0` (e.g., -n), the watermark will appear at second n before the last video frame.
	// +kubebuilder:validation:Optional
	StartTimeOffset *float64 `json:"startTimeOffset,omitempty" tf:"start_time_offset,omitempty"`

	// SVG content of up to 2000000 characters. This needs to be entered only when the watermark type is SVG. Note: this field may return null, indicating that no valid values can be obtained.
	// SVG content of up to `2000000` characters. This needs to be entered only when the watermark type is `SVG`. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	SvgContent *string `json:"svgContent,omitempty" tf:"svg_content,omitempty"`

	// Text content of up to 100 characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// Text content of up to `100` characters. This needs to be entered only when the watermark type is text. Note: this field may return null, indicating that no valid values can be obtained.
	// +kubebuilder:validation:Optional
	TextContent *string `json:"textContent,omitempty" tf:"text_content,omitempty"`
}

// ProcedureTemplateSpec defines the desired state of ProcedureTemplate
type ProcedureTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProcedureTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProcedureTemplateInitParameters `json:"initProvider,omitempty"`
}

// ProcedureTemplateStatus defines the observed state of ProcedureTemplate.
type ProcedureTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProcedureTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProcedureTemplate is the Schema for the ProcedureTemplates API. Provide a resource to create a VOD procedure template.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ProcedureTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ProcedureTemplateSpec   `json:"spec"`
	Status ProcedureTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcedureTemplateList contains a list of ProcedureTemplates
type ProcedureTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcedureTemplate `json:"items"`
}

// Repository type metadata.
var (
	ProcedureTemplate_Kind             = "ProcedureTemplate"
	ProcedureTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProcedureTemplate_Kind}.String()
	ProcedureTemplate_KindAPIVersion   = ProcedureTemplate_Kind + "." + CRDGroupVersion.String()
	ProcedureTemplate_GroupVersionKind = CRDGroupVersion.WithKind(ProcedureTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&ProcedureTemplate{}, &ProcedureTemplateList{})
}
