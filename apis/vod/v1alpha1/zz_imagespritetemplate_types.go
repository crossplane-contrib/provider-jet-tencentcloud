// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageSpriteTemplateInitParameters struct {

	// Subimage column count of an image sprite.
	// Subimage column count of an image sprite.
	ColumnCount *float64 `json:"columnCount,omitempty" tf:"column_count,omitempty"`

	// Template description. Length limit: 256 characters.
	// Template description. Length limit: 256 characters.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: stretch: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; black: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: black.
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType *string `json:"fillType,omitempty" tf:"fill_type,omitempty"`

	// Image format, Valid values:
	// Image format, Valid values:
	// - jpg: jpg format;
	// - png: png format;
	// - webp: webp format;
	// Default value: jpg.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// Maximum value of the height (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both width and height are 0, the resolution will be the same as that of the source video; If width is 0, but height is not 0, width will be proportionally scaled; If width is not 0, but height is 0, height will be proportionally scaled; If both width and height are not 0, the custom resolution will be used. Default value: 0.
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Name of a time point screen capturing template. Length limit: 64 characters.
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resolution adaption. Valid values: true,false. true: enabled. In this case, width represents the long side of a video, while height the short side; false: disabled. In this case, width represents the width of a video, while height the height. Default value: true.
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive *bool `json:"resolutionAdaptive,omitempty" tf:"resolution_adaptive,omitempty"`

	// Subimage row count of an image sprite.
	// Subimage row count of an image sprite.
	RowCount *float64 `json:"rowCount,omitempty" tf:"row_count,omitempty"`

	// Sampling interval. If sample_type is Percent, sampling will be performed at an interval of the specified percentage. If sample_type is Time, sampling will be performed at the specified time interval in seconds.
	// Sampling interval. If `sample_type` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sample_type` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval *float64 `json:"sampleInterval,omitempty" tf:"sample_interval,omitempty"`

	// Sampling type. Valid values: Percent, Time. Percent: by percent. Time: by time interval.
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType *string `json:"sampleType,omitempty" tf:"sample_type,omitempty"`

	// The VOD application ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`

	// Maximum value of the width (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both width and height are 0, the resolution will be the same as that of the source video; If width is 0, but height is not 0, width will be proportionally scaled; If width is not 0, but height is 0, height will be proportionally scaled; If both width and height are not 0, the custom resolution will be used. Default value: 0.
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type ImageSpriteTemplateObservation struct {

	// Subimage column count of an image sprite.
	// Subimage column count of an image sprite.
	ColumnCount *float64 `json:"columnCount,omitempty" tf:"column_count,omitempty"`

	// Template description. Length limit: 256 characters.
	// Template description. Length limit: 256 characters.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Creation time of template in ISO date format.
	// Creation time of template in ISO date format.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: stretch: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; black: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: black.
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType *string `json:"fillType,omitempty" tf:"fill_type,omitempty"`

	// Image format, Valid values:
	// Image format, Valid values:
	// - jpg: jpg format;
	// - png: png format;
	// - webp: webp format;
	// Default value: jpg.
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// Maximum value of the height (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both width and height are 0, the resolution will be the same as that of the source video; If width is 0, but height is not 0, width will be proportionally scaled; If width is not 0, but height is 0, height will be proportionally scaled; If both width and height are not 0, the custom resolution will be used. Default value: 0.
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of a time point screen capturing template. Length limit: 64 characters.
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resolution adaption. Valid values: true,false. true: enabled. In this case, width represents the long side of a video, while height the short side; false: disabled. In this case, width represents the width of a video, while height the height. Default value: true.
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive *bool `json:"resolutionAdaptive,omitempty" tf:"resolution_adaptive,omitempty"`

	// Subimage row count of an image sprite.
	// Subimage row count of an image sprite.
	RowCount *float64 `json:"rowCount,omitempty" tf:"row_count,omitempty"`

	// Sampling interval. If sample_type is Percent, sampling will be performed at an interval of the specified percentage. If sample_type is Time, sampling will be performed at the specified time interval in seconds.
	// Sampling interval. If `sample_type` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sample_type` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval *float64 `json:"sampleInterval,omitempty" tf:"sample_interval,omitempty"`

	// Sampling type. Valid values: Percent, Time. Percent: by percent. Time: by time interval.
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType *string `json:"sampleType,omitempty" tf:"sample_type,omitempty"`

	// The VOD application ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`

	// Template type, value range:
	// Template type, value range:
	// - Preset: system preset template;
	// - Custom: user-defined templates.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Last modified time of template in ISO date format.
	// Last modified time of template in ISO date format.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// Maximum value of the width (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both width and height are 0, the resolution will be the same as that of the source video; If width is 0, but height is not 0, width will be proportionally scaled; If width is not 0, but height is 0, height will be proportionally scaled; If both width and height are not 0, the custom resolution will be used. Default value: 0.
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

type ImageSpriteTemplateParameters struct {

	// Subimage column count of an image sprite.
	// Subimage column count of an image sprite.
	// +kubebuilder:validation:Optional
	ColumnCount *float64 `json:"columnCount,omitempty" tf:"column_count,omitempty"`

	// Template description. Length limit: 256 characters.
	// Template description. Length limit: 256 characters.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: stretch: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; black: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: black.
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	// +kubebuilder:validation:Optional
	FillType *string `json:"fillType,omitempty" tf:"fill_type,omitempty"`

	// Image format, Valid values:
	// Image format, Valid values:
	// - jpg: jpg format;
	// - png: png format;
	// - webp: webp format;
	// Default value: jpg.
	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// Maximum value of the height (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both width and height are 0, the resolution will be the same as that of the source video; If width is 0, but height is not 0, width will be proportionally scaled; If width is not 0, but height is 0, height will be proportionally scaled; If both width and height are not 0, the custom resolution will be used. Default value: 0.
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	// +kubebuilder:validation:Optional
	Height *float64 `json:"height,omitempty" tf:"height,omitempty"`

	// Name of a time point screen capturing template. Length limit: 64 characters.
	// Name of a time point screen capturing template. Length limit: 64 characters.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resolution adaption. Valid values: true,false. true: enabled. In this case, width represents the long side of a video, while height the short side; false: disabled. In this case, width represents the width of a video, while height the height. Default value: true.
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	// +kubebuilder:validation:Optional
	ResolutionAdaptive *bool `json:"resolutionAdaptive,omitempty" tf:"resolution_adaptive,omitempty"`

	// Subimage row count of an image sprite.
	// Subimage row count of an image sprite.
	// +kubebuilder:validation:Optional
	RowCount *float64 `json:"rowCount,omitempty" tf:"row_count,omitempty"`

	// Sampling interval. If sample_type is Percent, sampling will be performed at an interval of the specified percentage. If sample_type is Time, sampling will be performed at the specified time interval in seconds.
	// Sampling interval. If `sample_type` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sample_type` is `Time`, sampling will be performed at the specified time interval in seconds.
	// +kubebuilder:validation:Optional
	SampleInterval *float64 `json:"sampleInterval,omitempty" tf:"sample_interval,omitempty"`

	// Sampling type. Valid values: Percent, Time. Percent: by percent. Time: by time interval.
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	// +kubebuilder:validation:Optional
	SampleType *string `json:"sampleType,omitempty" tf:"sample_type,omitempty"`

	// The VOD application ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
	// +kubebuilder:validation:Optional
	SubAppID *float64 `json:"subAppId,omitempty" tf:"sub_app_id,omitempty"`

	// Maximum value of the width (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both width and height are 0, the resolution will be the same as that of the source video; If width is 0, but height is not 0, width will be proportionally scaled; If width is not 0, but height is 0, height will be proportionally scaled; If both width and height are not 0, the custom resolution will be used. Default value: 0.
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	// +kubebuilder:validation:Optional
	Width *float64 `json:"width,omitempty" tf:"width,omitempty"`
}

// ImageSpriteTemplateSpec defines the desired state of ImageSpriteTemplate
type ImageSpriteTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageSpriteTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageSpriteTemplateInitParameters `json:"initProvider,omitempty"`
}

// ImageSpriteTemplateStatus defines the observed state of ImageSpriteTemplate.
type ImageSpriteTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageSpriteTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageSpriteTemplate is the Schema for the ImageSpriteTemplates API. Provide a resource to create a VOD image sprite template.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ImageSpriteTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.columnCount) || (has(self.initProvider) && has(self.initProvider.columnCount))",message="spec.forProvider.columnCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rowCount) || (has(self.initProvider) && has(self.initProvider.rowCount))",message="spec.forProvider.rowCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sampleInterval) || (has(self.initProvider) && has(self.initProvider.sampleInterval))",message="spec.forProvider.sampleInterval is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sampleType) || (has(self.initProvider) && has(self.initProvider.sampleType))",message="spec.forProvider.sampleType is a required parameter"
	Spec   ImageSpriteTemplateSpec   `json:"spec"`
	Status ImageSpriteTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageSpriteTemplateList contains a list of ImageSpriteTemplates
type ImageSpriteTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageSpriteTemplate `json:"items"`
}

// Repository type metadata.
var (
	ImageSpriteTemplate_Kind             = "ImageSpriteTemplate"
	ImageSpriteTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageSpriteTemplate_Kind}.String()
	ImageSpriteTemplate_KindAPIVersion   = ImageSpriteTemplate_Kind + "." + CRDGroupVersion.String()
	ImageSpriteTemplate_GroupVersionKind = CRDGroupVersion.WithKind(ImageSpriteTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageSpriteTemplate{}, &ImageSpriteTemplateList{})
}
