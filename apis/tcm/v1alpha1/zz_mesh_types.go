// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApmInitParameters struct {

	// Whether enable APM.
	// Whether enable APM.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Instance id of the APM.
	// Instance id of the APM.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ApmObservation struct {

	// Whether enable APM.
	// Whether enable APM.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Instance id of the APM.
	// Instance id of the APM.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ApmParameters struct {

	// Whether enable APM.
	// Whether enable APM.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable" tf:"enable,omitempty"`

	// Instance id of the APM.
	// Instance id of the APM.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ConfigInitParameters struct {

	// Sidecar inject configuration.
	// Sidecar inject configuration.
	Inject []InjectInitParameters `json:"inject,omitempty" tf:"inject,omitempty"`

	// Istio configuration.
	// Istio configuration.
	Istio []IstioInitParameters `json:"istio,omitempty" tf:"istio,omitempty"`

	// Prometheus configuration.
	// Prometheus configuration.
	Prometheus []PrometheusInitParameters `json:"prometheus,omitempty" tf:"prometheus,omitempty"`

	// Default sidecar requests and limits.
	// Default sidecar requests and limits.
	SidecarResources []SidecarResourcesInitParameters `json:"sidecarResources,omitempty" tf:"sidecar_resources,omitempty"`

	// Tracing config.
	// Tracing config.
	Tracing []ConfigTracingInitParameters `json:"tracing,omitempty" tf:"tracing,omitempty"`
}

type ConfigObservation struct {

	// Sidecar inject configuration.
	// Sidecar inject configuration.
	Inject []InjectObservation `json:"inject,omitempty" tf:"inject,omitempty"`

	// Istio configuration.
	// Istio configuration.
	Istio []IstioObservation `json:"istio,omitempty" tf:"istio,omitempty"`

	// Prometheus configuration.
	// Prometheus configuration.
	Prometheus []PrometheusObservation `json:"prometheus,omitempty" tf:"prometheus,omitempty"`

	// Default sidecar requests and limits.
	// Default sidecar requests and limits.
	SidecarResources []SidecarResourcesObservation `json:"sidecarResources,omitempty" tf:"sidecar_resources,omitempty"`

	// Tracing config.
	// Tracing config.
	Tracing []ConfigTracingObservation `json:"tracing,omitempty" tf:"tracing,omitempty"`
}

type ConfigParameters struct {

	// Sidecar inject configuration.
	// Sidecar inject configuration.
	// +kubebuilder:validation:Optional
	Inject []InjectParameters `json:"inject,omitempty" tf:"inject,omitempty"`

	// Istio configuration.
	// Istio configuration.
	// +kubebuilder:validation:Optional
	Istio []IstioParameters `json:"istio,omitempty" tf:"istio,omitempty"`

	// Prometheus configuration.
	// Prometheus configuration.
	// +kubebuilder:validation:Optional
	Prometheus []PrometheusParameters `json:"prometheus,omitempty" tf:"prometheus,omitempty"`

	// Default sidecar requests and limits.
	// Default sidecar requests and limits.
	// +kubebuilder:validation:Optional
	SidecarResources []SidecarResourcesParameters `json:"sidecarResources,omitempty" tf:"sidecar_resources,omitempty"`

	// Tracing config.
	// Tracing config.
	// +kubebuilder:validation:Optional
	Tracing []ConfigTracingParameters `json:"tracing,omitempty" tf:"tracing,omitempty"`
}

type ConfigTracingInitParameters struct {

	// APM config.
	// APM config.
	Apm []TracingApmInitParameters `json:"apm,omitempty" tf:"apm,omitempty"`

	// Whether enable APM.
	// Whether enable tracing.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Tracing sampling, 0.0-1.0.
	// Tracing sampling, 0.0-1.0.
	Sampling *float64 `json:"sampling,omitempty" tf:"sampling,omitempty"`

	// Third party zipkin config.
	// Third party zipkin config.
	Zipkin []TracingZipkinInitParameters `json:"zipkin,omitempty" tf:"zipkin,omitempty"`
}

type ConfigTracingObservation struct {

	// APM config.
	// APM config.
	Apm []TracingApmObservation `json:"apm,omitempty" tf:"apm,omitempty"`

	// Whether enable APM.
	// Whether enable tracing.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Tracing sampling, 0.0-1.0.
	// Tracing sampling, 0.0-1.0.
	Sampling *float64 `json:"sampling,omitempty" tf:"sampling,omitempty"`

	// Third party zipkin config.
	// Third party zipkin config.
	Zipkin []TracingZipkinObservation `json:"zipkin,omitempty" tf:"zipkin,omitempty"`
}

type ConfigTracingParameters struct {

	// APM config.
	// APM config.
	// +kubebuilder:validation:Optional
	Apm []TracingApmParameters `json:"apm,omitempty" tf:"apm,omitempty"`

	// Whether enable APM.
	// Whether enable tracing.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Tracing sampling, 0.0-1.0.
	// Tracing sampling, 0.0-1.0.
	// +kubebuilder:validation:Optional
	Sampling *float64 `json:"sampling,omitempty" tf:"sampling,omitempty"`

	// Third party zipkin config.
	// Third party zipkin config.
	// +kubebuilder:validation:Optional
	Zipkin []TracingZipkinParameters `json:"zipkin,omitempty" tf:"zipkin,omitempty"`
}

type CustomPromInitParameters struct {

	// Authentication type of the prometheus.
	// Authentication type of the prometheus.
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Whether it is public address, default false.
	// Whether it is public address, default false.
	IsPublicAddr *bool `json:"isPublicAddr,omitempty" tf:"is_public_addr,omitempty"`

	// Password of the prometheus, used in basic authentication type.
	// Password of the prometheus, used in basic authentication type.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Url of the prometheus.
	// Url of the prometheus.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Username of the prometheus, used in basic authentication type.
	// Username of the prometheus, used in basic authentication type.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Vpc id.
	// Vpc id.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type CustomPromObservation struct {

	// Authentication type of the prometheus.
	// Authentication type of the prometheus.
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// Whether it is public address, default false.
	// Whether it is public address, default false.
	IsPublicAddr *bool `json:"isPublicAddr,omitempty" tf:"is_public_addr,omitempty"`

	// Password of the prometheus, used in basic authentication type.
	// Password of the prometheus, used in basic authentication type.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Url of the prometheus.
	// Url of the prometheus.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Username of the prometheus, used in basic authentication type.
	// Username of the prometheus, used in basic authentication type.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Vpc id.
	// Vpc id.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type CustomPromParameters struct {

	// Authentication type of the prometheus.
	// Authentication type of the prometheus.
	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType" tf:"auth_type,omitempty"`

	// Whether it is public address, default false.
	// Whether it is public address, default false.
	// +kubebuilder:validation:Optional
	IsPublicAddr *bool `json:"isPublicAddr,omitempty" tf:"is_public_addr,omitempty"`

	// Password of the prometheus, used in basic authentication type.
	// Password of the prometheus, used in basic authentication type.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Url of the prometheus.
	// Url of the prometheus.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// Username of the prometheus, used in basic authentication type.
	// Username of the prometheus, used in basic authentication type.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Vpc id.
	// Vpc id.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type InjectInitParameters struct {

	// IP ranges that should not be proxied.
	// IP ranges that should not be proxied.
	ExcludeIPRanges []*string `json:"excludeIpRanges,omitempty" tf:"exclude_ip_ranges,omitempty"`

	// Let istio-proxy(sidecar) start first, before app container.
	// Let istio-proxy(sidecar) start first, before app container.
	HoldApplicationUntilProxyStarts *bool `json:"holdApplicationUntilProxyStarts,omitempty" tf:"hold_application_until_proxy_starts,omitempty"`

	// Let istio-proxy(sidecar) stop last, after app container.
	// Let istio-proxy(sidecar) stop last, after app container.
	HoldProxyUntilApplicationEnds *bool `json:"holdProxyUntilApplicationEnds,omitempty" tf:"hold_proxy_until_application_ends,omitempty"`
}

type InjectObservation struct {

	// IP ranges that should not be proxied.
	// IP ranges that should not be proxied.
	ExcludeIPRanges []*string `json:"excludeIpRanges,omitempty" tf:"exclude_ip_ranges,omitempty"`

	// Let istio-proxy(sidecar) start first, before app container.
	// Let istio-proxy(sidecar) start first, before app container.
	HoldApplicationUntilProxyStarts *bool `json:"holdApplicationUntilProxyStarts,omitempty" tf:"hold_application_until_proxy_starts,omitempty"`

	// Let istio-proxy(sidecar) stop last, after app container.
	// Let istio-proxy(sidecar) stop last, after app container.
	HoldProxyUntilApplicationEnds *bool `json:"holdProxyUntilApplicationEnds,omitempty" tf:"hold_proxy_until_application_ends,omitempty"`
}

type InjectParameters struct {

	// IP ranges that should not be proxied.
	// IP ranges that should not be proxied.
	// +kubebuilder:validation:Optional
	ExcludeIPRanges []*string `json:"excludeIpRanges,omitempty" tf:"exclude_ip_ranges,omitempty"`

	// Let istio-proxy(sidecar) start first, before app container.
	// Let istio-proxy(sidecar) start first, before app container.
	// +kubebuilder:validation:Optional
	HoldApplicationUntilProxyStarts *bool `json:"holdApplicationUntilProxyStarts,omitempty" tf:"hold_application_until_proxy_starts,omitempty"`

	// Let istio-proxy(sidecar) stop last, after app container.
	// Let istio-proxy(sidecar) stop last, after app container.
	// +kubebuilder:validation:Optional
	HoldProxyUntilApplicationEnds *bool `json:"holdProxyUntilApplicationEnds,omitempty" tf:"hold_proxy_until_application_ends,omitempty"`
}

type IstioInitParameters struct {

	// Disable http retry.
	// Disable http retry.
	DisableHTTPRetry *bool `json:"disableHttpRetry,omitempty" tf:"disable_http_retry,omitempty"`

	// Disable policy checks.
	// Disable policy checks.
	DisablePolicyChecks *bool `json:"disablePolicyChecks,omitempty" tf:"disable_policy_checks,omitempty"`

	// Enable HTTP/1.0 support.
	// Enable HTTP/1.0 support.
	EnablePilotHTTP *bool `json:"enablePilotHttp,omitempty" tf:"enable_pilot_http,omitempty"`

	// Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
	// Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
	OutboundTrafficPolicy *string `json:"outboundTrafficPolicy,omitempty" tf:"outbound_traffic_policy,omitempty"`

	// SmartDNS configuration.
	// SmartDNS configuration.
	SmartDNS []SmartDNSInitParameters `json:"smartDns,omitempty" tf:"smart_dns,omitempty"`

	// Tracing config.
	// Tracing config(Deprecated, please use MeshConfig.Tracing for configuration).
	Tracing []TracingInitParameters `json:"tracing,omitempty" tf:"tracing,omitempty"`
}

type IstioObservation struct {

	// Disable http retry.
	// Disable http retry.
	DisableHTTPRetry *bool `json:"disableHttpRetry,omitempty" tf:"disable_http_retry,omitempty"`

	// Disable policy checks.
	// Disable policy checks.
	DisablePolicyChecks *bool `json:"disablePolicyChecks,omitempty" tf:"disable_policy_checks,omitempty"`

	// Enable HTTP/1.0 support.
	// Enable HTTP/1.0 support.
	EnablePilotHTTP *bool `json:"enablePilotHttp,omitempty" tf:"enable_pilot_http,omitempty"`

	// Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
	// Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
	OutboundTrafficPolicy *string `json:"outboundTrafficPolicy,omitempty" tf:"outbound_traffic_policy,omitempty"`

	// SmartDNS configuration.
	// SmartDNS configuration.
	SmartDNS []SmartDNSObservation `json:"smartDns,omitempty" tf:"smart_dns,omitempty"`

	// Tracing config.
	// Tracing config(Deprecated, please use MeshConfig.Tracing for configuration).
	Tracing []TracingObservation `json:"tracing,omitempty" tf:"tracing,omitempty"`
}

type IstioParameters struct {

	// Disable http retry.
	// Disable http retry.
	// +kubebuilder:validation:Optional
	DisableHTTPRetry *bool `json:"disableHttpRetry,omitempty" tf:"disable_http_retry,omitempty"`

	// Disable policy checks.
	// Disable policy checks.
	// +kubebuilder:validation:Optional
	DisablePolicyChecks *bool `json:"disablePolicyChecks,omitempty" tf:"disable_policy_checks,omitempty"`

	// Enable HTTP/1.0 support.
	// Enable HTTP/1.0 support.
	// +kubebuilder:validation:Optional
	EnablePilotHTTP *bool `json:"enablePilotHttp,omitempty" tf:"enable_pilot_http,omitempty"`

	// Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
	// Outbound traffic policy, REGISTRY_ONLY or ALLOW_ANY, see https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig-OutboundTrafficPolicy-Mode.
	// +kubebuilder:validation:Optional
	OutboundTrafficPolicy *string `json:"outboundTrafficPolicy" tf:"outbound_traffic_policy,omitempty"`

	// SmartDNS configuration.
	// SmartDNS configuration.
	// +kubebuilder:validation:Optional
	SmartDNS []SmartDNSParameters `json:"smartDns,omitempty" tf:"smart_dns,omitempty"`

	// Tracing config.
	// Tracing config(Deprecated, please use MeshConfig.Tracing for configuration).
	// +kubebuilder:validation:Optional
	Tracing []TracingParameters `json:"tracing,omitempty" tf:"tracing,omitempty"`
}

type LimitsInitParameters struct {

	// Resource type name, cpu/memory.
	// Resource type name, `cpu/memory`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource quantity, example: cpu-100m, memory-1Gi.
	// Resource quantity, example: cpu-`100m`, memory-`1Gi`.
	Quantity *string `json:"quantity,omitempty" tf:"quantity,omitempty"`
}

type LimitsObservation struct {

	// Resource type name, cpu/memory.
	// Resource type name, `cpu/memory`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource quantity, example: cpu-100m, memory-1Gi.
	// Resource quantity, example: cpu-`100m`, memory-`1Gi`.
	Quantity *string `json:"quantity,omitempty" tf:"quantity,omitempty"`
}

type LimitsParameters struct {

	// Resource type name, cpu/memory.
	// Resource type name, `cpu/memory`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource quantity, example: cpu-100m, memory-1Gi.
	// Resource quantity, example: cpu-`100m`, memory-`1Gi`.
	// +kubebuilder:validation:Optional
	Quantity *string `json:"quantity,omitempty" tf:"quantity,omitempty"`
}

type MeshInitParameters struct {

	// Mesh configuration.
	// Mesh configuration.
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Mesh name.
	// Mesh name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Mesh ID.
	// Mesh ID.
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`

	// Mesh version.
	// Mesh version.
	MeshVersion *string `json:"meshVersion,omitempty" tf:"mesh_version,omitempty"`

	// A list of associated tags.
	// A list of associated tags.
	TagList []TagListInitParameters `json:"tagList,omitempty" tf:"tag_list,omitempty"`

	// Mesh type.
	// Mesh type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MeshObservation struct {

	// Mesh configuration.
	// Mesh configuration.
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Mesh name.
	// Mesh name.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Mesh ID.
	// Mesh ID.
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`

	// Mesh version.
	// Mesh version.
	MeshVersion *string `json:"meshVersion,omitempty" tf:"mesh_version,omitempty"`

	// A list of associated tags.
	// A list of associated tags.
	TagList []TagListObservation `json:"tagList,omitempty" tf:"tag_list,omitempty"`

	// Mesh type.
	// Mesh type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MeshParameters struct {

	// Mesh configuration.
	// Mesh configuration.
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Mesh name.
	// Mesh name.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Mesh ID.
	// Mesh ID.
	// +kubebuilder:validation:Optional
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`

	// Mesh version.
	// Mesh version.
	// +kubebuilder:validation:Optional
	MeshVersion *string `json:"meshVersion,omitempty" tf:"mesh_version,omitempty"`

	// A list of associated tags.
	// A list of associated tags.
	// +kubebuilder:validation:Optional
	TagList []TagListParameters `json:"tagList,omitempty" tf:"tag_list,omitempty"`

	// Mesh type.
	// Mesh type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrometheusInitParameters struct {

	// Custom prometheus.
	// Custom prometheus.
	CustomProm []CustomPromInitParameters `json:"customProm,omitempty" tf:"custom_prom,omitempty"`

	// Instance id of the APM.
	// Instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Subnet id.
	// Subnet id.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Vpc id.
	// Vpc id.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PrometheusObservation struct {

	// Custom prometheus.
	// Custom prometheus.
	CustomProm []CustomPromObservation `json:"customProm,omitempty" tf:"custom_prom,omitempty"`

	// Instance id of the APM.
	// Instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Subnet id.
	// Subnet id.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Vpc id.
	// Vpc id.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type PrometheusParameters struct {

	// Custom prometheus.
	// Custom prometheus.
	// +kubebuilder:validation:Optional
	CustomProm []CustomPromParameters `json:"customProm,omitempty" tf:"custom_prom,omitempty"`

	// Instance id of the APM.
	// Instance id.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Subnet id.
	// Subnet id.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Vpc id.
	// Vpc id.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type RequestsInitParameters struct {

	// Resource type name, cpu/memory.
	// Resource type name, `cpu/memory`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource quantity, example: cpu-100m, memory-1Gi.
	// Resource quantity, example: cpu-`100m`, memory-`1Gi`.
	Quantity *string `json:"quantity,omitempty" tf:"quantity,omitempty"`
}

type RequestsObservation struct {

	// Resource type name, cpu/memory.
	// Resource type name, `cpu/memory`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource quantity, example: cpu-100m, memory-1Gi.
	// Resource quantity, example: cpu-`100m`, memory-`1Gi`.
	Quantity *string `json:"quantity,omitempty" tf:"quantity,omitempty"`
}

type RequestsParameters struct {

	// Resource type name, cpu/memory.
	// Resource type name, `cpu/memory`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resource quantity, example: cpu-100m, memory-1Gi.
	// Resource quantity, example: cpu-`100m`, memory-`1Gi`.
	// +kubebuilder:validation:Optional
	Quantity *string `json:"quantity,omitempty" tf:"quantity,omitempty"`
}

type SidecarResourcesInitParameters struct {

	// Sidecar limits.
	// Sidecar limits.
	Limits []LimitsInitParameters `json:"limits,omitempty" tf:"limits,omitempty"`

	// Sidecar requests.
	// Sidecar requests.
	Requests []RequestsInitParameters `json:"requests,omitempty" tf:"requests,omitempty"`
}

type SidecarResourcesObservation struct {

	// Sidecar limits.
	// Sidecar limits.
	Limits []LimitsObservation `json:"limits,omitempty" tf:"limits,omitempty"`

	// Sidecar requests.
	// Sidecar requests.
	Requests []RequestsObservation `json:"requests,omitempty" tf:"requests,omitempty"`
}

type SidecarResourcesParameters struct {

	// Sidecar limits.
	// Sidecar limits.
	// +kubebuilder:validation:Optional
	Limits []LimitsParameters `json:"limits,omitempty" tf:"limits,omitempty"`

	// Sidecar requests.
	// Sidecar requests.
	// +kubebuilder:validation:Optional
	Requests []RequestsParameters `json:"requests,omitempty" tf:"requests,omitempty"`
}

type SmartDNSInitParameters struct {

	// Enable auto allocate address.
	// Enable auto allocate address.
	IstioMetaDNSAutoAllocate *bool `json:"istioMetaDnsAutoAllocate,omitempty" tf:"istio_meta_dns_auto_allocate,omitempty"`

	// Enable dns proxy.
	// Enable dns proxy.
	IstioMetaDNSCapture *bool `json:"istioMetaDnsCapture,omitempty" tf:"istio_meta_dns_capture,omitempty"`
}

type SmartDNSObservation struct {

	// Enable auto allocate address.
	// Enable auto allocate address.
	IstioMetaDNSAutoAllocate *bool `json:"istioMetaDnsAutoAllocate,omitempty" tf:"istio_meta_dns_auto_allocate,omitempty"`

	// Enable dns proxy.
	// Enable dns proxy.
	IstioMetaDNSCapture *bool `json:"istioMetaDnsCapture,omitempty" tf:"istio_meta_dns_capture,omitempty"`
}

type SmartDNSParameters struct {

	// Enable auto allocate address.
	// Enable auto allocate address.
	// +kubebuilder:validation:Optional
	IstioMetaDNSAutoAllocate *bool `json:"istioMetaDnsAutoAllocate,omitempty" tf:"istio_meta_dns_auto_allocate,omitempty"`

	// Enable dns proxy.
	// Enable dns proxy.
	// +kubebuilder:validation:Optional
	IstioMetaDNSCapture *bool `json:"istioMetaDnsCapture,omitempty" tf:"istio_meta_dns_capture,omitempty"`
}

type TagListInitParameters struct {

	// Tag key.
	// Tag key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Passthrough to other related product.
	// Passthrough to other related product.
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`

	// Tag value.
	// Tag value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagListObservation struct {

	// Tag key.
	// Tag key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Passthrough to other related product.
	// Passthrough to other related product.
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`

	// Tag value.
	// Tag value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagListParameters struct {

	// Tag key.
	// Tag key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Passthrough to other related product.
	// Passthrough to other related product.
	// +kubebuilder:validation:Optional
	Passthrough *bool `json:"passthrough,omitempty" tf:"passthrough,omitempty"`

	// Tag value.
	// Tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TracingApmInitParameters struct {

	// Whether enable APM.
	// Whether enable APM.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Instance id of the APM.
	// Instance id of the APM.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TracingApmObservation struct {

	// Whether enable APM.
	// Whether enable APM.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Instance id of the APM.
	// Instance id of the APM.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TracingApmParameters struct {

	// Whether enable APM.
	// Whether enable APM.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Instance id of the APM.
	// Instance id of the APM.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Region.
	// Region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type TracingInitParameters struct {

	// APM config.
	// APM config.
	Apm []ApmInitParameters `json:"apm,omitempty" tf:"apm,omitempty"`

	// Whether enable APM.
	// Whether enable tracing.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Tracing sampling, 0.0-1.0.
	// Tracing sampling, 0.0-1.0.
	Sampling *float64 `json:"sampling,omitempty" tf:"sampling,omitempty"`

	// Third party zipkin config.
	// Third party zipkin config.
	Zipkin []ZipkinInitParameters `json:"zipkin,omitempty" tf:"zipkin,omitempty"`
}

type TracingObservation struct {

	// APM config.
	// APM config.
	Apm []ApmObservation `json:"apm,omitempty" tf:"apm,omitempty"`

	// Whether enable APM.
	// Whether enable tracing.
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Tracing sampling, 0.0-1.0.
	// Tracing sampling, 0.0-1.0.
	Sampling *float64 `json:"sampling,omitempty" tf:"sampling,omitempty"`

	// Third party zipkin config.
	// Third party zipkin config.
	Zipkin []ZipkinObservation `json:"zipkin,omitempty" tf:"zipkin,omitempty"`
}

type TracingParameters struct {

	// APM config.
	// APM config.
	// +kubebuilder:validation:Optional
	Apm []ApmParameters `json:"apm,omitempty" tf:"apm,omitempty"`

	// Whether enable APM.
	// Whether enable tracing.
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Tracing sampling, 0.0-1.0.
	// Tracing sampling, 0.0-1.0.
	// +kubebuilder:validation:Optional
	Sampling *float64 `json:"sampling,omitempty" tf:"sampling,omitempty"`

	// Third party zipkin config.
	// Third party zipkin config.
	// +kubebuilder:validation:Optional
	Zipkin []ZipkinParameters `json:"zipkin,omitempty" tf:"zipkin,omitempty"`
}

type TracingZipkinInitParameters struct {

	// Zipkin address.
	// Zipkin address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`
}

type TracingZipkinObservation struct {

	// Zipkin address.
	// Zipkin address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`
}

type TracingZipkinParameters struct {

	// Zipkin address.
	// Zipkin address.
	// +kubebuilder:validation:Optional
	Address *string `json:"address" tf:"address,omitempty"`
}

type ZipkinInitParameters struct {

	// Zipkin address.
	// Zipkin address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`
}

type ZipkinObservation struct {

	// Zipkin address.
	// Zipkin address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`
}

type ZipkinParameters struct {

	// Zipkin address.
	// Zipkin address.
	// +kubebuilder:validation:Optional
	Address *string `json:"address" tf:"address,omitempty"`
}

// MeshSpec defines the desired state of Mesh
type MeshSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MeshParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MeshInitParameters `json:"initProvider,omitempty"`
}

// MeshStatus defines the observed state of Mesh.
type MeshStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MeshObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Mesh is the Schema for the Meshs API. Provides a resource to create a tcm mesh
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Mesh struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.config) || (has(self.initProvider) && has(self.initProvider.config))",message="spec.forProvider.config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meshVersion) || (has(self.initProvider) && has(self.initProvider.meshVersion))",message="spec.forProvider.meshVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MeshSpec   `json:"spec"`
	Status MeshStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MeshList contains a list of Meshs
type MeshList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Mesh `json:"items"`
}

// Repository type metadata.
var (
	Mesh_Kind             = "Mesh"
	Mesh_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Mesh_Kind}.String()
	Mesh_KindAPIVersion   = Mesh_Kind + "." + CRDGroupVersion.String()
	Mesh_GroupVersionKind = CRDGroupVersion.WithKind(Mesh_Kind)
)

func init() {
	SchemeBuilder.Register(&Mesh{}, &MeshList{})
}
