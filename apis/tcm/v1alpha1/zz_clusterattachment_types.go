// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterAttachmentInitParameters struct {

	// Cluster list.
	// Cluster list.
	ClusterList []ClusterListInitParameters `json:"clusterList,omitempty" tf:"cluster_list,omitempty"`

	// Mesh ID.
	// Mesh ID.
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`
}

type ClusterAttachmentObservation struct {

	// Cluster list.
	// Cluster list.
	ClusterList []ClusterListObservation `json:"clusterList,omitempty" tf:"cluster_list,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Mesh ID.
	// Mesh ID.
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`
}

type ClusterAttachmentParameters struct {

	// Cluster list.
	// Cluster list.
	// +kubebuilder:validation:Optional
	ClusterList []ClusterListParameters `json:"clusterList,omitempty" tf:"cluster_list,omitempty"`

	// Mesh ID.
	// Mesh ID.
	// +kubebuilder:validation:Optional
	MeshID *string `json:"meshId,omitempty" tf:"mesh_id,omitempty"`
}

type ClusterListInitParameters struct {

	// TKE Cluster id.
	// TKE Cluster id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// TKE cluster region.
	// TKE cluster region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Cluster role in mesh, REMOTE or MASTER.
	// Cluster role in mesh, REMOTE or MASTER.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Subnet id, only needed if it's standalone mesh.
	// Subnet id, only needed if it&#39;s standalone mesh.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Cluster type.
	// Cluster type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Cluster's VpcId.
	// Cluster&#39;s VpcId.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ClusterListObservation struct {

	// TKE Cluster id.
	// TKE Cluster id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// TKE cluster region.
	// TKE cluster region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Cluster role in mesh, REMOTE or MASTER.
	// Cluster role in mesh, REMOTE or MASTER.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Subnet id, only needed if it's standalone mesh.
	// Subnet id, only needed if it&#39;s standalone mesh.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Cluster type.
	// Cluster type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Cluster's VpcId.
	// Cluster&#39;s VpcId.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type ClusterListParameters struct {

	// TKE Cluster id.
	// TKE Cluster id.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// TKE cluster region.
	// TKE cluster region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// Cluster role in mesh, REMOTE or MASTER.
	// Cluster role in mesh, REMOTE or MASTER.
	// +kubebuilder:validation:Optional
	Role *string `json:"role" tf:"role,omitempty"`

	// Subnet id, only needed if it's standalone mesh.
	// Subnet id, only needed if it&#39;s standalone mesh.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Cluster type.
	// Cluster type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Cluster's VpcId.
	// Cluster&#39;s VpcId.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

// ClusterAttachmentSpec defines the desired state of ClusterAttachment
type ClusterAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterAttachmentInitParameters `json:"initProvider,omitempty"`
}

// ClusterAttachmentStatus defines the observed state of ClusterAttachment.
type ClusterAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterAttachment is the Schema for the ClusterAttachments API. Provides a resource to create a tcm cluster_attachment
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ClusterAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.meshId) || (has(self.initProvider) && has(self.initProvider.meshId))",message="spec.forProvider.meshId is a required parameter"
	Spec   ClusterAttachmentSpec   `json:"spec"`
	Status ClusterAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterAttachmentList contains a list of ClusterAttachments
type ClusterAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterAttachment `json:"items"`
}

// Repository type metadata.
var (
	ClusterAttachment_Kind             = "ClusterAttachment"
	ClusterAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterAttachment_Kind}.String()
	ClusterAttachment_KindAPIVersion   = ClusterAttachment_Kind + "." + CRDGroupVersion.String()
	ClusterAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ClusterAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterAttachment{}, &ClusterAttachmentList{})
}
