// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessRuleInitParameters struct {

	// A single IP or a single IP address range such as 10.1.10.11 or 10.10.1.0/24 indicates that all IPs are allowed. Please note that the IP entered should be CVM's private IP.
	// A single IP or a single IP address range such as 10.1.10.11 or 10.10.1.0/24 indicates that all IPs are allowed. Please note that the IP entered should be CVM's private IP.
	AuthClientIP *string `json:"authClientIp,omitempty" tf:"auth_client_ip,omitempty"`

	// The priority level of rule. Valid value ranges: (1~100). 1 indicates the highest priority.
	// The priority level of rule. Valid value ranges: (1~100). `1` indicates the highest priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Read and write permissions. Valid values are RO and RW. and default is RO.
	// Read and write permissions. Valid values are `RO` and `RW`. and default is `RO`.
	RwPermission *string `json:"rwPermission,omitempty" tf:"rw_permission,omitempty"`

	// The permissions of accessing users. Valid values are all_squash, no_all_squash, root_squash and no_root_squash. and default is root_squash. all_squash indicates that all access users are mapped as anonymous users or user groups; no_all_squash indicates that access users will match local users first and be mapped to anonymous users or user groups after matching failed; root_squash indicates that map access root users to anonymous users or user groups; no_root_squash indicates that access root users keep root account permission.
	// The permissions of accessing users. Valid values are `all_squash`, `no_all_squash`, `root_squash` and `no_root_squash`. and default is `root_squash`. `all_squash` indicates that all access users are mapped as anonymous users or user groups; `no_all_squash` indicates that access users will match local users first and be mapped to anonymous users or user groups after matching failed; `root_squash` indicates that map access root users to anonymous users or user groups; `no_root_squash` indicates that access root users keep root account permission.
	UserPermission *string `json:"userPermission,omitempty" tf:"user_permission,omitempty"`
}

type AccessRuleObservation struct {

	// ID of a access group.
	// ID of a access group.
	AccessGroupID *string `json:"accessGroupId,omitempty" tf:"access_group_id,omitempty"`

	// A single IP or a single IP address range such as 10.1.10.11 or 10.10.1.0/24 indicates that all IPs are allowed. Please note that the IP entered should be CVM's private IP.
	// A single IP or a single IP address range such as 10.1.10.11 or 10.10.1.0/24 indicates that all IPs are allowed. Please note that the IP entered should be CVM's private IP.
	AuthClientIP *string `json:"authClientIp,omitempty" tf:"auth_client_ip,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The priority level of rule. Valid value ranges: (1~100). 1 indicates the highest priority.
	// The priority level of rule. Valid value ranges: (1~100). `1` indicates the highest priority.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Read and write permissions. Valid values are RO and RW. and default is RO.
	// Read and write permissions. Valid values are `RO` and `RW`. and default is `RO`.
	RwPermission *string `json:"rwPermission,omitempty" tf:"rw_permission,omitempty"`

	// The permissions of accessing users. Valid values are all_squash, no_all_squash, root_squash and no_root_squash. and default is root_squash. all_squash indicates that all access users are mapped as anonymous users or user groups; no_all_squash indicates that access users will match local users first and be mapped to anonymous users or user groups after matching failed; root_squash indicates that map access root users to anonymous users or user groups; no_root_squash indicates that access root users keep root account permission.
	// The permissions of accessing users. Valid values are `all_squash`, `no_all_squash`, `root_squash` and `no_root_squash`. and default is `root_squash`. `all_squash` indicates that all access users are mapped as anonymous users or user groups; `no_all_squash` indicates that access users will match local users first and be mapped to anonymous users or user groups after matching failed; `root_squash` indicates that map access root users to anonymous users or user groups; `no_root_squash` indicates that access root users keep root account permission.
	UserPermission *string `json:"userPermission,omitempty" tf:"user_permission,omitempty"`
}

type AccessRuleParameters struct {

	// ID of a access group.
	// ID of a access group.
	// +crossplane:generate:reference:type=AccessGroup
	// +kubebuilder:validation:Optional
	AccessGroupID *string `json:"accessGroupId,omitempty" tf:"access_group_id,omitempty"`

	// Reference to a AccessGroup to populate accessGroupId.
	// +kubebuilder:validation:Optional
	AccessGroupIDRef *v1.Reference `json:"accessGroupIdRef,omitempty" tf:"-"`

	// Selector for a AccessGroup to populate accessGroupId.
	// +kubebuilder:validation:Optional
	AccessGroupIDSelector *v1.Selector `json:"accessGroupIdSelector,omitempty" tf:"-"`

	// A single IP or a single IP address range such as 10.1.10.11 or 10.10.1.0/24 indicates that all IPs are allowed. Please note that the IP entered should be CVM's private IP.
	// A single IP or a single IP address range such as 10.1.10.11 or 10.10.1.0/24 indicates that all IPs are allowed. Please note that the IP entered should be CVM's private IP.
	// +kubebuilder:validation:Optional
	AuthClientIP *string `json:"authClientIp,omitempty" tf:"auth_client_ip,omitempty"`

	// The priority level of rule. Valid value ranges: (1~100). 1 indicates the highest priority.
	// The priority level of rule. Valid value ranges: (1~100). `1` indicates the highest priority.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Read and write permissions. Valid values are RO and RW. and default is RO.
	// Read and write permissions. Valid values are `RO` and `RW`. and default is `RO`.
	// +kubebuilder:validation:Optional
	RwPermission *string `json:"rwPermission,omitempty" tf:"rw_permission,omitempty"`

	// The permissions of accessing users. Valid values are all_squash, no_all_squash, root_squash and no_root_squash. and default is root_squash. all_squash indicates that all access users are mapped as anonymous users or user groups; no_all_squash indicates that access users will match local users first and be mapped to anonymous users or user groups after matching failed; root_squash indicates that map access root users to anonymous users or user groups; no_root_squash indicates that access root users keep root account permission.
	// The permissions of accessing users. Valid values are `all_squash`, `no_all_squash`, `root_squash` and `no_root_squash`. and default is `root_squash`. `all_squash` indicates that all access users are mapped as anonymous users or user groups; `no_all_squash` indicates that access users will match local users first and be mapped to anonymous users or user groups after matching failed; `root_squash` indicates that map access root users to anonymous users or user groups; `no_root_squash` indicates that access root users keep root account permission.
	// +kubebuilder:validation:Optional
	UserPermission *string `json:"userPermission,omitempty" tf:"user_permission,omitempty"`
}

// AccessRuleSpec defines the desired state of AccessRule
type AccessRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccessRuleInitParameters `json:"initProvider,omitempty"`
}

// AccessRuleStatus defines the observed state of AccessRule.
type AccessRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessRule is the Schema for the AccessRules API. Provides a resource to create a CFS access rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type AccessRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authClientIp) || (has(self.initProvider) && has(self.initProvider.authClientIp))",message="spec.forProvider.authClientIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.priority) || (has(self.initProvider) && has(self.initProvider.priority))",message="spec.forProvider.priority is a required parameter"
	Spec   AccessRuleSpec   `json:"spec"`
	Status AccessRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessRuleList contains a list of AccessRules
type AccessRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessRule `json:"items"`
}

// Repository type metadata.
var (
	AccessRule_Kind             = "AccessRule"
	AccessRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessRule_Kind}.String()
	AccessRule_KindAPIVersion   = AccessRule_Kind + "." + CRDGroupVersion.String()
	AccessRule_GroupVersionKind = CRDGroupVersion.WithKind(AccessRule_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessRule{}, &AccessRuleList{})
}
