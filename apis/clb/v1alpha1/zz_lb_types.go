// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LBInitParameters struct {

	// The type of the LB. Valid value: 'CLASSIC', 'APPLICATION'.
	// The type of the LB. Valid value: 'CLASSIC', 'APPLICATION'.
	Forward *string `json:"forward,omitempty" tf:"forward,omitempty"`

	// The name of the LB.
	// The name of the LB.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project id of the LB, unspecified or 0 stands for default project.
	// The project id of the LB, unspecified or 0 stands for default project.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The network type of the LB. Valid value: 'OPEN', 'INTERNAL'.
	// The network type of the LB. Valid value: 'OPEN', 'INTERNAL'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The VPC ID of the LB, unspecified or 0 stands for CVM basic network.
	// The VPC ID of the LB, unspecified or 0 stands for CVM basic network.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type LBObservation struct {

	// The type of the LB. Valid value: 'CLASSIC', 'APPLICATION'.
	// The type of the LB. Valid value: 'CLASSIC', 'APPLICATION'.
	Forward *string `json:"forward,omitempty" tf:"forward,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the LB.
	// The name of the LB.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project id of the LB, unspecified or 0 stands for default project.
	// The project id of the LB, unspecified or 0 stands for default project.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The status of the LB.
	// The status of the LB.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The network type of the LB. Valid value: 'OPEN', 'INTERNAL'.
	// The network type of the LB. Valid value: 'OPEN', 'INTERNAL'.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The VPC ID of the LB, unspecified or 0 stands for CVM basic network.
	// The VPC ID of the LB, unspecified or 0 stands for CVM basic network.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type LBParameters struct {

	// The type of the LB. Valid value: 'CLASSIC', 'APPLICATION'.
	// The type of the LB. Valid value: 'CLASSIC', 'APPLICATION'.
	// +kubebuilder:validation:Optional
	Forward *string `json:"forward,omitempty" tf:"forward,omitempty"`

	// The name of the LB.
	// The name of the LB.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The project id of the LB, unspecified or 0 stands for default project.
	// The project id of the LB, unspecified or 0 stands for default project.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The network type of the LB. Valid value: 'OPEN', 'INTERNAL'.
	// The network type of the LB. Valid value: 'OPEN', 'INTERNAL'.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The VPC ID of the LB, unspecified or 0 stands for CVM basic network.
	// The VPC ID of the LB, unspecified or 0 stands for CVM basic network.
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

// LBSpec defines the desired state of LB
type LBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LBParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LBInitParameters `json:"initProvider,omitempty"`
}

// LBStatus defines the observed state of LB.
type LBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LB is the Schema for the LBs API. Provides a Load Balancer resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type LB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   LBSpec   `json:"spec"`
	Status LBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LBList contains a list of LBs
type LBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LB `json:"items"`
}

// Repository type metadata.
var (
	LB_Kind             = "LB"
	LB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LB_Kind}.String()
	LB_KindAPIVersion   = LB_Kind + "." + CRDGroupVersion.String()
	LB_GroupVersionKind = CRDGroupVersion.WithKind(LB_Kind)
)

func init() {
	SchemeBuilder.Register(&LB{}, &LBList{})
}
