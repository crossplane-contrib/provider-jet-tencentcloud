// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpsInitParameters struct {

	// Snat IP.
	// Snat IP.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Subnet ID.
	// Subnet ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type IpsObservation struct {

	// Snat IP.
	// Snat IP.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Subnet ID.
	// Subnet ID.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type IpsParameters struct {

	// Snat IP.
	// Snat IP.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip" tf:"ip,omitempty"`

	// Subnet ID.
	// Subnet ID.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

type SnatIpInitParameters struct {

	// Snat IP address config.
	// Snat IP address config.
	Ips []IpsInitParameters `json:"ips,omitempty" tf:"ips,omitempty"`
}

type SnatIpObservation struct {

	// CLB instance ID.
	// CLB instance ID.
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Snat IP address config.
	// Snat IP address config.
	Ips []IpsObservation `json:"ips,omitempty" tf:"ips,omitempty"`
}

type SnatIpParameters struct {

	// CLB instance ID.
	// CLB instance ID.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// Reference to a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// Snat IP address config.
	// Snat IP address config.
	// +kubebuilder:validation:Optional
	Ips []IpsParameters `json:"ips,omitempty" tf:"ips,omitempty"`
}

// SnatIpSpec defines the desired state of SnatIp
type SnatIpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnatIpParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnatIpInitParameters `json:"initProvider,omitempty"`
}

// SnatIpStatus defines the observed state of SnatIp.
type SnatIpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnatIpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SnatIp is the Schema for the SnatIps API. Provide a resource to create a SnatIp of CLB instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type SnatIp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnatIpSpec   `json:"spec"`
	Status            SnatIpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnatIpList contains a list of SnatIps
type SnatIpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnatIp `json:"items"`
}

// Repository type metadata.
var (
	SnatIp_Kind             = "SnatIp"
	SnatIp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnatIp_Kind}.String()
	SnatIp_KindAPIVersion   = SnatIp_Kind + "." + CRDGroupVersion.String()
	SnatIp_GroupVersionKind = CRDGroupVersion.WithKind(SnatIp_Kind)
)

func init() {
	SchemeBuilder.Register(&SnatIp{}, &SnatIpList{})
}
