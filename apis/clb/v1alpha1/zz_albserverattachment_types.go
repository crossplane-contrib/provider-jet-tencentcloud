// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlbServerAttachmentInitParameters struct {

	// list of backend server.
	// list of backend server.
	Backends []BackendsInitParameters `json:"backends,omitempty" tf:"backends,omitempty"`

	// listener ID.
	// listener ID.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// loadbalancer ID.
	// loadbalancer ID.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// location ID, only support for layer 7 loadbalancer.
	// location ID, only support for layer 7 loadbalancer.
	LocationID *string `json:"locationId,omitempty" tf:"location_id,omitempty"`
}

type AlbServerAttachmentObservation struct {

	// list of backend server.
	// list of backend server.
	Backends []BackendsObservation `json:"backends,omitempty" tf:"backends,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// listener ID.
	// listener ID.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// loadbalancer ID.
	// loadbalancer ID.
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// location ID, only support for layer 7 loadbalancer.
	// location ID, only support for layer 7 loadbalancer.
	LocationID *string `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// The protocol type, http or tcp.
	// The protocol type, http or tcp.
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`
}

type AlbServerAttachmentParameters struct {

	// list of backend server.
	// list of backend server.
	// +kubebuilder:validation:Optional
	Backends []BackendsParameters `json:"backends,omitempty" tf:"backends,omitempty"`

	// listener ID.
	// listener ID.
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// loadbalancer ID.
	// loadbalancer ID.
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// location ID, only support for layer 7 loadbalancer.
	// location ID, only support for layer 7 loadbalancer.
	// +kubebuilder:validation:Optional
	LocationID *string `json:"locationId,omitempty" tf:"location_id,omitempty"`
}

type BackendsInitParameters struct {

	// A list backend instance ID (CVM instance ID).
	// A list backend instance ID (CVM instance ID).
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The port used by the backend server. Valid value range: [1-65535].
	// The port used by the backend server. Valid value range: [1-65535].
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BackendsObservation struct {

	// A list backend instance ID (CVM instance ID).
	// A list backend instance ID (CVM instance ID).
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The port used by the backend server. Valid value range: [1-65535].
	// The port used by the backend server. Valid value range: [1-65535].
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type BackendsParameters struct {

	// A list backend instance ID (CVM instance ID).
	// A list backend instance ID (CVM instance ID).
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// The port used by the backend server. Valid value range: [1-65535].
	// The port used by the backend server. Valid value range: [1-65535].
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	// Weight of the backend server. Valid value range: [0-100]. Default to 10.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// AlbServerAttachmentSpec defines the desired state of AlbServerAttachment
type AlbServerAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlbServerAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AlbServerAttachmentInitParameters `json:"initProvider,omitempty"`
}

// AlbServerAttachmentStatus defines the observed state of AlbServerAttachment.
type AlbServerAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlbServerAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlbServerAttachment is the Schema for the AlbServerAttachments API. Provides an tencentcloud application load balancer servers attachment as a resource, to attach and detach instances from load balancer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type AlbServerAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.backends) || (has(self.initProvider) && has(self.initProvider.backends))",message="spec.forProvider.backends is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.listenerId) || (has(self.initProvider) && has(self.initProvider.listenerId))",message="spec.forProvider.listenerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loadbalancerId) || (has(self.initProvider) && has(self.initProvider.loadbalancerId))",message="spec.forProvider.loadbalancerId is a required parameter"
	Spec   AlbServerAttachmentSpec   `json:"spec"`
	Status AlbServerAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlbServerAttachmentList contains a list of AlbServerAttachments
type AlbServerAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlbServerAttachment `json:"items"`
}

// Repository type metadata.
var (
	AlbServerAttachment_Kind             = "AlbServerAttachment"
	AlbServerAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlbServerAttachment_Kind}.String()
	AlbServerAttachment_KindAPIVersion   = AlbServerAttachment_Kind + "." + CRDGroupVersion.String()
	AlbServerAttachment_GroupVersionKind = CRDGroupVersion.WithKind(AlbServerAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&AlbServerAttachment{}, &AlbServerAttachmentList{})
}
