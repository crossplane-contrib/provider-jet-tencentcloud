// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ListenerRuleInitParameters struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: UNIDIRECTIONAL, MUTUAL. NOTES: Only supports listeners of HTTPS protocol.
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// Domain name of the listener rule.
	// Domain name of the listener rule.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Forwarding protocol between the CLB instance and real server. Valid values: HTTP, HTTPS, TRPC. The default is HTTP.
	// Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `TRPC`. The default is `HTTP`.
	ForwardType *string `json:"forwardType,omitempty" tf:"forward_type,omitempty"`

	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. 1 means the return value '1xx' is health. 2means the return value '2xx' is health.4means the return value '3xx' is health.8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// Domain name of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol.
	// Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// Methods of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol. The default is HEAD, the available value are HEAD and GET.
	// Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// Path of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol.
	// Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: (2~300) sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// Indicates whether health check is enabled.
	// Indicates whether health check is enabled.
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Time out of health check. The value range is 2-60.
	// Time out of health check. The value range is [2-60](SEC).
	HealthCheckTimeOut *float64 `json:"healthCheckTimeOut,omitempty" tf:"health_check_time_out,omitempty"`

	// Type of health check. Valid value is CUSTOM, TCP, HTTP.
	// Type of health check. Valid value is `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Indicate to apply HTTP2.0 protocol or not.
	// Indicate to apply HTTP2.0 protocol or not.
	Http2Switch *bool `json:"http2Switch,omitempty" tf:"http2_switch,omitempty"`

	// Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
	// Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
	Quic *bool `json:"quic,omitempty" tf:"quic,omitempty"`

	// Scheduling method of the CLB listener rules. Valid values: WRR, IP HASH, LEAST_CONN. The default is WRR.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as WRR, and not available when listener protocol is TCP_SSL.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Backend target type. Valid values: NODE, TARGETGROUP. NODE means to bind ordinary nodes, TARGETGROUP means to bind target group.
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// Url of the listener rule.
	// Url of the listener rule.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ListenerRuleObservation struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: UNIDIRECTIONAL, MUTUAL. NOTES: Only supports listeners of HTTPS protocol.
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// ID of CLB instance.
	// ID of CLB instance.
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// Domain name of the listener rule.
	// Domain name of the listener rule.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Forwarding protocol between the CLB instance and real server. Valid values: HTTP, HTTPS, TRPC. The default is HTTP.
	// Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `TRPC`. The default is `HTTP`.
	ForwardType *string `json:"forwardType,omitempty" tf:"forward_type,omitempty"`

	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. 1 means the return value '1xx' is health. 2means the return value '2xx' is health.4means the return value '3xx' is health.8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// Domain name of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol.
	// Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// Methods of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol. The default is HEAD, the available value are HEAD and GET.
	// Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// Path of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol.
	// Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: (2~300) sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// Indicates whether health check is enabled.
	// Indicates whether health check is enabled.
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Time out of health check. The value range is 2-60.
	// Time out of health check. The value range is [2-60](SEC).
	HealthCheckTimeOut *float64 `json:"healthCheckTimeOut,omitempty" tf:"health_check_time_out,omitempty"`

	// Type of health check. Valid value is CUSTOM, TCP, HTTP.
	// Type of health check. Valid value is `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Indicate to apply HTTP2.0 protocol or not.
	// Indicate to apply HTTP2.0 protocol or not.
	Http2Switch *bool `json:"http2Switch,omitempty" tf:"http2_switch,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of CLB listener.
	// ID of CLB listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
	// Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
	Quic *bool `json:"quic,omitempty" tf:"quic,omitempty"`

	// ID of this CLB listener rule.
	// ID of this CLB listener rule.
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// Scheduling method of the CLB listener rules. Valid values: WRR, IP HASH, LEAST_CONN. The default is WRR.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as WRR, and not available when listener protocol is TCP_SSL.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Backend target type. Valid values: NODE, TARGETGROUP. NODE means to bind ordinary nodes, TARGETGROUP means to bind target group.
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// Url of the listener rule.
	// Url of the listener rule.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ListenerRuleParameters struct {

	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the client certificate. NOTES: Only supports listeners of HTTPS protocol.
	// +kubebuilder:validation:Optional
	CertificateCAID *string `json:"certificateCaId,omitempty" tf:"certificate_ca_id,omitempty"`

	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	// ID of the server certificate. NOTES: Only supports listeners of HTTPS protocol.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// Type of certificate. Valid values: UNIDIRECTIONAL, MUTUAL. NOTES: Only supports listeners of HTTPS protocol.
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of HTTPS protocol.
	// +kubebuilder:validation:Optional
	CertificateSSLMode *string `json:"certificateSslMode,omitempty" tf:"certificate_ssl_mode,omitempty"`

	// ID of CLB instance.
	// ID of CLB instance.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// Reference to a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// Domain name of the listener rule.
	// Domain name of the listener rule.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Forwarding protocol between the CLB instance and real server. Valid values: HTTP, HTTPS, TRPC. The default is HTTP.
	// Forwarding protocol between the CLB instance and real server. Valid values: `HTTP`, `HTTPS`, `TRPC`. The default is `HTTP`.
	// +kubebuilder:validation:Optional
	ForwardType *string `json:"forwardType,omitempty" tf:"forward_type,omitempty"`

	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. 1 means the return value '1xx' is health. 2means the return value '2xx' is health.4means the return value '3xx' is health.8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	// HTTP Status Code. The default is 31. Valid value ranges: [1~31]. `1 means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. 16 means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values. NOTES: The 'HTTP' health check of the 'TCP' listener only supports specifying one health check status code. NOTES: Only supports listeners of 'HTTP' and 'HTTPS' protocol.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPCode *float64 `json:"healthCheckHttpCode,omitempty" tf:"health_check_http_code,omitempty"`

	// Domain name of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol.
	// Domain name of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPDomain *string `json:"healthCheckHttpDomain,omitempty" tf:"health_check_http_domain,omitempty"`

	// Methods of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol. The default is HEAD, the available value are HEAD and GET.
	// Methods of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol. The default is `HEAD`, the available value are `HEAD` and `GET`.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPMethod *string `json:"healthCheckHttpMethod,omitempty" tf:"health_check_http_method,omitempty"`

	// Path of health check. NOTES: Only supports listeners of HTTP and HTTPS protocol.
	// Path of health check. NOTES: Only supports listeners of `HTTP` and `HTTPS` protocol.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPPath *string `json:"healthCheckHttpPath,omitempty" tf:"health_check_http_path,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. Valid value ranges: (2~300) sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Interval time of health check. Valid value ranges: (2~300) sec. and the default is `5` sec. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckIntervalTime *float64 `json:"healthCheckIntervalTime,omitempty" tf:"health_check_interval_time,omitempty"`

	// Indicates whether health check is enabled.
	// Indicates whether health check is enabled.
	// +kubebuilder:validation:Optional
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// Time out of health check. The value range is 2-60.
	// Time out of health check. The value range is [2-60](SEC).
	// +kubebuilder:validation:Optional
	HealthCheckTimeOut *float64 `json:"healthCheckTimeOut,omitempty" tf:"health_check_time_out,omitempty"`

	// Type of health check. Valid value is CUSTOM, TCP, HTTP.
	// Type of health check. Valid value is `CUSTOM`, `TCP`, `HTTP`.
	// +kubebuilder:validation:Optional
	HealthCheckType *string `json:"healthCheckType,omitempty" tf:"health_check_type,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Indicate to apply HTTP2.0 protocol or not.
	// Indicate to apply HTTP2.0 protocol or not.
	// +kubebuilder:validation:Optional
	Http2Switch *bool `json:"http2Switch,omitempty" tf:"http2_switch,omitempty"`

	// ID of CLB listener.
	// ID of CLB listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
	// Whether to enable QUIC. Note: QUIC can be enabled only for HTTPS domain names.
	// +kubebuilder:validation:Optional
	Quic *bool `json:"quic,omitempty" tf:"quic,omitempty"`

	// Scheduling method of the CLB listener rules. Valid values: WRR, IP HASH, LEAST_CONN. The default is WRR.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Scheduling method of the CLB listener rules. Valid values: `WRR`, `IP HASH`, `LEAST_CONN`. The default is `WRR`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	Scheduler *string `json:"scheduler,omitempty" tf:"scheduler,omitempty"`

	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as WRR, and not available when listener protocol is TCP_SSL.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not available when listener protocol is `TCP_SSL`.  NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	// +kubebuilder:validation:Optional
	SessionExpireTime *float64 `json:"sessionExpireTime,omitempty" tf:"session_expire_time,omitempty"`

	// Backend target type. Valid values: NODE, TARGETGROUP. NODE means to bind ordinary nodes, TARGETGROUP means to bind target group.
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to bind target group.
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`

	// Url of the listener rule.
	// Url of the listener rule.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// ListenerRuleSpec defines the desired state of ListenerRule
type ListenerRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ListenerRuleInitParameters `json:"initProvider,omitempty"`
}

// ListenerRuleStatus defines the observed state of ListenerRule.
type ListenerRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerRule is the Schema for the ListenerRules API. Provides a resource to create a CLB listener rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ListenerRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   ListenerRuleSpec   `json:"spec"`
	Status ListenerRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerRuleList contains a list of ListenerRules
type ListenerRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ListenerRule `json:"items"`
}

// Repository type metadata.
var (
	ListenerRule_Kind             = "ListenerRule"
	ListenerRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ListenerRule_Kind}.String()
	ListenerRule_KindAPIVersion   = ListenerRule_Kind + "." + CRDGroupVersion.String()
	ListenerRule_GroupVersionKind = CRDGroupVersion.WithKind(ListenerRule_Kind)
)

func init() {
	SchemeBuilder.Register(&ListenerRule{}, &ListenerRuleList{})
}
