// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentInitParameters struct {

	// Information of the backends to be attached.
	// Information of the backends to be attached.
	Targets []TargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type AttachmentObservation struct {

	// ID of the CLB.
	// ID of the CLB.
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the CLB listener.
	// ID of the CLB listener.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Type of protocol within the listener.
	// Type of protocol within the listener.
	ProtocolType *string `json:"protocolType,omitempty" tf:"protocol_type,omitempty"`

	// ID of the CLB listener rule. Only supports listeners of HTTPS and HTTP protocol.
	// ID of the CLB listener rule. Only supports listeners of `HTTPS` and `HTTP` protocol.
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// Information of the backends to be attached.
	// Information of the backends to be attached.
	Targets []TargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`
}

type AttachmentParameters struct {

	// ID of the CLB.
	// ID of the CLB.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// Reference to a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDRef *v1.Reference `json:"clbIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate clbId.
	// +kubebuilder:validation:Optional
	ClbIDSelector *v1.Selector `json:"clbIdSelector,omitempty" tf:"-"`

	// ID of the CLB listener.
	// ID of the CLB listener.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// ID of the CLB listener rule. Only supports listeners of HTTPS and HTTP protocol.
	// ID of the CLB listener rule. Only supports listeners of `HTTPS` and `HTTP` protocol.
	// +crossplane:generate:reference:type=ListenerRule
	// +kubebuilder:validation:Optional
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// Reference to a ListenerRule to populate ruleId.
	// +kubebuilder:validation:Optional
	RuleIDRef *v1.Reference `json:"ruleIdRef,omitempty" tf:"-"`

	// Selector for a ListenerRule to populate ruleId.
	// +kubebuilder:validation:Optional
	RuleIDSelector *v1.Selector `json:"ruleIdSelector,omitempty" tf:"-"`

	// Information of the backends to be attached.
	// Information of the backends to be attached.
	// +kubebuilder:validation:Optional
	Targets []TargetsParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type TargetsInitParameters struct {

	// Eni IP address of the backend server, conflict with instance_id but must specify one of them.
	// Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
	EniIP *string `json:"eniIp,omitempty" tf:"eni_ip,omitempty"`

	// CVM Instance Id of the backend server, conflict with eni_ip but must specify one of them.
	// CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Port of the backend server. Valid value ranges: (0~65535).
	// Port of the backend server. Valid value ranges: (0~65535).
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to 10.
	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TargetsObservation struct {

	// Eni IP address of the backend server, conflict with instance_id but must specify one of them.
	// Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
	EniIP *string `json:"eniIp,omitempty" tf:"eni_ip,omitempty"`

	// CVM Instance Id of the backend server, conflict with eni_ip but must specify one of them.
	// CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Port of the backend server. Valid value ranges: (0~65535).
	// Port of the backend server. Valid value ranges: (0~65535).
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to 10.
	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TargetsParameters struct {

	// Eni IP address of the backend server, conflict with instance_id but must specify one of them.
	// Eni IP address of the backend server, conflict with `instance_id` but must specify one of them.
	// +kubebuilder:validation:Optional
	EniIP *string `json:"eniIp,omitempty" tf:"eni_ip,omitempty"`

	// CVM Instance Id of the backend server, conflict with eni_ip but must specify one of them.
	// CVM Instance Id of the backend server, conflict with `eni_ip` but must specify one of them.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Port of the backend server. Valid value ranges: (0~65535).
	// Port of the backend server. Valid value ranges: (0~65535).
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to 10.
	// Forwarding weight of the backend service. Valid value ranges: (0~100). defaults to `10`.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// AttachmentSpec defines the desired state of Attachment
type AttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AttachmentInitParameters `json:"initProvider,omitempty"`
}

// AttachmentStatus defines the observed state of Attachment.
type AttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Attachment is the Schema for the Attachments API. Provides a resource to create a CLB attachment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Attachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targets) || (has(self.initProvider) && has(self.initProvider.targets))",message="spec.forProvider.targets is a required parameter"
	Spec   AttachmentSpec   `json:"spec"`
	Status AttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttachmentList contains a list of Attachments
type AttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Attachment `json:"items"`
}

// Repository type metadata.
var (
	Attachment_Kind             = "Attachment"
	Attachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Attachment_Kind}.String()
	Attachment_KindAPIVersion   = Attachment_Kind + "." + CRDGroupVersion.String()
	Attachment_GroupVersionKind = CRDGroupVersion.WithKind(Attachment_Kind)
)

func init() {
	SchemeBuilder.Register(&Attachment{}, &AttachmentList{})
}
