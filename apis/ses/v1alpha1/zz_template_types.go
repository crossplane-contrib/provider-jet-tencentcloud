// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TemplateContentInitParameters struct {

	// Html code after base64.
	// Html code after base64.
	HTML *string `json:"html,omitempty" tf:"html,omitempty"`

	// Text content after base64.
	// Text content after base64.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type TemplateContentObservation struct {

	// Html code after base64.
	// Html code after base64.
	HTML *string `json:"html,omitempty" tf:"html,omitempty"`

	// Text content after base64.
	// Text content after base64.
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type TemplateContentParameters struct {

	// Html code after base64.
	// Html code after base64.
	// +kubebuilder:validation:Optional
	HTML *string `json:"html,omitempty" tf:"html,omitempty"`

	// Text content after base64.
	// Text content after base64.
	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type TemplateInitParameters struct {

	// Sms Template Content.
	// Sms Template Content.
	TemplateContent []TemplateContentInitParameters `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// smsTemplateName, which must be required.
	// smsTemplateName, which must be required.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type TemplateObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Sms Template Content.
	// Sms Template Content.
	TemplateContent []TemplateContentObservation `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// smsTemplateName, which must be required.
	// smsTemplateName, which must be required.
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

type TemplateParameters struct {

	// Sms Template Content.
	// Sms Template Content.
	// +kubebuilder:validation:Optional
	TemplateContent []TemplateContentParameters `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// smsTemplateName, which must be required.
	// smsTemplateName, which must be required.
	// +kubebuilder:validation:Optional
	TemplateName *string `json:"templateName,omitempty" tf:"template_name,omitempty"`
}

// TemplateSpec defines the desired state of Template
type TemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TemplateInitParameters `json:"initProvider,omitempty"`
}

// TemplateStatus defines the observed state of Template.
type TemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Template is the Schema for the Templates API. Provides a resource to create a ses template.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Template struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateContent) || (has(self.initProvider) && has(self.initProvider.templateContent))",message="spec.forProvider.templateContent is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.templateName) || (has(self.initProvider) && has(self.initProvider.templateName))",message="spec.forProvider.templateName is a required parameter"
	Spec   TemplateSpec   `json:"spec"`
	Status TemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateList contains a list of Templates
type TemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Template `json:"items"`
}

// Repository type metadata.
var (
	Template_Kind             = "Template"
	Template_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Template_Kind}.String()
	Template_KindAPIVersion   = Template_Kind + "." + CRDGroupVersion.String()
	Template_GroupVersionKind = CRDGroupVersion.WithKind(Template_Kind)
)

func init() {
	SchemeBuilder.Register(&Template{}, &TemplateList{})
}
