// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EmailAddressInitParameters struct {

	// Your sender address. (You can create up to 10 sender addresses for each domain.).
	// Your sender address. (You can create up to 10 sender addresses for each domain.).
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// Sender name.
	// Sender name.
	EmailSenderName *string `json:"emailSenderName,omitempty" tf:"email_sender_name,omitempty"`
}

type EmailAddressObservation struct {

	// Your sender address. (You can create up to 10 sender addresses for each domain.).
	// Your sender address. (You can create up to 10 sender addresses for each domain.).
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// Sender name.
	// Sender name.
	EmailSenderName *string `json:"emailSenderName,omitempty" tf:"email_sender_name,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EmailAddressParameters struct {

	// Your sender address. (You can create up to 10 sender addresses for each domain.).
	// Your sender address. (You can create up to 10 sender addresses for each domain.).
	// +kubebuilder:validation:Optional
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// Sender name.
	// Sender name.
	// +kubebuilder:validation:Optional
	EmailSenderName *string `json:"emailSenderName,omitempty" tf:"email_sender_name,omitempty"`
}

// EmailAddressSpec defines the desired state of EmailAddress
type EmailAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EmailAddressParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EmailAddressInitParameters `json:"initProvider,omitempty"`
}

// EmailAddressStatus defines the observed state of EmailAddress.
type EmailAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EmailAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EmailAddress is the Schema for the EmailAddresss API. Provides a resource to create a ses email_address
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type EmailAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.emailAddress) || (has(self.initProvider) && has(self.initProvider.emailAddress))",message="spec.forProvider.emailAddress is a required parameter"
	Spec   EmailAddressSpec   `json:"spec"`
	Status EmailAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmailAddressList contains a list of EmailAddresss
type EmailAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EmailAddress `json:"items"`
}

// Repository type metadata.
var (
	EmailAddress_Kind             = "EmailAddress"
	EmailAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EmailAddress_Kind}.String()
	EmailAddress_KindAPIVersion   = EmailAddress_Kind + "." + CRDGroupVersion.String()
	EmailAddress_GroupVersionKind = CRDGroupVersion.WithKind(EmailAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&EmailAddress{}, &EmailAddressList{})
}
