// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TableInitParameters struct {

	// Description of the TcaplusDB table.
	// Description of the TcaplusDB table.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the IDL File.
	// ID of the IDL File.
	IdlID *string `json:"idlId,omitempty" tf:"idl_id,omitempty"`

	// Reserved read capacity units of the TcaplusDB table.
	// Reserved read capacity units of the TcaplusDB table.
	ReservedReadCu *float64 `json:"reservedReadCu,omitempty" tf:"reserved_read_cu,omitempty"`

	// Reserved storage capacity of the TcaplusDB table (unit: GB).
	// Reserved storage capacity of the TcaplusDB table (unit: GB).
	ReservedVolume *float64 `json:"reservedVolume,omitempty" tf:"reserved_volume,omitempty"`

	// Reserved write capacity units of the TcaplusDB table.
	// Reserved write capacity units of the TcaplusDB table.
	ReservedWriteCu *float64 `json:"reservedWriteCu,omitempty" tf:"reserved_write_cu,omitempty"`

	// IDL type of the TcaplusDB table. Valid values: PROTO and TDR.
	// IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
	TableIdlType *string `json:"tableIdlType,omitempty" tf:"table_idl_type,omitempty"`

	// Name of the TcaplusDB table.
	// Name of the TcaplusDB table.
	TableName *string `json:"tableName,omitempty" tf:"table_name,omitempty"`

	// Type of the TcaplusDB table. Valid values are GENERIC and LIST.
	// Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
	TableType *string `json:"tableType,omitempty" tf:"table_type,omitempty"`
}

type TableObservation struct {

	// ID of the TcaplusDB cluster to which the table belongs.
	// ID of the TcaplusDB cluster to which the table belongs.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Create time of the TcaplusDB table.
	// Create time of the TcaplusDB table.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description of the TcaplusDB table.
	// Description of the TcaplusDB table.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Error messages for creating TcaplusDB table.
	// Error messages for creating TcaplusDB table.
	Error *string `json:"error,omitempty" tf:"error,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the IDL File.
	// ID of the IDL File.
	IdlID *string `json:"idlId,omitempty" tf:"idl_id,omitempty"`

	// Reserved read capacity units of the TcaplusDB table.
	// Reserved read capacity units of the TcaplusDB table.
	ReservedReadCu *float64 `json:"reservedReadCu,omitempty" tf:"reserved_read_cu,omitempty"`

	// Reserved storage capacity of the TcaplusDB table (unit: GB).
	// Reserved storage capacity of the TcaplusDB table (unit: GB).
	ReservedVolume *float64 `json:"reservedVolume,omitempty" tf:"reserved_volume,omitempty"`

	// Reserved write capacity units of the TcaplusDB table.
	// Reserved write capacity units of the TcaplusDB table.
	ReservedWriteCu *float64 `json:"reservedWriteCu,omitempty" tf:"reserved_write_cu,omitempty"`

	// Status of the TcaplusDB table.
	// Status of the TcaplusDB table.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// IDL type of the TcaplusDB table. Valid values: PROTO and TDR.
	// IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
	TableIdlType *string `json:"tableIdlType,omitempty" tf:"table_idl_type,omitempty"`

	// Name of the TcaplusDB table.
	// Name of the TcaplusDB table.
	TableName *string `json:"tableName,omitempty" tf:"table_name,omitempty"`

	// Size of the TcaplusDB table.
	// Size of the TcaplusDB table.
	TableSize *float64 `json:"tableSize,omitempty" tf:"table_size,omitempty"`

	// Type of the TcaplusDB table. Valid values are GENERIC and LIST.
	// Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
	TableType *string `json:"tableType,omitempty" tf:"table_type,omitempty"`

	// ID of the table group to which the table belongs.
	// ID of the table group to which the table belongs.
	TablegroupID *string `json:"tablegroupId,omitempty" tf:"tablegroup_id,omitempty"`
}

type TableParameters struct {

	// ID of the TcaplusDB cluster to which the table belongs.
	// ID of the TcaplusDB cluster to which the table belongs.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// Description of the TcaplusDB table.
	// Description of the TcaplusDB table.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the IDL File.
	// ID of the IDL File.
	// +kubebuilder:validation:Optional
	IdlID *string `json:"idlId,omitempty" tf:"idl_id,omitempty"`

	// Reserved read capacity units of the TcaplusDB table.
	// Reserved read capacity units of the TcaplusDB table.
	// +kubebuilder:validation:Optional
	ReservedReadCu *float64 `json:"reservedReadCu,omitempty" tf:"reserved_read_cu,omitempty"`

	// Reserved storage capacity of the TcaplusDB table (unit: GB).
	// Reserved storage capacity of the TcaplusDB table (unit: GB).
	// +kubebuilder:validation:Optional
	ReservedVolume *float64 `json:"reservedVolume,omitempty" tf:"reserved_volume,omitempty"`

	// Reserved write capacity units of the TcaplusDB table.
	// Reserved write capacity units of the TcaplusDB table.
	// +kubebuilder:validation:Optional
	ReservedWriteCu *float64 `json:"reservedWriteCu,omitempty" tf:"reserved_write_cu,omitempty"`

	// IDL type of the TcaplusDB table. Valid values: PROTO and TDR.
	// IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
	// +kubebuilder:validation:Optional
	TableIdlType *string `json:"tableIdlType,omitempty" tf:"table_idl_type,omitempty"`

	// Name of the TcaplusDB table.
	// Name of the TcaplusDB table.
	// +kubebuilder:validation:Optional
	TableName *string `json:"tableName,omitempty" tf:"table_name,omitempty"`

	// Type of the TcaplusDB table. Valid values are GENERIC and LIST.
	// Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
	// +kubebuilder:validation:Optional
	TableType *string `json:"tableType,omitempty" tf:"table_type,omitempty"`

	// ID of the table group to which the table belongs.
	// ID of the table group to which the table belongs.
	// +crossplane:generate:reference:type=TableGroup
	// +kubebuilder:validation:Optional
	TablegroupID *string `json:"tablegroupId,omitempty" tf:"tablegroup_id,omitempty"`

	// Reference to a TableGroup to populate tablegroupId.
	// +kubebuilder:validation:Optional
	TablegroupIDRef *v1.Reference `json:"tablegroupIdRef,omitempty" tf:"-"`

	// Selector for a TableGroup to populate tablegroupId.
	// +kubebuilder:validation:Optional
	TablegroupIDSelector *v1.Selector `json:"tablegroupIdSelector,omitempty" tf:"-"`
}

// TableSpec defines the desired state of Table
type TableSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TableInitParameters `json:"initProvider,omitempty"`
}

// TableStatus defines the observed state of Table.
type TableStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Table is the Schema for the Tables API. Use this resource to create TcaplusDB table.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Table struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.idlId) || (has(self.initProvider) && has(self.initProvider.idlId))",message="spec.forProvider.idlId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reservedReadCu) || (has(self.initProvider) && has(self.initProvider.reservedReadCu))",message="spec.forProvider.reservedReadCu is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reservedVolume) || (has(self.initProvider) && has(self.initProvider.reservedVolume))",message="spec.forProvider.reservedVolume is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.reservedWriteCu) || (has(self.initProvider) && has(self.initProvider.reservedWriteCu))",message="spec.forProvider.reservedWriteCu is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tableIdlType) || (has(self.initProvider) && has(self.initProvider.tableIdlType))",message="spec.forProvider.tableIdlType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tableName) || (has(self.initProvider) && has(self.initProvider.tableName))",message="spec.forProvider.tableName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tableType) || (has(self.initProvider) && has(self.initProvider.tableType))",message="spec.forProvider.tableType is a required parameter"
	Spec   TableSpec   `json:"spec"`
	Status TableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableList contains a list of Tables
type TableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Table `json:"items"`
}

// Repository type metadata.
var (
	Table_Kind             = "Table"
	Table_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Table_Kind}.String()
	Table_KindAPIVersion   = Table_Kind + "." + CRDGroupVersion.String()
	Table_GroupVersionKind = CRDGroupVersion.WithKind(Table_Kind)
)

func init() {
	SchemeBuilder.Register(&Table{}, &TableList{})
}
