// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppConfigInitParameters struct {

	// payload.
	// payload.
	ConfigData []ConfigDataInitParameters `json:"configData,omitempty" tf:"config_data,omitempty"`

	// appConfig name.
	// appConfig name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AppConfigObservation struct {

	// payload.
	// payload.
	ConfigData []ConfigDataObservation `json:"configData,omitempty" tf:"config_data,omitempty"`

	// environment ID.
	// environment ID.
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// appConfig name.
	// appConfig name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AppConfigParameters struct {

	// payload.
	// payload.
	// +kubebuilder:validation:Optional
	ConfigData []ConfigDataParameters `json:"configData,omitempty" tf:"config_data,omitempty"`

	// environment ID.
	// environment ID.
	// +crossplane:generate:reference:type=Environment
	// +kubebuilder:validation:Optional
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// Reference to a Environment to populate environmentId.
	// +kubebuilder:validation:Optional
	EnvironmentIDRef *v1.Reference `json:"environmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment to populate environmentId.
	// +kubebuilder:validation:Optional
	EnvironmentIDSelector *v1.Selector `json:"environmentIdSelector,omitempty" tf:"-"`

	// appConfig name.
	// appConfig name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ConfigDataInitParameters struct {

	// key.
	// key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// value.
	// value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigDataObservation struct {

	// key.
	// key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// value.
	// value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfigDataParameters struct {

	// key.
	// key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// value.
	// value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// AppConfigSpec defines the desired state of AppConfig
type AppConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AppConfigInitParameters `json:"initProvider,omitempty"`
}

// AppConfigStatus defines the observed state of AppConfig.
type AppConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppConfig is the Schema for the AppConfigs API. Provides a resource to create a tem appConfig
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type AppConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configData) || (has(self.initProvider) && has(self.initProvider.configData))",message="spec.forProvider.configData is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AppConfigSpec   `json:"spec"`
	Status AppConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppConfigList contains a list of AppConfigs
type AppConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppConfig `json:"items"`
}

// Repository type metadata.
var (
	AppConfig_Kind             = "AppConfig"
	AppConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppConfig_Kind}.String()
	AppConfig_KindAPIVersion   = AppConfig_Kind + "." + CRDGroupVersion.String()
	AppConfig_GroupVersionKind = CRDGroupVersion.WithKind(AppConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&AppConfig{}, &AppConfigList{})
}
