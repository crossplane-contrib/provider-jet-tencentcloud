// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogConfigInitParameters struct {

	// regex pattern.
	// regex pattern.
	BeginningRegex *string `json:"beginningRegex,omitempty" tf:"beginning_regex,omitempty"`

	// file name pattern if container_file.
	// file name pattern if container_file.
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// container_stdout or container_file.
	// container_stdout or container_file.
	InputType *string `json:"inputType,omitempty" tf:"input_type,omitempty"`

	// directory if container_file.
	// directory if container_file.
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`

	// minimalist_log or multiline_log.
	// minimalist_log or multiline_log.
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// logset.
	// logset.
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// appConfig name.
	// appConfig name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// topic.
	// topic.
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`
}

type LogConfigObservation struct {

	// application ID.
	// application ID.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// regex pattern.
	// regex pattern.
	BeginningRegex *string `json:"beginningRegex,omitempty" tf:"beginning_regex,omitempty"`

	// environment ID.
	// environment ID.
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// file name pattern if container_file.
	// file name pattern if container_file.
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// container_stdout or container_file.
	// container_stdout or container_file.
	InputType *string `json:"inputType,omitempty" tf:"input_type,omitempty"`

	// directory if container_file.
	// directory if container_file.
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`

	// minimalist_log or multiline_log.
	// minimalist_log or multiline_log.
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// logset.
	// logset.
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// appConfig name.
	// appConfig name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// topic.
	// topic.
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`

	// application ID, which is combined by environment ID and application ID, like en-o5edaepv#app-3j29aa2p.
	// application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
	WorkloadID *string `json:"workloadId,omitempty" tf:"workload_id,omitempty"`
}

type LogConfigParameters struct {

	// application ID.
	// application ID.
	// +crossplane:generate:reference:type=Application
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a Application to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a Application to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// regex pattern.
	// regex pattern.
	// +kubebuilder:validation:Optional
	BeginningRegex *string `json:"beginningRegex,omitempty" tf:"beginning_regex,omitempty"`

	// environment ID.
	// environment ID.
	// +crossplane:generate:reference:type=Environment
	// +kubebuilder:validation:Optional
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// Reference to a Environment to populate environmentId.
	// +kubebuilder:validation:Optional
	EnvironmentIDRef *v1.Reference `json:"environmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment to populate environmentId.
	// +kubebuilder:validation:Optional
	EnvironmentIDSelector *v1.Selector `json:"environmentIdSelector,omitempty" tf:"-"`

	// file name pattern if container_file.
	// file name pattern if container_file.
	// +kubebuilder:validation:Optional
	FilePattern *string `json:"filePattern,omitempty" tf:"file_pattern,omitempty"`

	// container_stdout or container_file.
	// container_stdout or container_file.
	// +kubebuilder:validation:Optional
	InputType *string `json:"inputType,omitempty" tf:"input_type,omitempty"`

	// directory if container_file.
	// directory if container_file.
	// +kubebuilder:validation:Optional
	LogPath *string `json:"logPath,omitempty" tf:"log_path,omitempty"`

	// minimalist_log or multiline_log.
	// minimalist_log or multiline_log.
	// +kubebuilder:validation:Optional
	LogType *string `json:"logType,omitempty" tf:"log_type,omitempty"`

	// logset.
	// logset.
	// +kubebuilder:validation:Optional
	LogsetID *string `json:"logsetId,omitempty" tf:"logset_id,omitempty"`

	// appConfig name.
	// appConfig name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// topic.
	// topic.
	// +kubebuilder:validation:Optional
	TopicID *string `json:"topicId,omitempty" tf:"topic_id,omitempty"`

	// application ID, which is combined by environment ID and application ID, like en-o5edaepv#app-3j29aa2p.
	// application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
	// +crossplane:generate:reference:type=Workload
	// +kubebuilder:validation:Optional
	WorkloadID *string `json:"workloadId,omitempty" tf:"workload_id,omitempty"`

	// Reference to a Workload to populate workloadId.
	// +kubebuilder:validation:Optional
	WorkloadIDRef *v1.Reference `json:"workloadIdRef,omitempty" tf:"-"`

	// Selector for a Workload to populate workloadId.
	// +kubebuilder:validation:Optional
	WorkloadIDSelector *v1.Selector `json:"workloadIdSelector,omitempty" tf:"-"`
}

// LogConfigSpec defines the desired state of LogConfig
type LogConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LogConfigInitParameters `json:"initProvider,omitempty"`
}

// LogConfigStatus defines the observed state of LogConfig.
type LogConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogConfig is the Schema for the LogConfigs API. Provides a resource to create a tem logConfig
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type LogConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.inputType) || (has(self.initProvider) && has(self.initProvider.inputType))",message="spec.forProvider.inputType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logType) || (has(self.initProvider) && has(self.initProvider.logType))",message="spec.forProvider.logType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logsetId) || (has(self.initProvider) && has(self.initProvider.logsetId))",message="spec.forProvider.logsetId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.topicId) || (has(self.initProvider) && has(self.initProvider.topicId))",message="spec.forProvider.topicId is a required parameter"
	Spec   LogConfigSpec   `json:"spec"`
	Status LogConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogConfigList contains a list of LogConfigs
type LogConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogConfig `json:"items"`
}

// Repository type metadata.
var (
	LogConfig_Kind             = "LogConfig"
	LogConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogConfig_Kind}.String()
	LogConfig_KindAPIVersion   = LogConfig_Kind + "." + CRDGroupVersion.String()
	LogConfig_GroupVersionKind = CRDGroupVersion.WithKind(LogConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&LogConfig{}, &LogConfigList{})
}
