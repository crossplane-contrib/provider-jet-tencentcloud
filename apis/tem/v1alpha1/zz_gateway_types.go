// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendInitParameters struct {

	// backend name.
	// backend name.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// backend port.
	// backend port.
	ServicePort *float64 `json:"servicePort,omitempty" tf:"service_port,omitempty"`
}

type BackendObservation struct {

	// backend name.
	// backend name.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// backend port.
	// backend port.
	ServicePort *float64 `json:"servicePort,omitempty" tf:"service_port,omitempty"`
}

type BackendParameters struct {

	// backend name.
	// backend name.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// backend port.
	// backend port.
	// +kubebuilder:validation:Optional
	ServicePort *float64 `json:"servicePort" tf:"service_port,omitempty"`
}

type GatewayInitParameters struct {

	// gateway properties.
	// gateway properties.
	Ingress []IngressInitParameters `json:"ingress,omitempty" tf:"ingress,omitempty"`
}

type GatewayObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// gateway properties.
	// gateway properties.
	Ingress []IngressObservation `json:"ingress,omitempty" tf:"ingress,omitempty"`
}

type GatewayParameters struct {

	// gateway properties.
	// gateway properties.
	// +kubebuilder:validation:Optional
	Ingress []IngressParameters `json:"ingress,omitempty" tf:"ingress,omitempty"`
}

type HTTPInitParameters struct {

	// path payload.
	// path payload.
	Paths []PathsInitParameters `json:"paths,omitempty" tf:"paths,omitempty"`
}

type HTTPObservation struct {

	// path payload.
	// path payload.
	Paths []PathsObservation `json:"paths,omitempty" tf:"paths,omitempty"`
}

type HTTPParameters struct {

	// path payload.
	// path payload.
	// +kubebuilder:validation:Optional
	Paths []PathsParameters `json:"paths" tf:"paths,omitempty"`
}

type IngressInitParameters struct {

	// ip version, support IPV4.
	// ip version, support IPV4.
	AddressIPVersion *string `json:"addressIpVersion,omitempty" tf:"address_ip_version,omitempty"`

	// related CLB ID, support binding existing clb, does not support modification.
	// related CLB ID, support binding existing clb, does not support modification.
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// environment ID.
	// environment ID.
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// gateway name.
	// gateway name.
	IngressName *string `json:"ingressName,omitempty" tf:"ingress_name,omitempty"`

	// mixing HTTP and HTTPS.
	// mixing HTTP and HTTPS.
	Mixed *bool `json:"mixed,omitempty" tf:"mixed,omitempty"`

	// redirect mode, support AUTO and NONE.
	// redirect mode, support AUTO and NONE.
	RewriteType *string `json:"rewriteType,omitempty" tf:"rewrite_type,omitempty"`

	// proxy rules.
	// proxy rules.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// ingress TLS configurations.
	// ingress TLS configurations.
	TLS []TLSInitParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type IngressObservation struct {

	// ip version, support IPV4.
	// ip version, support IPV4.
	AddressIPVersion *string `json:"addressIpVersion,omitempty" tf:"address_ip_version,omitempty"`

	// related CLB ID, support binding existing clb, does not support modification.
	// related CLB ID, support binding existing clb, does not support modification.
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// creation time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// environment ID.
	// environment ID.
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// gateway name.
	// gateway name.
	IngressName *string `json:"ingressName,omitempty" tf:"ingress_name,omitempty"`

	// mixing HTTP and HTTPS.
	// mixing HTTP and HTTPS.
	Mixed *bool `json:"mixed,omitempty" tf:"mixed,omitempty"`

	// redirect mode, support AUTO and NONE.
	// redirect mode, support AUTO and NONE.
	RewriteType *string `json:"rewriteType,omitempty" tf:"rewrite_type,omitempty"`

	// proxy rules.
	// proxy rules.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	// ingress TLS configurations.
	// ingress TLS configurations.
	TLS []TLSObservation `json:"tls,omitempty" tf:"tls,omitempty"`

	// gateway vip.
	Vip *string `json:"vip,omitempty" tf:"vip,omitempty"`
}

type IngressParameters struct {

	// ip version, support IPV4.
	// ip version, support IPV4.
	// +kubebuilder:validation:Optional
	AddressIPVersion *string `json:"addressIpVersion" tf:"address_ip_version,omitempty"`

	// related CLB ID, support binding existing clb, does not support modification.
	// related CLB ID, support binding existing clb, does not support modification.
	// +kubebuilder:validation:Optional
	ClbID *string `json:"clbId,omitempty" tf:"clb_id,omitempty"`

	// environment ID.
	// environment ID.
	// +kubebuilder:validation:Optional
	EnvironmentID *string `json:"environmentId" tf:"environment_id,omitempty"`

	// gateway name.
	// gateway name.
	// +kubebuilder:validation:Optional
	IngressName *string `json:"ingressName" tf:"ingress_name,omitempty"`

	// mixing HTTP and HTTPS.
	// mixing HTTP and HTTPS.
	// +kubebuilder:validation:Optional
	Mixed *bool `json:"mixed" tf:"mixed,omitempty"`

	// redirect mode, support AUTO and NONE.
	// redirect mode, support AUTO and NONE.
	// +kubebuilder:validation:Optional
	RewriteType *string `json:"rewriteType,omitempty" tf:"rewrite_type,omitempty"`

	// proxy rules.
	// proxy rules.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`

	// ingress TLS configurations.
	// ingress TLS configurations.
	// +kubebuilder:validation:Optional
	TLS []TLSParameters `json:"tls,omitempty" tf:"tls,omitempty"`
}

type PathsInitParameters struct {

	// backend payload.
	// backend payload.
	Backend []BackendInitParameters `json:"backend,omitempty" tf:"backend,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type PathsObservation struct {

	// backend payload.
	// backend payload.
	Backend []BackendObservation `json:"backend,omitempty" tf:"backend,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type PathsParameters struct {

	// backend payload.
	// backend payload.
	// +kubebuilder:validation:Optional
	Backend []BackendParameters `json:"backend" tf:"backend,omitempty"`

	// path.
	// path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path" tf:"path,omitempty"`
}

type RulesInitParameters struct {

	// rule payload.
	// rule payload.
	HTTP []HTTPInitParameters `json:"http,omitempty" tf:"http,omitempty"`

	// host name.
	// host name.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RulesObservation struct {

	// rule payload.
	// rule payload.
	HTTP []HTTPObservation `json:"http,omitempty" tf:"http,omitempty"`

	// host name.
	// host name.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type RulesParameters struct {

	// rule payload.
	// rule payload.
	// +kubebuilder:validation:Optional
	HTTP []HTTPParameters `json:"http" tf:"http,omitempty"`

	// host name.
	// host name.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// protocol.
	// protocol.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type TLSInitParameters struct {

	// certificate ID.
	// certificate ID.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// host names.
	// host names.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// secret name, if you use a certificate, you don't need to fill in this field.
	// secret name, if you use a certificate, you don't need to fill in this field.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TLSObservation struct {

	// certificate ID.
	// certificate ID.
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// host names.
	// host names.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// secret name, if you use a certificate, you don't need to fill in this field.
	// secret name, if you use a certificate, you don't need to fill in this field.
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

type TLSParameters struct {

	// certificate ID.
	// certificate ID.
	// +kubebuilder:validation:Optional
	CertificateID *string `json:"certificateId" tf:"certificate_id,omitempty"`

	// host names.
	// host names.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts" tf:"hosts,omitempty"`

	// secret name, if you use a certificate, you don't need to fill in this field.
	// secret name, if you use a certificate, you don't need to fill in this field.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`
}

// GatewaySpec defines the desired state of Gateway
type GatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GatewayInitParameters `json:"initProvider,omitempty"`
}

// GatewayStatus defines the observed state of Gateway.
type GatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Gateway is the Schema for the Gateways API. Provides a resource to create a tem gateway
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Gateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewaySpec   `json:"spec"`
	Status            GatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayList contains a list of Gateways
type GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Gateway `json:"items"`
}

// Repository type metadata.
var (
	Gateway_Kind             = "Gateway"
	Gateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Gateway_Kind}.String()
	Gateway_KindAPIVersion   = Gateway_Kind + "." + CRDGroupVersion.String()
	Gateway_GroupVersionKind = CRDGroupVersion.WithKind(Gateway_Kind)
)

func init() {
	SchemeBuilder.Register(&Gateway{}, &GatewayList{})
}
