// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationInitParameters struct {

	// application name.
	// application name.
	ApplicationName *string `json:"applicationName,omitempty" tf:"application_name,omitempty"`

	// program language, like JAVA.
	// program language, like JAVA.
	CodingLanguage *string `json:"codingLanguage,omitempty" tf:"coding_language,omitempty"`

	// application description.
	// application description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// tcr instance id.
	// tcr instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// repository name.
	// repository name.
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// registry address.
	// registry address.
	RepoServer *string `json:"repoServer,omitempty" tf:"repo_server,omitempty"`

	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType *float64 `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// application tag list.
	// application tag list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// create image repo or not.
	// create image repo or not.
	UseDefaultImageService *float64 `json:"useDefaultImageService,omitempty" tf:"use_default_image_service,omitempty"`
}

type ApplicationObservation struct {

	// application name.
	// application name.
	ApplicationName *string `json:"applicationName,omitempty" tf:"application_name,omitempty"`

	// program language, like JAVA.
	// program language, like JAVA.
	CodingLanguage *string `json:"codingLanguage,omitempty" tf:"coding_language,omitempty"`

	// application description.
	// application description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// tcr instance id.
	// tcr instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// repository name.
	// repository name.
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// registry address.
	// registry address.
	RepoServer *string `json:"repoServer,omitempty" tf:"repo_server,omitempty"`

	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	RepoType *float64 `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// application tag list.
	// application tag list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// create image repo or not.
	// create image repo or not.
	UseDefaultImageService *float64 `json:"useDefaultImageService,omitempty" tf:"use_default_image_service,omitempty"`
}

type ApplicationParameters struct {

	// application name.
	// application name.
	// +kubebuilder:validation:Optional
	ApplicationName *string `json:"applicationName,omitempty" tf:"application_name,omitempty"`

	// program language, like JAVA.
	// program language, like JAVA.
	// +kubebuilder:validation:Optional
	CodingLanguage *string `json:"codingLanguage,omitempty" tf:"coding_language,omitempty"`

	// application description.
	// application description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// tcr instance id.
	// tcr instance id.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// repository name.
	// repository name.
	// +kubebuilder:validation:Optional
	RepoName *string `json:"repoName,omitempty" tf:"repo_name,omitempty"`

	// registry address.
	// registry address.
	// +kubebuilder:validation:Optional
	RepoServer *string `json:"repoServer,omitempty" tf:"repo_server,omitempty"`

	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	// repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
	// +kubebuilder:validation:Optional
	RepoType *float64 `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// application tag list.
	// application tag list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// create image repo or not.
	// create image repo or not.
	// +kubebuilder:validation:Optional
	UseDefaultImageService *float64 `json:"useDefaultImageService,omitempty" tf:"use_default_image_service,omitempty"`
}

// ApplicationSpec defines the desired state of Application
type ApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplicationInitParameters `json:"initProvider,omitempty"`
}

// ApplicationStatus defines the observed state of Application.
type ApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Application is the Schema for the Applications API. Provides a resource to create a tem application
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Application struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.applicationName) || (has(self.initProvider) && has(self.initProvider.applicationName))",message="spec.forProvider.applicationName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.codingLanguage) || (has(self.initProvider) && has(self.initProvider.codingLanguage))",message="spec.forProvider.codingLanguage is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	Spec   ApplicationSpec   `json:"spec"`
	Status ApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationList contains a list of Applications
type ApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Application `json:"items"`
}

// Repository type metadata.
var (
	Application_Kind             = "Application"
	Application_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Application_Kind}.String()
	Application_KindAPIVersion   = Application_Kind + "." + CRDGroupVersion.String()
	Application_GroupVersionKind = CRDGroupVersion.WithKind(Application_Kind)
)

func init() {
	SchemeBuilder.Register(&Application{}, &ApplicationList{})
}
