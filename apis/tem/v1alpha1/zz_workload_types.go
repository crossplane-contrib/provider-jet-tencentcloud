// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeployStrategyConfInitParameters struct {

	// interval between batches.
	// interval between batches.
	BatchInterval *float64 `json:"batchInterval,omitempty" tf:"batch_interval,omitempty"`

	// beta batch number.
	// beta batch number.
	BetaBatchNum *float64 `json:"betaBatchNum,omitempty" tf:"beta_batch_num,omitempty"`

	// strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
	// strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
	DeployStrategyType *float64 `json:"deployStrategyType,omitempty" tf:"deploy_strategy_type,omitempty"`

	// force update.
	// force update.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// minimal available instances duration deployment.
	// minimal available instances duration deployment.
	MinAvailable *float64 `json:"minAvailable,omitempty" tf:"min_available,omitempty"`

	// total batch number.
	// total batch number.
	TotalBatchCount *float64 `json:"totalBatchCount,omitempty" tf:"total_batch_count,omitempty"`
}

type DeployStrategyConfObservation struct {

	// interval between batches.
	// interval between batches.
	BatchInterval *float64 `json:"batchInterval,omitempty" tf:"batch_interval,omitempty"`

	// beta batch number.
	// beta batch number.
	BetaBatchNum *float64 `json:"betaBatchNum,omitempty" tf:"beta_batch_num,omitempty"`

	// strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
	// strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
	DeployStrategyType *float64 `json:"deployStrategyType,omitempty" tf:"deploy_strategy_type,omitempty"`

	// force update.
	// force update.
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// minimal available instances duration deployment.
	// minimal available instances duration deployment.
	MinAvailable *float64 `json:"minAvailable,omitempty" tf:"min_available,omitempty"`

	// total batch number.
	// total batch number.
	TotalBatchCount *float64 `json:"totalBatchCount,omitempty" tf:"total_batch_count,omitempty"`
}

type DeployStrategyConfParameters struct {

	// interval between batches.
	// interval between batches.
	// +kubebuilder:validation:Optional
	BatchInterval *float64 `json:"batchInterval,omitempty" tf:"batch_interval,omitempty"`

	// beta batch number.
	// beta batch number.
	// +kubebuilder:validation:Optional
	BetaBatchNum *float64 `json:"betaBatchNum,omitempty" tf:"beta_batch_num,omitempty"`

	// strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
	// strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
	// +kubebuilder:validation:Optional
	DeployStrategyType *float64 `json:"deployStrategyType" tf:"deploy_strategy_type,omitempty"`

	// force update.
	// force update.
	// +kubebuilder:validation:Optional
	Force *bool `json:"force,omitempty" tf:"force,omitempty"`

	// minimal available instances duration deployment.
	// minimal available instances duration deployment.
	// +kubebuilder:validation:Optional
	MinAvailable *float64 `json:"minAvailable,omitempty" tf:"min_available,omitempty"`

	// total batch number.
	// total batch number.
	// +kubebuilder:validation:Optional
	TotalBatchCount *float64 `json:"totalBatchCount" tf:"total_batch_count,omitempty"`
}

type EnvConfInitParameters struct {

	// referenced config name when type=referenced.
	// referenced config name when type=referenced.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// env key.
	// env key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// referenced secret name when type=referenced.
	// referenced secret name when type=referenced.
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// env type, support default, referenced.
	// env type, support default, referenced.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// env value.
	// env value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvConfObservation struct {

	// referenced config name when type=referenced.
	// referenced config name when type=referenced.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// env key.
	// env key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// referenced secret name when type=referenced.
	// referenced secret name when type=referenced.
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// env type, support default, referenced.
	// env type, support default, referenced.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// env value.
	// env value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EnvConfParameters struct {

	// referenced config name when type=referenced.
	// referenced config name when type=referenced.
	// +kubebuilder:validation:Optional
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// env key.
	// env key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// referenced secret name when type=referenced.
	// referenced secret name when type=referenced.
	// +kubebuilder:validation:Optional
	Secret *string `json:"secret,omitempty" tf:"secret,omitempty"`

	// env type, support default, referenced.
	// env type, support default, referenced.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// env value.
	// env value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type LivenessInitParameters struct {

	// script.
	// script.
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for liveness check.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for liveness check.
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// liveness check port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for liveness check.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LivenessObservation struct {

	// script.
	// script.
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for liveness check.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for liveness check.
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// liveness check port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for liveness check.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type LivenessParameters struct {

	// script.
	// script.
	// +kubebuilder:validation:Optional
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for liveness check.
	// +kubebuilder:validation:Optional
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for liveness check.
	// +kubebuilder:validation:Optional
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// liveness check port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for liveness check.
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ReadinessInitParameters struct {

	// script.
	// script.
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for readiness check.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for readiness check.
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// readiness check port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for readiness check.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ReadinessObservation struct {

	// script.
	// script.
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for readiness check.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for readiness check.
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// readiness check port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for readiness check.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ReadinessParameters struct {

	// script.
	// script.
	// +kubebuilder:validation:Optional
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for readiness check.
	// +kubebuilder:validation:Optional
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for readiness check.
	// +kubebuilder:validation:Optional
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// readiness check port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for readiness check.
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type StartupProbeInitParameters struct {

	// script.
	// script.
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for startup check.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for startup check.
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// startup check port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for startup check.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StartupProbeObservation struct {

	// script.
	// script.
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for startup check.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for startup check.
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// startup check port.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for startup check.
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StartupProbeParameters struct {

	// script.
	// script.
	// +kubebuilder:validation:Optional
	Exec *string `json:"exec,omitempty" tf:"exec,omitempty"`

	// initial delay seconds for liveness check.
	// initial delay seconds for startup check.
	// +kubebuilder:validation:Optional
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty" tf:"initial_delay_seconds,omitempty"`

	// path.
	// path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// period seconds for liveness check.
	// period seconds for startup check.
	// +kubebuilder:validation:Optional
	PeriodSeconds *float64 `json:"periodSeconds,omitempty" tf:"period_seconds,omitempty"`

	// liveness check port.
	// startup check port.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// protocol.
	// protocol.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// timeout seconds for liveness check.
	// timeout seconds for startup check.
	// +kubebuilder:validation:Optional
	TimeoutSeconds *float64 `json:"timeoutSeconds,omitempty" tf:"timeout_seconds,omitempty"`

	// env type, support default, referenced.
	// check type, support HttpGet, TcpSocket and Exec.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type StorageConfsInitParameters struct {

	// volume ip.
	// volume ip.
	StorageVolIP *string `json:"storageVolIp,omitempty" tf:"storage_vol_ip,omitempty"`

	// volume name.
	// volume name.
	StorageVolName *string `json:"storageVolName,omitempty" tf:"storage_vol_name,omitempty"`

	// volume path.
	// volume path.
	StorageVolPath *string `json:"storageVolPath,omitempty" tf:"storage_vol_path,omitempty"`
}

type StorageConfsObservation struct {

	// volume ip.
	// volume ip.
	StorageVolIP *string `json:"storageVolIp,omitempty" tf:"storage_vol_ip,omitempty"`

	// volume name.
	// volume name.
	StorageVolName *string `json:"storageVolName,omitempty" tf:"storage_vol_name,omitempty"`

	// volume path.
	// volume path.
	StorageVolPath *string `json:"storageVolPath,omitempty" tf:"storage_vol_path,omitempty"`
}

type StorageConfsParameters struct {

	// volume ip.
	// volume ip.
	// +kubebuilder:validation:Optional
	StorageVolIP *string `json:"storageVolIp" tf:"storage_vol_ip,omitempty"`

	// volume name.
	// volume name.
	// +kubebuilder:validation:Optional
	StorageVolName *string `json:"storageVolName" tf:"storage_vol_name,omitempty"`

	// volume path.
	// volume path.
	// +kubebuilder:validation:Optional
	StorageVolPath *string `json:"storageVolPath" tf:"storage_vol_path,omitempty"`
}

type StorageMountConfsInitParameters struct {

	// mount path.
	// mount path.
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// volume name.
	// volume name.
	VolumeName *string `json:"volumeName,omitempty" tf:"volume_name,omitempty"`
}

type StorageMountConfsObservation struct {

	// mount path.
	// mount path.
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// volume name.
	// volume name.
	VolumeName *string `json:"volumeName,omitempty" tf:"volume_name,omitempty"`
}

type StorageMountConfsParameters struct {

	// mount path.
	// mount path.
	// +kubebuilder:validation:Optional
	MountPath *string `json:"mountPath" tf:"mount_path,omitempty"`

	// volume name.
	// volume name.
	// +kubebuilder:validation:Optional
	VolumeName *string `json:"volumeName" tf:"volume_name,omitempty"`
}

type WorkloadInitParameters struct {

	// cpu.
	// cpu.
	CPUSpec *float64 `json:"cpuSpec,omitempty" tf:"cpu_spec,omitempty"`

	// deploy mode, support IMAGE.
	// deploy mode, support IMAGE.
	DeployMode *string `json:"deployMode,omitempty" tf:"deploy_mode,omitempty"`

	// deploy strategy.
	// deploy strategy.
	DeployStrategyConf []DeployStrategyConfInitParameters `json:"deployStrategyConf,omitempty" tf:"deploy_strategy_conf,omitempty"`

	// deploy version.
	// deploy version.
	DeployVersion *string `json:"deployVersion,omitempty" tf:"deploy_version,omitempty"`

	// .
	// .
	EnvConf []EnvConfInitParameters `json:"envConf,omitempty" tf:"env_conf,omitempty"`

	// repository name.
	// repository name.
	ImgRepo *string `json:"imgRepo,omitempty" tf:"img_repo,omitempty"`

	// initial pod number.
	// initial pod number.
	InitPodNum *float64 `json:"initPodNum,omitempty" tf:"init_pod_num,omitempty"`

	// liveness config.
	// liveness config.
	Liveness []LivenessInitParameters `json:"liveness,omitempty" tf:"liveness,omitempty"`

	// mem.
	// mem.
	MemorySpec *float64 `json:"memorySpec,omitempty" tf:"memory_spec,omitempty"`

	// mem.
	// mem.
	PostStart *string `json:"postStart,omitempty" tf:"post_start,omitempty"`

	// mem.
	// mem.
	PreStop *string `json:"preStop,omitempty" tf:"pre_stop,omitempty"`

	// .
	// .
	Readiness []ReadinessInitParameters `json:"readiness,omitempty" tf:"readiness,omitempty"`

	// repo server addr when deploy by image.
	// repo server addr when deploy by image.
	RepoServer *string `json:"repoServer,omitempty" tf:"repo_server,omitempty"`

	// repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
	// repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
	RepoType *float64 `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// security groups.
	// security groups.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// .
	// .
	StartupProbe []StartupProbeInitParameters `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// storage configuration.
	// storage configuration.
	StorageConfs []StorageConfsInitParameters `json:"storageConfs,omitempty" tf:"storage_confs,omitempty"`

	// storage mount configuration.
	// storage mount configuration.
	StorageMountConfs []StorageMountConfsInitParameters `json:"storageMountConfs,omitempty" tf:"storage_mount_confs,omitempty"`

	// tcr instance id when deploy by image.
	// tcr instance id when deploy by image.
	TcrInstanceID *string `json:"tcrInstanceId,omitempty" tf:"tcr_instance_id,omitempty"`
}

type WorkloadObservation struct {

	// application ID.
	// application ID.
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// cpu.
	// cpu.
	CPUSpec *float64 `json:"cpuSpec,omitempty" tf:"cpu_spec,omitempty"`

	// deploy mode, support IMAGE.
	// deploy mode, support IMAGE.
	DeployMode *string `json:"deployMode,omitempty" tf:"deploy_mode,omitempty"`

	// deploy strategy.
	// deploy strategy.
	DeployStrategyConf []DeployStrategyConfObservation `json:"deployStrategyConf,omitempty" tf:"deploy_strategy_conf,omitempty"`

	// deploy version.
	// deploy version.
	DeployVersion *string `json:"deployVersion,omitempty" tf:"deploy_version,omitempty"`

	// .
	// .
	EnvConf []EnvConfObservation `json:"envConf,omitempty" tf:"env_conf,omitempty"`

	// environment ID.
	// environment ID.
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// repository name.
	// repository name.
	ImgRepo *string `json:"imgRepo,omitempty" tf:"img_repo,omitempty"`

	// initial pod number.
	// initial pod number.
	InitPodNum *float64 `json:"initPodNum,omitempty" tf:"init_pod_num,omitempty"`

	// liveness config.
	// liveness config.
	Liveness []LivenessObservation `json:"liveness,omitempty" tf:"liveness,omitempty"`

	// mem.
	// mem.
	MemorySpec *float64 `json:"memorySpec,omitempty" tf:"memory_spec,omitempty"`

	// mem.
	// mem.
	PostStart *string `json:"postStart,omitempty" tf:"post_start,omitempty"`

	// mem.
	// mem.
	PreStop *string `json:"preStop,omitempty" tf:"pre_stop,omitempty"`

	// .
	// .
	Readiness []ReadinessObservation `json:"readiness,omitempty" tf:"readiness,omitempty"`

	// repo server addr when deploy by image.
	// repo server addr when deploy by image.
	RepoServer *string `json:"repoServer,omitempty" tf:"repo_server,omitempty"`

	// repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
	// repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
	RepoType *float64 `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// security groups.
	// security groups.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// .
	// .
	StartupProbe []StartupProbeObservation `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// storage configuration.
	// storage configuration.
	StorageConfs []StorageConfsObservation `json:"storageConfs,omitempty" tf:"storage_confs,omitempty"`

	// storage mount configuration.
	// storage mount configuration.
	StorageMountConfs []StorageMountConfsObservation `json:"storageMountConfs,omitempty" tf:"storage_mount_confs,omitempty"`

	// tcr instance id when deploy by image.
	// tcr instance id when deploy by image.
	TcrInstanceID *string `json:"tcrInstanceId,omitempty" tf:"tcr_instance_id,omitempty"`
}

type WorkloadParameters struct {

	// application ID.
	// application ID.
	// +crossplane:generate:reference:type=Application
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a Application to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a Application to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// cpu.
	// cpu.
	// +kubebuilder:validation:Optional
	CPUSpec *float64 `json:"cpuSpec,omitempty" tf:"cpu_spec,omitempty"`

	// deploy mode, support IMAGE.
	// deploy mode, support IMAGE.
	// +kubebuilder:validation:Optional
	DeployMode *string `json:"deployMode,omitempty" tf:"deploy_mode,omitempty"`

	// deploy strategy.
	// deploy strategy.
	// +kubebuilder:validation:Optional
	DeployStrategyConf []DeployStrategyConfParameters `json:"deployStrategyConf,omitempty" tf:"deploy_strategy_conf,omitempty"`

	// deploy version.
	// deploy version.
	// +kubebuilder:validation:Optional
	DeployVersion *string `json:"deployVersion,omitempty" tf:"deploy_version,omitempty"`

	// .
	// .
	// +kubebuilder:validation:Optional
	EnvConf []EnvConfParameters `json:"envConf,omitempty" tf:"env_conf,omitempty"`

	// environment ID.
	// environment ID.
	// +crossplane:generate:reference:type=Environment
	// +kubebuilder:validation:Optional
	EnvironmentID *string `json:"environmentId,omitempty" tf:"environment_id,omitempty"`

	// Reference to a Environment to populate environmentId.
	// +kubebuilder:validation:Optional
	EnvironmentIDRef *v1.Reference `json:"environmentIdRef,omitempty" tf:"-"`

	// Selector for a Environment to populate environmentId.
	// +kubebuilder:validation:Optional
	EnvironmentIDSelector *v1.Selector `json:"environmentIdSelector,omitempty" tf:"-"`

	// repository name.
	// repository name.
	// +kubebuilder:validation:Optional
	ImgRepo *string `json:"imgRepo,omitempty" tf:"img_repo,omitempty"`

	// initial pod number.
	// initial pod number.
	// +kubebuilder:validation:Optional
	InitPodNum *float64 `json:"initPodNum,omitempty" tf:"init_pod_num,omitempty"`

	// liveness config.
	// liveness config.
	// +kubebuilder:validation:Optional
	Liveness []LivenessParameters `json:"liveness,omitempty" tf:"liveness,omitempty"`

	// mem.
	// mem.
	// +kubebuilder:validation:Optional
	MemorySpec *float64 `json:"memorySpec,omitempty" tf:"memory_spec,omitempty"`

	// mem.
	// mem.
	// +kubebuilder:validation:Optional
	PostStart *string `json:"postStart,omitempty" tf:"post_start,omitempty"`

	// mem.
	// mem.
	// +kubebuilder:validation:Optional
	PreStop *string `json:"preStop,omitempty" tf:"pre_stop,omitempty"`

	// .
	// .
	// +kubebuilder:validation:Optional
	Readiness []ReadinessParameters `json:"readiness,omitempty" tf:"readiness,omitempty"`

	// repo server addr when deploy by image.
	// repo server addr when deploy by image.
	// +kubebuilder:validation:Optional
	RepoServer *string `json:"repoServer,omitempty" tf:"repo_server,omitempty"`

	// repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
	// repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
	// +kubebuilder:validation:Optional
	RepoType *float64 `json:"repoType,omitempty" tf:"repo_type,omitempty"`

	// security groups.
	// security groups.
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// .
	// .
	// +kubebuilder:validation:Optional
	StartupProbe []StartupProbeParameters `json:"startupProbe,omitempty" tf:"startup_probe,omitempty"`

	// storage configuration.
	// storage configuration.
	// +kubebuilder:validation:Optional
	StorageConfs []StorageConfsParameters `json:"storageConfs,omitempty" tf:"storage_confs,omitempty"`

	// storage mount configuration.
	// storage mount configuration.
	// +kubebuilder:validation:Optional
	StorageMountConfs []StorageMountConfsParameters `json:"storageMountConfs,omitempty" tf:"storage_mount_confs,omitempty"`

	// tcr instance id when deploy by image.
	// tcr instance id when deploy by image.
	// +kubebuilder:validation:Optional
	TcrInstanceID *string `json:"tcrInstanceId,omitempty" tf:"tcr_instance_id,omitempty"`
}

// WorkloadSpec defines the desired state of Workload
type WorkloadSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkloadParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WorkloadInitParameters `json:"initProvider,omitempty"`
}

// WorkloadStatus defines the observed state of Workload.
type WorkloadStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkloadObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Workload is the Schema for the Workloads API. Provides a resource to create a tem workload
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Workload struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cpuSpec) || (has(self.initProvider) && has(self.initProvider.cpuSpec))",message="spec.forProvider.cpuSpec is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.deployMode) || (has(self.initProvider) && has(self.initProvider.deployMode))",message="spec.forProvider.deployMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.deployVersion) || (has(self.initProvider) && has(self.initProvider.deployVersion))",message="spec.forProvider.deployVersion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.imgRepo) || (has(self.initProvider) && has(self.initProvider.imgRepo))",message="spec.forProvider.imgRepo is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.initPodNum) || (has(self.initProvider) && has(self.initProvider.initPodNum))",message="spec.forProvider.initPodNum is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.memorySpec) || (has(self.initProvider) && has(self.initProvider.memorySpec))",message="spec.forProvider.memorySpec is a required parameter"
	Spec   WorkloadSpec   `json:"spec"`
	Status WorkloadStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkloadList contains a list of Workloads
type WorkloadList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workload `json:"items"`
}

// Repository type metadata.
var (
	Workload_Kind             = "Workload"
	Workload_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Workload_Kind}.String()
	Workload_KindAPIVersion   = Workload_Kind + "." + CRDGroupVersion.String()
	Workload_GroupVersionKind = CRDGroupVersion.WithKind(Workload_Kind)
)

func init() {
	SchemeBuilder.Register(&Workload{}, &WorkloadList{})
}
