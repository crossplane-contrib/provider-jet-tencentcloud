// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCBandwidthPackageAttachmentInitParameters struct {

	// Bandwidth packet type, currently supports BGP type, indicating that the internal resource is BGP IP.
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Bandwidth packet protocol type. Currently ipv4 and ipv6 protocol types are supported.
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The unique ID of the resource, currently supports EIP resources and LB resources, such as eip-xxxx, lb-xxxx.
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource types, including Address, LoadBalance.
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type VPCBandwidthPackageAttachmentObservation struct {

	// Bandwidth package unique ID, in the form of bwp-xxxx.
	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	BandwidthPackageID *string `json:"bandwidthPackageId,omitempty" tf:"bandwidth_package_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Bandwidth packet type, currently supports BGP type, indicating that the internal resource is BGP IP.
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Bandwidth packet protocol type. Currently ipv4 and ipv6 protocol types are supported.
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The unique ID of the resource, currently supports EIP resources and LB resources, such as eip-xxxx, lb-xxxx.
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource types, including Address, LoadBalance.
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type VPCBandwidthPackageAttachmentParameters struct {

	// Bandwidth package unique ID, in the form of bwp-xxxx.
	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	// +crossplane:generate:reference:type=VPCBandwidthPackage
	// +kubebuilder:validation:Optional
	BandwidthPackageID *string `json:"bandwidthPackageId,omitempty" tf:"bandwidth_package_id,omitempty"`

	// Reference to a VPCBandwidthPackage to populate bandwidthPackageId.
	// +kubebuilder:validation:Optional
	BandwidthPackageIDRef *v1.Reference `json:"bandwidthPackageIdRef,omitempty" tf:"-"`

	// Selector for a VPCBandwidthPackage to populate bandwidthPackageId.
	// +kubebuilder:validation:Optional
	BandwidthPackageIDSelector *v1.Selector `json:"bandwidthPackageIdSelector,omitempty" tf:"-"`

	// Bandwidth packet type, currently supports BGP type, indicating that the internal resource is BGP IP.
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	// +kubebuilder:validation:Optional
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Bandwidth packet protocol type. Currently ipv4 and ipv6 protocol types are supported.
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The unique ID of the resource, currently supports EIP resources and LB resources, such as eip-xxxx, lb-xxxx.
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Resource types, including Address, LoadBalance.
	// Resource types, including `Address`, `LoadBalance`.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

// VPCBandwidthPackageAttachmentSpec defines the desired state of VPCBandwidthPackageAttachment
type VPCBandwidthPackageAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCBandwidthPackageAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCBandwidthPackageAttachmentInitParameters `json:"initProvider,omitempty"`
}

// VPCBandwidthPackageAttachmentStatus defines the observed state of VPCBandwidthPackageAttachment.
type VPCBandwidthPackageAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCBandwidthPackageAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCBandwidthPackageAttachment is the Schema for the VPCBandwidthPackageAttachments API. Provides a resource to create a vpc bandwidth_package_attachment
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type VPCBandwidthPackageAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	Spec   VPCBandwidthPackageAttachmentSpec   `json:"spec"`
	Status VPCBandwidthPackageAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCBandwidthPackageAttachmentList contains a list of VPCBandwidthPackageAttachments
type VPCBandwidthPackageAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCBandwidthPackageAttachment `json:"items"`
}

// Repository type metadata.
var (
	VPCBandwidthPackageAttachment_Kind             = "VPCBandwidthPackageAttachment"
	VPCBandwidthPackageAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCBandwidthPackageAttachment_Kind}.String()
	VPCBandwidthPackageAttachment_KindAPIVersion   = VPCBandwidthPackageAttachment_Kind + "." + CRDGroupVersion.String()
	VPCBandwidthPackageAttachment_GroupVersionKind = CRDGroupVersion.WithKind(VPCBandwidthPackageAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCBandwidthPackageAttachment{}, &VPCBandwidthPackageAttachmentList{})
}
