// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NatGatewaySnatInitParameters struct {

	// Description.
	// Description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Instance ID, required when resource_type is NETWORKINTERFACE.
	// Instance ID, required when `resource_type` is NETWORKINTERFACE.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Private IPs of the instance's primary ENI, required when resource_type is NETWORKINTERFACE.
	// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
	InstancePrivateIPAddr *string `json:"instancePrivateIpAddr,omitempty" tf:"instance_private_ip_addr,omitempty"`

	// NAT gateway ID.
	// NAT gateway ID.
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Elastic IP address pool.
	// Elastic IP address pool.
	PublicIPAddr []*string `json:"publicIpAddr,omitempty" tf:"public_ip_addr,omitempty"`

	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// The IPv4 CIDR of the subnet, required when resource_type is SUBNET.
	// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
	SubnetCidrBlock *string `json:"subnetCidrBlock,omitempty" tf:"subnet_cidr_block,omitempty"`
}

type NatGatewaySnatObservation struct {

	// Create time.
	// Create time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description.
	// Description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance ID, required when resource_type is NETWORKINTERFACE.
	// Instance ID, required when `resource_type` is NETWORKINTERFACE.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Private IPs of the instance's primary ENI, required when resource_type is NETWORKINTERFACE.
	// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
	InstancePrivateIPAddr *string `json:"instancePrivateIpAddr,omitempty" tf:"instance_private_ip_addr,omitempty"`

	// NAT gateway ID.
	// NAT gateway ID.
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Elastic IP address pool.
	// Elastic IP address pool.
	PublicIPAddr []*string `json:"publicIpAddr,omitempty" tf:"public_ip_addr,omitempty"`

	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// SNAT rule ID.
	// SNAT rule ID.
	SnatID *string `json:"snatId,omitempty" tf:"snat_id,omitempty"`

	// The IPv4 CIDR of the subnet, required when resource_type is SUBNET.
	// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
	SubnetCidrBlock *string `json:"subnetCidrBlock,omitempty" tf:"subnet_cidr_block,omitempty"`

	// Subnet instance ID, required when resource_type is SUBNET.
	// Subnet instance ID, required when `resource_type` is SUBNET.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type NatGatewaySnatParameters struct {

	// Description.
	// Description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Instance ID, required when resource_type is NETWORKINTERFACE.
	// Instance ID, required when `resource_type` is NETWORKINTERFACE.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Private IPs of the instance's primary ENI, required when resource_type is NETWORKINTERFACE.
	// Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
	// +kubebuilder:validation:Optional
	InstancePrivateIPAddr *string `json:"instancePrivateIpAddr,omitempty" tf:"instance_private_ip_addr,omitempty"`

	// NAT gateway ID.
	// NAT gateway ID.
	// +kubebuilder:validation:Optional
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Elastic IP address pool.
	// Elastic IP address pool.
	// +kubebuilder:validation:Optional
	PublicIPAddr []*string `json:"publicIpAddr,omitempty" tf:"public_ip_addr,omitempty"`

	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// The IPv4 CIDR of the subnet, required when resource_type is SUBNET.
	// The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
	// +kubebuilder:validation:Optional
	SubnetCidrBlock *string `json:"subnetCidrBlock,omitempty" tf:"subnet_cidr_block,omitempty"`

	// Subnet instance ID, required when resource_type is SUBNET.
	// Subnet instance ID, required when `resource_type` is SUBNET.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

// NatGatewaySnatSpec defines the desired state of NatGatewaySnat
type NatGatewaySnatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatGatewaySnatParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NatGatewaySnatInitParameters `json:"initProvider,omitempty"`
}

// NatGatewaySnatStatus defines the observed state of NatGatewaySnat.
type NatGatewaySnatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatGatewaySnatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NatGatewaySnat is the Schema for the NatGatewaySnats API. Provides a resource to create a NAT Gateway SNat rule.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type NatGatewaySnat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.natGatewayId) || (has(self.initProvider) && has(self.initProvider.natGatewayId))",message="spec.forProvider.natGatewayId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publicIpAddr) || (has(self.initProvider) && has(self.initProvider.publicIpAddr))",message="spec.forProvider.publicIpAddr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	Spec   NatGatewaySnatSpec   `json:"spec"`
	Status NatGatewaySnatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatGatewaySnatList contains a list of NatGatewaySnats
type NatGatewaySnatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NatGatewaySnat `json:"items"`
}

// Repository type metadata.
var (
	NatGatewaySnat_Kind             = "NatGatewaySnat"
	NatGatewaySnat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NatGatewaySnat_Kind}.String()
	NatGatewaySnat_KindAPIVersion   = NatGatewaySnat_Kind + "." + CRDGroupVersion.String()
	NatGatewaySnat_GroupVersionKind = CRDGroupVersion.WithKind(NatGatewaySnat_Kind)
)

func init() {
	SchemeBuilder.Register(&NatGatewaySnat{}, &NatGatewaySnatList{})
}
