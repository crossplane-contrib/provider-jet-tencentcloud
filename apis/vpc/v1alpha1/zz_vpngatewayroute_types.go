// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNGatewayRouteInitParameters struct {

	// Destination IDC IP range.
	// Destination IDC IP range.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Instance ID of the next hop.
	// Instance ID of the next hop.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Priority. Valid values: 0 and 100.
	// Priority. Valid values: 0 and 100.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Status. Valid values: ENABLE and DISABLE.
	// Status. Valid values: ENABLE and DISABLE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VPNGatewayRouteObservation struct {

	// Create time.
	// Create time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Destination IDC IP range.
	// Destination IDC IP range.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance ID of the next hop.
	// Instance ID of the next hop.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Priority. Valid values: 0 and 100.
	// Priority. Valid values: 0 and 100.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Route ID.
	// Route ID.
	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`

	// Status. Valid values: ENABLE and DISABLE.
	// Status. Valid values: ENABLE and DISABLE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Route type. Default value: Static.
	// Route type. Default value: Static.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Update time.
	// Update time.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`

	// VPN gateway ID.
	// VPN gateway ID.
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`
}

type VPNGatewayRouteParameters struct {

	// Destination IDC IP range.
	// Destination IDC IP range.
	// +kubebuilder:validation:Optional
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Instance ID of the next hop.
	// Instance ID of the next hop.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	// Next hop type (type of the associated instance). Valid values: VPNCONN (VPN tunnel) and CCN (CCN instance).
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Priority. Valid values: 0 and 100.
	// Priority. Valid values: 0 and 100.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// Status. Valid values: ENABLE and DISABLE.
	// Status. Valid values: ENABLE and DISABLE.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// VPN gateway ID.
	// VPN gateway ID.
	// +crossplane:generate:reference:type=VPNGateway
	// +kubebuilder:validation:Optional
	VPNGatewayID *string `json:"vpnGatewayId,omitempty" tf:"vpn_gateway_id,omitempty"`

	// Reference to a VPNGateway to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDRef *v1.Reference `json:"vpnGatewayIdRef,omitempty" tf:"-"`

	// Selector for a VPNGateway to populate vpnGatewayId.
	// +kubebuilder:validation:Optional
	VPNGatewayIDSelector *v1.Selector `json:"vpnGatewayIdSelector,omitempty" tf:"-"`
}

// VPNGatewayRouteSpec defines the desired state of VPNGatewayRoute
type VPNGatewayRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNGatewayRouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPNGatewayRouteInitParameters `json:"initProvider,omitempty"`
}

// VPNGatewayRouteStatus defines the observed state of VPNGatewayRoute.
type VPNGatewayRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNGatewayRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayRoute is the Schema for the VPNGatewayRoutes API. Provides a resource to create a VPN gateway route.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type VPNGatewayRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationCidrBlock) || (has(self.initProvider) && has(self.initProvider.destinationCidrBlock))",message="spec.forProvider.destinationCidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceType) || (has(self.initProvider) && has(self.initProvider.instanceType))",message="spec.forProvider.instanceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.priority) || (has(self.initProvider) && has(self.initProvider.priority))",message="spec.forProvider.priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   VPNGatewayRouteSpec   `json:"spec"`
	Status VPNGatewayRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayRouteList contains a list of VPNGatewayRoutes
type VPNGatewayRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNGatewayRoute `json:"items"`
}

// Repository type metadata.
var (
	VPNGatewayRoute_Kind             = "VPNGatewayRoute"
	VPNGatewayRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNGatewayRoute_Kind}.String()
	VPNGatewayRoute_KindAPIVersion   = VPNGatewayRoute_Kind + "." + CRDGroupVersion.String()
	VPNGatewayRoute_GroupVersionKind = CRDGroupVersion.WithKind(VPNGatewayRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNGatewayRoute{}, &VPNGatewayRouteList{})
}
