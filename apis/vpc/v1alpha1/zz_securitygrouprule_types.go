// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityGroupRuleAddressTemplateInitParameters struct {

	// Address template group ID, conflicts with `template_id`.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Address template ID, conflicts with `group_id`.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type SecurityGroupRuleAddressTemplateObservation struct {

	// Address template group ID, conflicts with `template_id`.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Address template ID, conflicts with `group_id`.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type SecurityGroupRuleAddressTemplateParameters struct {

	// Address template group ID, conflicts with `template_id`.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Address template ID, conflicts with `group_id`.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type SecurityGroupRuleInitParameters struct {

	// ID of the address template, and confilicts with `source_sgid` and `cidr_ip`.
	AddressTemplate []SecurityGroupRuleAddressTemplateInitParameters `json:"addressTemplate,omitempty" tf:"address_template,omitempty"`

	// An IP address network or segment, and conflict with `source_sgid` and `address_template`.
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// Description of the security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `protocol_template`.
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The security group rule index number, the value of which dynamically changes as the security group rule changes.
	PolicyIndex *float64 `json:"policyIndex,omitempty" tf:"policy_index,omitempty"`

	// Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and confilicts with `protocol_template`.
	PortRange *string `json:"portRange,omitempty" tf:"port_range,omitempty"`

	// ID of the address template, and conflict with `ip_protocol`, `port_range`.
	ProtocolTemplate []SecurityGroupRuleProtocolTemplateInitParameters `json:"protocolTemplate,omitempty" tf:"protocol_template,omitempty"`

	// ID of the nested security group, and conflicts with `cidr_ip` and `address_template`.
	SourceSgid *string `json:"sourceSgid,omitempty" tf:"source_sgid,omitempty"`

	// Type of the security group rule. Valid values: `ingress` and `egress`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecurityGroupRuleObservation struct {

	// ID of the address template, and confilicts with `source_sgid` and `cidr_ip`.
	AddressTemplate []SecurityGroupRuleAddressTemplateObservation `json:"addressTemplate,omitempty" tf:"address_template,omitempty"`

	// An IP address network or segment, and conflict with `source_sgid` and `address_template`.
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// Description of the security group rule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `protocol_template`.
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The security group rule index number, the value of which dynamically changes as the security group rule changes.
	PolicyIndex *float64 `json:"policyIndex,omitempty" tf:"policy_index,omitempty"`

	// Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and confilicts with `protocol_template`.
	PortRange *string `json:"portRange,omitempty" tf:"port_range,omitempty"`

	// ID of the address template, and conflict with `ip_protocol`, `port_range`.
	ProtocolTemplate []SecurityGroupRuleProtocolTemplateObservation `json:"protocolTemplate,omitempty" tf:"protocol_template,omitempty"`

	// ID of the security group to be queried.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// ID of the nested security group, and conflicts with `cidr_ip` and `address_template`.
	SourceSgid *string `json:"sourceSgid,omitempty" tf:"source_sgid,omitempty"`

	// Type of the security group rule. Valid values: `ingress` and `egress`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecurityGroupRuleParameters struct {

	// ID of the address template, and confilicts with `source_sgid` and `cidr_ip`.
	// +kubebuilder:validation:Optional
	AddressTemplate []SecurityGroupRuleAddressTemplateParameters `json:"addressTemplate,omitempty" tf:"address_template,omitempty"`

	// An IP address network or segment, and conflict with `source_sgid` and `address_template`.
	// +kubebuilder:validation:Optional
	CidrIP *string `json:"cidrIp,omitempty" tf:"cidr_ip,omitempty"`

	// Description of the security group rule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Type of IP protocol. Valid values: `TCP`, `UDP` and `ICMP`. Default to all types protocol, and conflicts with `protocol_template`.
	// +kubebuilder:validation:Optional
	IPProtocol *string `json:"ipProtocol,omitempty" tf:"ip_protocol,omitempty"`

	// Rule policy of security group. Valid values: `ACCEPT` and `DROP`.
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The security group rule index number, the value of which dynamically changes as the security group rule changes.
	// +kubebuilder:validation:Optional
	PolicyIndex *float64 `json:"policyIndex,omitempty" tf:"policy_index,omitempty"`

	// Range of the port. The available value can be one, multiple or one segment. E.g. `80`, `80,90` and `80-90`. Default to all ports, and confilicts with `protocol_template`.
	// +kubebuilder:validation:Optional
	PortRange *string `json:"portRange,omitempty" tf:"port_range,omitempty"`

	// ID of the address template, and conflict with `ip_protocol`, `port_range`.
	// +kubebuilder:validation:Optional
	ProtocolTemplate []SecurityGroupRuleProtocolTemplateParameters `json:"protocolTemplate,omitempty" tf:"protocol_template,omitempty"`

	// ID of the security group to be queried.
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`

	// ID of the nested security group, and conflicts with `cidr_ip` and `address_template`.
	// +kubebuilder:validation:Optional
	SourceSgid *string `json:"sourceSgid,omitempty" tf:"source_sgid,omitempty"`

	// Type of the security group rule. Valid values: `ingress` and `egress`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SecurityGroupRuleProtocolTemplateInitParameters struct {

	// Address template group ID, conflicts with `template_id`.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Address template ID, conflicts with `group_id`.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type SecurityGroupRuleProtocolTemplateObservation struct {

	// Address template group ID, conflicts with `template_id`.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Address template ID, conflicts with `group_id`.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type SecurityGroupRuleProtocolTemplateParameters struct {

	// Address template group ID, conflicts with `template_id`.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Address template ID, conflicts with `group_id`.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

// SecurityGroupRuleSpec defines the desired state of SecurityGroupRule
type SecurityGroupRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityGroupRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityGroupRuleInitParameters `json:"initProvider,omitempty"`
}

// SecurityGroupRuleStatus defines the observed state of SecurityGroupRule.
type SecurityGroupRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityGroupRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupRule is the Schema for the SecurityGroupRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type SecurityGroupRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policy) || (has(self.initProvider) && has(self.initProvider.policy))",message="spec.forProvider.policy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   SecurityGroupRuleSpec   `json:"spec"`
	Status SecurityGroupRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupRuleList contains a list of SecurityGroupRules
type SecurityGroupRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroupRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroupRule_Kind             = "SecurityGroupRule"
	SecurityGroupRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityGroupRule_Kind}.String()
	SecurityGroupRule_KindAPIVersion   = SecurityGroupRule_Kind + "." + CRDGroupVersion.String()
	SecurityGroupRule_GroupVersionKind = CRDGroupVersion.WithKind(SecurityGroupRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityGroupRule{}, &SecurityGroupRuleList{})
}
