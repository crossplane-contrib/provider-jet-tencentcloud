// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPNSSLClientInitParameters struct {

	// The name of ssl vpn client to be created.
	// The name of ssl vpn client to be created.
	SSLVPNClientName *string `json:"sslVpnClientName,omitempty" tf:"ssl_vpn_client_name,omitempty"`

	// VPN ssl server id.
	// VPN ssl server id.
	SSLVPNServerID *string `json:"sslVpnServerId,omitempty" tf:"ssl_vpn_server_id,omitempty"`
}

type VPNSSLClientObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of ssl vpn client to be created.
	// The name of ssl vpn client to be created.
	SSLVPNClientName *string `json:"sslVpnClientName,omitempty" tf:"ssl_vpn_client_name,omitempty"`

	// VPN ssl server id.
	// VPN ssl server id.
	SSLVPNServerID *string `json:"sslVpnServerId,omitempty" tf:"ssl_vpn_server_id,omitempty"`
}

type VPNSSLClientParameters struct {

	// The name of ssl vpn client to be created.
	// The name of ssl vpn client to be created.
	// +kubebuilder:validation:Optional
	SSLVPNClientName *string `json:"sslVpnClientName,omitempty" tf:"ssl_vpn_client_name,omitempty"`

	// VPN ssl server id.
	// VPN ssl server id.
	// +kubebuilder:validation:Optional
	SSLVPNServerID *string `json:"sslVpnServerId,omitempty" tf:"ssl_vpn_server_id,omitempty"`
}

// VPNSSLClientSpec defines the desired state of VPNSSLClient
type VPNSSLClientSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNSSLClientParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPNSSLClientInitParameters `json:"initProvider,omitempty"`
}

// VPNSSLClientStatus defines the observed state of VPNSSLClient.
type VPNSSLClientStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNSSLClientObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNSSLClient is the Schema for the VPNSSLClients API. Provide a resource to create a VPN SSL Client.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type VPNSSLClient struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sslVpnClientName) || (has(self.initProvider) && has(self.initProvider.sslVpnClientName))",message="spec.forProvider.sslVpnClientName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sslVpnServerId) || (has(self.initProvider) && has(self.initProvider.sslVpnServerId))",message="spec.forProvider.sslVpnServerId is a required parameter"
	Spec   VPNSSLClientSpec   `json:"spec"`
	Status VPNSSLClientStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNSSLClientList contains a list of VPNSSLClients
type VPNSSLClientList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNSSLClient `json:"items"`
}

// Repository type metadata.
var (
	VPNSSLClient_Kind             = "VPNSSLClient"
	VPNSSLClient_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNSSLClient_Kind}.String()
	VPNSSLClient_KindAPIVersion   = VPNSSLClient_Kind + "." + CRDGroupVersion.String()
	VPNSSLClient_GroupVersionKind = CRDGroupVersion.WithKind(VPNSSLClient_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNSSLClient{}, &VPNSSLClientList{})
}
