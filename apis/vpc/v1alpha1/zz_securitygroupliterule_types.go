// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityGroupLiteRuleInitParameters struct {

	// Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is ACCEPT and DROP. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is 80, 80,443, 80-90 or ALL. The available value of 'protocol' is TCP, UDP, ICMP, ALL and ppm(g?)-xxxxxxxx. When 'protocol' is ICMP or ALL, the 'port' must be ALL.
	// Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egress []*string `json:"egress,omitempty" tf:"egress,omitempty"`

	// Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is ACCEPT and DROP. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is 80, 80,443, 80-90 or ALL. The available value of 'protocol' is TCP, UDP, ICMP, ALL and ppm(g?)-xxxxxxxx. When 'protocol' is ICMP or ALL, the 'port' must be ALL.
	// Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingress []*string `json:"ingress,omitempty" tf:"ingress,omitempty"`
}

type SecurityGroupLiteRuleObservation struct {

	// Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is ACCEPT and DROP. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is 80, 80,443, 80-90 or ALL. The available value of 'protocol' is TCP, UDP, ICMP, ALL and ppm(g?)-xxxxxxxx. When 'protocol' is ICMP or ALL, the 'port' must be ALL.
	// Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Egress []*string `json:"egress,omitempty" tf:"egress,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is ACCEPT and DROP. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is 80, 80,443, 80-90 or ALL. The available value of 'protocol' is TCP, UDP, ICMP, ALL and ppm(g?)-xxxxxxxx. When 'protocol' is ICMP or ALL, the 'port' must be ALL.
	// Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	Ingress []*string `json:"ingress,omitempty" tf:"ingress,omitempty"`

	// ID of the security group.
	// ID of the security group.
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`
}

type SecurityGroupLiteRuleParameters struct {

	// Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is ACCEPT and DROP. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is 80, 80,443, 80-90 or ALL. The available value of 'protocol' is TCP, UDP, ICMP, ALL and ppm(g?)-xxxxxxxx. When 'protocol' is ICMP or ALL, the 'port' must be ALL.
	// Egress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	// +kubebuilder:validation:Optional
	Egress []*string `json:"egress,omitempty" tf:"egress,omitempty"`

	// Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is ACCEPT and DROP. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is 80, 80,443, 80-90 or ALL. The available value of 'protocol' is TCP, UDP, ICMP, ALL and ppm(g?)-xxxxxxxx. When 'protocol' is ICMP or ALL, the 'port' must be ALL.
	// Ingress rules set. A rule must match the following format: [action]#[source]#[port]#[protocol]. The available value of 'action' is `ACCEPT` and `DROP`. The 'source' can be an IP address network, segment, security group ID and Address Template ID. The 'port' valid format is `80`, `80,443`, `80-90` or `ALL`. The available value of 'protocol' is `TCP`, `UDP`, `ICMP`, `ALL` and `ppm(g?)-xxxxxxxx`. When 'protocol' is `ICMP` or `ALL`, the 'port' must be `ALL`.
	// +kubebuilder:validation:Optional
	Ingress []*string `json:"ingress,omitempty" tf:"ingress,omitempty"`

	// ID of the security group.
	// ID of the security group.
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupID *string `json:"securityGroupId,omitempty" tf:"security_group_id,omitempty"`

	// Reference to a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDRef *v1.Reference `json:"securityGroupIdRef,omitempty" tf:"-"`

	// Selector for a SecurityGroup to populate securityGroupId.
	// +kubebuilder:validation:Optional
	SecurityGroupIDSelector *v1.Selector `json:"securityGroupIdSelector,omitempty" tf:"-"`
}

// SecurityGroupLiteRuleSpec defines the desired state of SecurityGroupLiteRule
type SecurityGroupLiteRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityGroupLiteRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityGroupLiteRuleInitParameters `json:"initProvider,omitempty"`
}

// SecurityGroupLiteRuleStatus defines the observed state of SecurityGroupLiteRule.
type SecurityGroupLiteRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityGroupLiteRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupLiteRule is the Schema for the SecurityGroupLiteRules API. Provide a resource to create security group some lite rules quickly.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type SecurityGroupLiteRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityGroupLiteRuleSpec   `json:"spec"`
	Status            SecurityGroupLiteRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityGroupLiteRuleList contains a list of SecurityGroupLiteRules
type SecurityGroupLiteRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityGroupLiteRule `json:"items"`
}

// Repository type metadata.
var (
	SecurityGroupLiteRule_Kind             = "SecurityGroupLiteRule"
	SecurityGroupLiteRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityGroupLiteRule_Kind}.String()
	SecurityGroupLiteRule_KindAPIVersion   = SecurityGroupLiteRule_Kind + "." + CRDGroupVersion.String()
	SecurityGroupLiteRule_GroupVersionKind = CRDGroupVersion.WithKind(SecurityGroupLiteRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityGroupLiteRule{}, &SecurityGroupLiteRuleList{})
}
