// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnatInitParameters struct {

	// Description of the NAT forward.
	// Description of the NAT forward.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Network address of the EIP.
	// Network address of the EIP.
	ElasticIP *string `json:"elasticIp,omitempty" tf:"elastic_ip,omitempty"`

	// Port of the EIP.
	// Port of the EIP.
	ElasticPort *string `json:"elasticPort,omitempty" tf:"elastic_port,omitempty"`

	// Network address of the backend service.
	// Network address of the backend service.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Port of intranet.
	// Port of intranet.
	PrivatePort *string `json:"privatePort,omitempty" tf:"private_port,omitempty"`

	// Type of the network protocol. Valid value: TCP and UDP.
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type DnatObservation struct {

	// Description of the NAT forward.
	// Description of the NAT forward.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Network address of the EIP.
	// Network address of the EIP.
	ElasticIP *string `json:"elasticIp,omitempty" tf:"elastic_ip,omitempty"`

	// Port of the EIP.
	// Port of the EIP.
	ElasticPort *string `json:"elasticPort,omitempty" tf:"elastic_port,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the NAT gateway.
	// ID of the NAT gateway.
	NATID *string `json:"natId,omitempty" tf:"nat_id,omitempty"`

	// Network address of the backend service.
	// Network address of the backend service.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Port of intranet.
	// Port of intranet.
	PrivatePort *string `json:"privatePort,omitempty" tf:"private_port,omitempty"`

	// Type of the network protocol. Valid value: TCP and UDP.
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the VPC.
	// ID of the VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type DnatParameters struct {

	// Description of the NAT forward.
	// Description of the NAT forward.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Network address of the EIP.
	// Network address of the EIP.
	// +kubebuilder:validation:Optional
	ElasticIP *string `json:"elasticIp,omitempty" tf:"elastic_ip,omitempty"`

	// Port of the EIP.
	// Port of the EIP.
	// +kubebuilder:validation:Optional
	ElasticPort *string `json:"elasticPort,omitempty" tf:"elastic_port,omitempty"`

	// ID of the NAT gateway.
	// ID of the NAT gateway.
	// +crossplane:generate:reference:type=NatGateway
	// +kubebuilder:validation:Optional
	NATID *string `json:"natId,omitempty" tf:"nat_id,omitempty"`

	// Reference to a NatGateway to populate natId.
	// +kubebuilder:validation:Optional
	NATIDRef *v1.Reference `json:"natIdRef,omitempty" tf:"-"`

	// Selector for a NatGateway to populate natId.
	// +kubebuilder:validation:Optional
	NATIDSelector *v1.Selector `json:"natIdSelector,omitempty" tf:"-"`

	// Network address of the backend service.
	// Network address of the backend service.
	// +kubebuilder:validation:Optional
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// Port of intranet.
	// Port of intranet.
	// +kubebuilder:validation:Optional
	PrivatePort *string `json:"privatePort,omitempty" tf:"private_port,omitempty"`

	// Type of the network protocol. Valid value: TCP and UDP.
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the VPC.
	// ID of the VPC.
	// +crossplane:generate:reference:type=VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// DnatSpec defines the desired state of Dnat
type DnatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnatParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DnatInitParameters `json:"initProvider,omitempty"`
}

// DnatStatus defines the observed state of Dnat.
type DnatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Dnat is the Schema for the Dnats API. Provides a resource to create a NAT forwarding.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Dnat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.elasticIp) || (has(self.initProvider) && has(self.initProvider.elasticIp))",message="spec.forProvider.elasticIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.elasticPort) || (has(self.initProvider) && has(self.initProvider.elasticPort))",message="spec.forProvider.elasticPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateIp) || (has(self.initProvider) && has(self.initProvider.privateIp))",message="spec.forProvider.privateIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privatePort) || (has(self.initProvider) && has(self.initProvider.privatePort))",message="spec.forProvider.privatePort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	Spec   DnatSpec   `json:"spec"`
	Status DnatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnatList contains a list of Dnats
type DnatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Dnat `json:"items"`
}

// Repository type metadata.
var (
	Dnat_Kind             = "Dnat"
	Dnat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Dnat_Kind}.String()
	Dnat_KindAPIVersion   = Dnat_Kind + "." + CRDGroupVersion.String()
	Dnat_GroupVersionKind = CRDGroupVersion.WithKind(Dnat_Kind)
)

func init() {
	SchemeBuilder.Register(&Dnat{}, &DnatList{})
}
