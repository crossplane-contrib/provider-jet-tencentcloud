/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentInitParameters struct {

	// ID of the CCN.
	// ID of the CCN.
	CcnID *string `json:"ccnId,omitempty" tf:"ccn_id,omitempty"`

	// Uin of the ccn attached. If not set, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type VPC.
	// Uin of the ccn attached. If not set, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin *string `json:"ccnUin,omitempty" tf:"ccn_uin,omitempty"`

	// Remark of attachment.
	// Remark of attachment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of instance is attached.
	// ID of instance is attached.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The region that the instance locates at.
	// The region that the instance locates at.
	InstanceRegion *string `json:"instanceRegion,omitempty" tf:"instance_region,omitempty"`

	// Type of attached instance network, and available values include VPC, DIRECTCONNECT, BMVPC and VPNGW. Note: VPNGW type is only for whitelist customer now.
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Ccn instance route table ID.
	// Ccn instance route table ID.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

type AttachmentObservation struct {

	// Time of attaching.
	// Time of attaching.
	AttachedTime *string `json:"attachedTime,omitempty" tf:"attached_time,omitempty"`

	// ID of the CCN.
	// ID of the CCN.
	CcnID *string `json:"ccnId,omitempty" tf:"ccn_id,omitempty"`

	// Uin of the ccn attached. If not set, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type VPC.
	// Uin of the ccn attached. If not set, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	CcnUin *string `json:"ccnUin,omitempty" tf:"ccn_uin,omitempty"`

	// A network address block of the instance that is attached.
	// A network address block of the instance that is attached.
	CidrBlock []*string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Remark of attachment.
	// Remark of attachment.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of instance is attached.
	// ID of instance is attached.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The region that the instance locates at.
	// The region that the instance locates at.
	InstanceRegion *string `json:"instanceRegion,omitempty" tf:"instance_region,omitempty"`

	// Type of attached instance network, and available values include VPC, DIRECTCONNECT, BMVPC and VPNGW. Note: VPNGW type is only for whitelist customer now.
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Route id list.
	// Route id list.
	RouteIds []*string `json:"routeIds,omitempty" tf:"route_ids,omitempty"`

	// Ccn instance route table ID.
	// Ccn instance route table ID.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// States of instance is attached. Valid values: PENDING, ACTIVE, EXPIRED, REJECTED, DELETED, FAILED, ATTACHING, DETACHING and DETACHFAILED. FAILED means asynchronous forced disassociation after 2 hours. DETACHFAILED means asynchronous forced disassociation after 2 hours.
	// States of instance is attached. Valid values: `PENDING`, `ACTIVE`, `EXPIRED`, `REJECTED`, `DELETED`, `FAILED`, `ATTACHING`, `DETACHING` and `DETACHFAILED`. `FAILED` means asynchronous forced disassociation after 2 hours. `DETACHFAILED` means asynchronous forced disassociation after 2 hours.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type AttachmentParameters struct {

	// ID of the CCN.
	// ID of the CCN.
	// +kubebuilder:validation:Optional
	CcnID *string `json:"ccnId,omitempty" tf:"ccn_id,omitempty"`

	// Uin of the ccn attached. If not set, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type VPC.
	// Uin of the ccn attached. If not set, which means the uin of this account. This parameter is used with case when attaching ccn of other account to the instance of this account. For now only support instance type `VPC`.
	// +kubebuilder:validation:Optional
	CcnUin *string `json:"ccnUin,omitempty" tf:"ccn_uin,omitempty"`

	// Remark of attachment.
	// Remark of attachment.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of instance is attached.
	// ID of instance is attached.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The region that the instance locates at.
	// The region that the instance locates at.
	// +kubebuilder:validation:Optional
	InstanceRegion *string `json:"instanceRegion,omitempty" tf:"instance_region,omitempty"`

	// Type of attached instance network, and available values include VPC, DIRECTCONNECT, BMVPC and VPNGW. Note: VPNGW type is only for whitelist customer now.
	// Type of attached instance network, and available values include `VPC`, `DIRECTCONNECT`, `BMVPC` and `VPNGW`. Note: `VPNGW` type is only for whitelist customer now.
	// +kubebuilder:validation:Optional
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// Ccn instance route table ID.
	// Ccn instance route table ID.
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

// AttachmentSpec defines the desired state of Attachment
type AttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AttachmentInitParameters `json:"initProvider,omitempty"`
}

// AttachmentStatus defines the observed state of Attachment.
type AttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Attachment is the Schema for the Attachments API. Provides a CCN attaching resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Attachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ccnId) || (has(self.initProvider) && has(self.initProvider.ccnId))",message="spec.forProvider.ccnId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceRegion) || (has(self.initProvider) && has(self.initProvider.instanceRegion))",message="spec.forProvider.instanceRegion is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceType) || (has(self.initProvider) && has(self.initProvider.instanceType))",message="spec.forProvider.instanceType is a required parameter"
	Spec   AttachmentSpec   `json:"spec"`
	Status AttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AttachmentList contains a list of Attachments
type AttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Attachment `json:"items"`
}

// Repository type metadata.
var (
	Attachment_Kind             = "Attachment"
	Attachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Attachment_Kind}.String()
	Attachment_KindAPIVersion   = Attachment_Kind + "." + CRDGroupVersion.String()
	Attachment_GroupVersionKind = CRDGroupVersion.WithKind(Attachment_Kind)
)

func init() {
	SchemeBuilder.Register(&Attachment{}, &AttachmentList{})
}
