// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BandwidthLimitInitParameters struct {

	// Limitation of bandwidth. Default is 0.
	// Limitation of bandwidth. Default is `0`.
	BandwidthLimit *float64 `json:"bandwidthLimit,omitempty" tf:"bandwidth_limit,omitempty"`

	// Destination area restriction. If the CCN rate limit type is OUTER_REGION_LIMIT, this value does not need to be set.
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion *string `json:"dstRegion,omitempty" tf:"dst_region,omitempty"`

	// Limitation of region.
	// Limitation of region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type BandwidthLimitObservation struct {

	// Limitation of bandwidth. Default is 0.
	// Limitation of bandwidth. Default is `0`.
	BandwidthLimit *float64 `json:"bandwidthLimit,omitempty" tf:"bandwidth_limit,omitempty"`

	// ID of the CCN.
	// ID of the CCN.
	CcnID *string `json:"ccnId,omitempty" tf:"ccn_id,omitempty"`

	// Destination area restriction. If the CCN rate limit type is OUTER_REGION_LIMIT, this value does not need to be set.
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	DstRegion *string `json:"dstRegion,omitempty" tf:"dst_region,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Limitation of region.
	// Limitation of region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type BandwidthLimitParameters struct {

	// Limitation of bandwidth. Default is 0.
	// Limitation of bandwidth. Default is `0`.
	// +kubebuilder:validation:Optional
	BandwidthLimit *float64 `json:"bandwidthLimit,omitempty" tf:"bandwidth_limit,omitempty"`

	// ID of the CCN.
	// ID of the CCN.
	// +crossplane:generate:reference:type=CCN
	// +kubebuilder:validation:Optional
	CcnID *string `json:"ccnId,omitempty" tf:"ccn_id,omitempty"`

	// Reference to a CCN to populate ccnId.
	// +kubebuilder:validation:Optional
	CcnIDRef *v1.Reference `json:"ccnIdRef,omitempty" tf:"-"`

	// Selector for a CCN to populate ccnId.
	// +kubebuilder:validation:Optional
	CcnIDSelector *v1.Selector `json:"ccnIdSelector,omitempty" tf:"-"`

	// Destination area restriction. If the CCN rate limit type is OUTER_REGION_LIMIT, this value does not need to be set.
	// Destination area restriction. If the `CCN` rate limit type is `OUTER_REGION_LIMIT`, this value does not need to be set.
	// +kubebuilder:validation:Optional
	DstRegion *string `json:"dstRegion,omitempty" tf:"dst_region,omitempty"`

	// Limitation of region.
	// Limitation of region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// BandwidthLimitSpec defines the desired state of BandwidthLimit
type BandwidthLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BandwidthLimitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BandwidthLimitInitParameters `json:"initProvider,omitempty"`
}

// BandwidthLimitStatus defines the observed state of BandwidthLimit.
type BandwidthLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BandwidthLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthLimit is the Schema for the BandwidthLimits API. Provides a resource to limit CCN bandwidth.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type BandwidthLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   BandwidthLimitSpec   `json:"spec"`
	Status BandwidthLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BandwidthLimitList contains a list of BandwidthLimits
type BandwidthLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BandwidthLimit `json:"items"`
}

// Repository type metadata.
var (
	BandwidthLimit_Kind             = "BandwidthLimit"
	BandwidthLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BandwidthLimit_Kind}.String()
	BandwidthLimit_KindAPIVersion   = BandwidthLimit_Kind + "." + CRDGroupVersion.String()
	BandwidthLimit_GroupVersionKind = CRDGroupVersion.WithKind(BandwidthLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&BandwidthLimit{}, &BandwidthLimitList{})
}
