// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CCNInitParameters struct {

	// The speed limit type. Valid values: INTER_REGION_LIMIT, OUTER_REGION_LIMIT. OUTER_REGION_LIMIT represents the regional export speed limit, INTER_REGION_LIMIT is the inter-regional speed limit. The default is OUTER_REGION_LIMIT.
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType *string `json:"bandwidthLimitType,omitempty" tf:"bandwidth_limit_type,omitempty"`

	// Billing mode. Valid values: PREPAID, POSTPAID. PREPAID means prepaid, which means annual and monthly subscription, POSTPAID means post-payment, which means billing by volume. The default is POSTPAID. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Description of CCN, and maximum length does not exceed 100 bytes.
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Service quality of CCN. Valid values: PT, AU, AG. The default is AU.
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos *string `json:"qos,omitempty" tf:"qos,omitempty"`

	// Instance tag.
	// Instance tag.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CCNObservation struct {

	// The speed limit type. Valid values: INTER_REGION_LIMIT, OUTER_REGION_LIMIT. OUTER_REGION_LIMIT represents the regional export speed limit, INTER_REGION_LIMIT is the inter-regional speed limit. The default is OUTER_REGION_LIMIT.
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	BandwidthLimitType *string `json:"bandwidthLimitType,omitempty" tf:"bandwidth_limit_type,omitempty"`

	// Billing mode. Valid values: PREPAID, POSTPAID. PREPAID means prepaid, which means annual and monthly subscription, POSTPAID means post-payment, which means billing by volume. The default is POSTPAID. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Creation time of resource.
	// Creation time of resource.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description of CCN, and maximum length does not exceed 100 bytes.
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of attached instances.
	// Number of attached instances.
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Service quality of CCN. Valid values: PT, AU, AG. The default is AU.
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos *string `json:"qos,omitempty" tf:"qos,omitempty"`

	// States of instance. Valid values: ISOLATED(arrears) and AVAILABLE.
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Instance tag.
	// Instance tag.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CCNParameters struct {

	// The speed limit type. Valid values: INTER_REGION_LIMIT, OUTER_REGION_LIMIT. OUTER_REGION_LIMIT represents the regional export speed limit, INTER_REGION_LIMIT is the inter-regional speed limit. The default is OUTER_REGION_LIMIT.
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is `OUTER_REGION_LIMIT`.
	// +kubebuilder:validation:Optional
	BandwidthLimitType *string `json:"bandwidthLimitType,omitempty" tf:"bandwidth_limit_type,omitempty"`

	// Billing mode. Valid values: PREPAID, POSTPAID. PREPAID means prepaid, which means annual and monthly subscription, POSTPAID means post-payment, which means billing by volume. The default is POSTPAID. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription, `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	// +kubebuilder:validation:Optional
	ChargeType *string `json:"chargeType,omitempty" tf:"charge_type,omitempty"`

	// Description of CCN, and maximum length does not exceed 100 bytes.
	// Description of CCN, and maximum length does not exceed 100 bytes.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Service quality of CCN. Valid values: PT, AU, AG. The default is AU.
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	// +kubebuilder:validation:Optional
	Qos *string `json:"qos,omitempty" tf:"qos,omitempty"`

	// Instance tag.
	// Instance tag.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// CCNSpec defines the desired state of CCN
type CCNSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CCNParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CCNInitParameters `json:"initProvider,omitempty"`
}

// CCNStatus defines the observed state of CCN.
type CCNStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CCNObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CCN is the Schema for the CCNs API. Provides a resource to create a CCN instance.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type CCN struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CCNSpec   `json:"spec"`
	Status CCNStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CCNList contains a list of CCNs
type CCNList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CCN `json:"items"`
}

// Repository type metadata.
var (
	CCN_Kind             = "CCN"
	CCN_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CCN_Kind}.String()
	CCN_KindAPIVersion   = CCN_Kind + "." + CRDGroupVersion.String()
	CCN_GroupVersionKind = CRDGroupVersion.WithKind(CCN_Kind)
)

func init() {
	SchemeBuilder.Register(&CCN{}, &CCNList{})
}
