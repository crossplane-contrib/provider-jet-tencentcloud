// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TmpRecordingRuleInitParameters struct {

	// Recording rule group.
	// Recording rule group.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Instance id.
	// Instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Recording rule name.
	// Recording rule name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Rule state.
	// Rule state.
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`
}

type TmpRecordingRuleObservation struct {

	// Recording rule group.
	// Recording rule group.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance id.
	// Instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Recording rule name.
	// Recording rule name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Rule state.
	// Rule state.
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`
}

type TmpRecordingRuleParameters struct {

	// Recording rule group.
	// Recording rule group.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Instance id.
	// Instance id.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Recording rule name.
	// Recording rule name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Rule state.
	// Rule state.
	// +kubebuilder:validation:Optional
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`
}

// TmpRecordingRuleSpec defines the desired state of TmpRecordingRule
type TmpRecordingRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpRecordingRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TmpRecordingRuleInitParameters `json:"initProvider,omitempty"`
}

// TmpRecordingRuleStatus defines the observed state of TmpRecordingRule.
type TmpRecordingRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpRecordingRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpRecordingRule is the Schema for the TmpRecordingRules API. Provides a resource to create a monitor tmp recordingRule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TmpRecordingRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.group) || (has(self.initProvider) && has(self.initProvider.group))",message="spec.forProvider.group is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceId) || (has(self.initProvider) && has(self.initProvider.instanceId))",message="spec.forProvider.instanceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TmpRecordingRuleSpec   `json:"spec"`
	Status TmpRecordingRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpRecordingRuleList contains a list of TmpRecordingRules
type TmpRecordingRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpRecordingRule `json:"items"`
}

// Repository type metadata.
var (
	TmpRecordingRule_Kind             = "TmpRecordingRule"
	TmpRecordingRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpRecordingRule_Kind}.String()
	TmpRecordingRule_KindAPIVersion   = TmpRecordingRule_Kind + "." + CRDGroupVersion.String()
	TmpRecordingRule_GroupVersionKind = CRDGroupVersion.WithKind(TmpRecordingRule_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpRecordingRule{}, &TmpRecordingRuleList{})
}
