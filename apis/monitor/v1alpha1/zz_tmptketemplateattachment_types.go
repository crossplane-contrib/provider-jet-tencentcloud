// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TargetsInitParameters struct {

	// ID of the cluster.
	// ID of the cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name the cluster.
	// Name the cluster.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Cluster type.
	// Cluster type.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// instance id.
	// instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Name of the prometheus instance.
	// Name of the prometheus instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// target area.
	// target area.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Last sync template time.
	// Last sync template time.
	SyncTime *string `json:"syncTime,omitempty" tf:"sync_time,omitempty"`

	// Template version currently in use.
	// Template version currently in use.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TargetsObservation struct {

	// ID of the cluster.
	// ID of the cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name the cluster.
	// Name the cluster.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Cluster type.
	// Cluster type.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// instance id.
	// instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Name of the prometheus instance.
	// Name of the prometheus instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// target area.
	// target area.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Last sync template time.
	// Last sync template time.
	SyncTime *string `json:"syncTime,omitempty" tf:"sync_time,omitempty"`

	// Template version currently in use.
	// Template version currently in use.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TargetsParameters struct {

	// ID of the cluster.
	// ID of the cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name the cluster.
	// Name the cluster.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Cluster type.
	// Cluster type.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// instance id.
	// instance id.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId" tf:"instance_id,omitempty"`

	// Name of the prometheus instance.
	// Name of the prometheus instance.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// target area.
	// target area.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// Last sync template time.
	// Last sync template time.
	// +kubebuilder:validation:Optional
	SyncTime *string `json:"syncTime,omitempty" tf:"sync_time,omitempty"`

	// Template version currently in use.
	// Template version currently in use.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TmpTkeTemplateAttachmentInitParameters struct {

	// Sync target details.
	// Sync target details.
	Targets []TargetsInitParameters `json:"targets,omitempty" tf:"targets,omitempty"`
}

type TmpTkeTemplateAttachmentObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Sync target details.
	// Sync target details.
	Targets []TargetsObservation `json:"targets,omitempty" tf:"targets,omitempty"`

	// The ID of the template, which is used for the outgoing reference.
	// The ID of the template, which is used for the outgoing reference.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type TmpTkeTemplateAttachmentParameters struct {

	// Sync target details.
	// Sync target details.
	// +kubebuilder:validation:Optional
	Targets []TargetsParameters `json:"targets,omitempty" tf:"targets,omitempty"`

	// The ID of the template, which is used for the outgoing reference.
	// The ID of the template, which is used for the outgoing reference.
	// +crossplane:generate:reference:type=TmpTkeTemplate
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`

	// Reference to a TmpTkeTemplate to populate templateId.
	// +kubebuilder:validation:Optional
	TemplateIDRef *v1.Reference `json:"templateIdRef,omitempty" tf:"-"`

	// Selector for a TmpTkeTemplate to populate templateId.
	// +kubebuilder:validation:Optional
	TemplateIDSelector *v1.Selector `json:"templateIdSelector,omitempty" tf:"-"`
}

// TmpTkeTemplateAttachmentSpec defines the desired state of TmpTkeTemplateAttachment
type TmpTkeTemplateAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeTemplateAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TmpTkeTemplateAttachmentInitParameters `json:"initProvider,omitempty"`
}

// TmpTkeTemplateAttachmentStatus defines the observed state of TmpTkeTemplateAttachment.
type TmpTkeTemplateAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeTemplateAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeTemplateAttachment is the Schema for the TmpTkeTemplateAttachments API. Provides a resource to create a tmp tke template attachment
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TmpTkeTemplateAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.targets) || (has(self.initProvider) && has(self.initProvider.targets))",message="spec.forProvider.targets is a required parameter"
	Spec   TmpTkeTemplateAttachmentSpec   `json:"spec"`
	Status TmpTkeTemplateAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeTemplateAttachmentList contains a list of TmpTkeTemplateAttachments
type TmpTkeTemplateAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeTemplateAttachment `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeTemplateAttachment_Kind             = "TmpTkeTemplateAttachment"
	TmpTkeTemplateAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeTemplateAttachment_Kind}.String()
	TmpTkeTemplateAttachment_KindAPIVersion   = TmpTkeTemplateAttachment_Kind + "." + CRDGroupVersion.String()
	TmpTkeTemplateAttachment_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeTemplateAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeTemplateAttachment{}, &TmpTkeTemplateAttachmentList{})
}
