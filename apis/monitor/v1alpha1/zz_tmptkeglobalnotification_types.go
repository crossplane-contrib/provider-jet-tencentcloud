// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotificationAlertManagerInitParameters struct {

	// Cluster id.
	// Cluster id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Cluster type.
	// Cluster type.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Alert manager url.
	// Alert manager url.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type NotificationAlertManagerObservation struct {

	// Cluster id.
	// Cluster id.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Cluster type.
	// Cluster type.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Alert manager url.
	// Alert manager url.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type NotificationAlertManagerParameters struct {

	// Cluster id.
	// Cluster id.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Cluster type.
	// Cluster type.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Alert manager url.
	// Alert manager url.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`
}

type TmpTkeGlobalNotificationInitParameters struct {

	// Alarm notification channels.
	// Alarm notification channels.
	Notification []TmpTkeGlobalNotificationNotificationInitParameters `json:"notification,omitempty" tf:"notification,omitempty"`
}

type TmpTkeGlobalNotificationNotificationInitParameters struct {

	// Alert manager, if Type is alertmanager, this field is required.
	// Alert manager, if Type is `alertmanager`, this field is required.
	AlertManager []NotificationAlertManagerInitParameters `json:"alertManager,omitempty" tf:"alert_manager,omitempty"`

	// Alarm notification switch.
	// Alarm notification switch.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Alarm notification method, Valid values: SMS, EMAIL, CALL, WECHAT.
	// Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
	NotifyWay []*string `json:"notifyWay,omitempty" tf:"notify_way,omitempty"`

	// Phone Alarm Reach Notification, NotifyWay is CALL, and this parameter is used.
	// Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
	PhoneArriveNotice *bool `json:"phoneArriveNotice,omitempty" tf:"phone_arrive_notice,omitempty"`

	// Telephone alarm off-wheel interval, NotifyWay is CALL, and this parameter is used.
	// Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
	PhoneCircleInterval *float64 `json:"phoneCircleInterval,omitempty" tf:"phone_circle_interval,omitempty"`

	// Number of phone alerts (user group), NotifyWay is CALL, and this parameter is used.
	// Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
	PhoneCircleTimes *float64 `json:"phoneCircleTimes,omitempty" tf:"phone_circle_times,omitempty"`

	// Interval between telephone alarm rounds, NotifyWay is CALL, and this parameter is used.
	// Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
	PhoneInnerInterval *float64 `json:"phoneInnerInterval,omitempty" tf:"phone_inner_interval,omitempty"`

	// Phone alert sequence, NotifyWay is CALL, and this parameter is used.
	// Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
	PhoneNotifyOrder []*float64 `json:"phoneNotifyOrder,omitempty" tf:"phone_notify_order,omitempty"`

	// Alarm receiving group(user group).
	// Alarm receiving group(user group).
	ReceiverGroups []*string `json:"receiverGroups,omitempty" tf:"receiver_groups,omitempty"`

	// Convergence time.
	// Convergence time.
	RepeatInterval *string `json:"repeatInterval,omitempty" tf:"repeat_interval,omitempty"`

	// Effective end time.
	// Effective end time.
	TimeRangeEnd *string `json:"timeRangeEnd,omitempty" tf:"time_range_end,omitempty"`

	// Effective start time.
	// Effective start time.
	TimeRangeStart *string `json:"timeRangeStart,omitempty" tf:"time_range_start,omitempty"`

	// Alarm notification type, Valid values: amp, webhook, alertmanager.
	// Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Web hook, if Type is webhook, this field is required.
	// Web hook, if Type is `webhook`, this field is required.
	WebHook *string `json:"webHook,omitempty" tf:"web_hook,omitempty"`
}

type TmpTkeGlobalNotificationNotificationObservation struct {

	// Alert manager, if Type is alertmanager, this field is required.
	// Alert manager, if Type is `alertmanager`, this field is required.
	AlertManager []NotificationAlertManagerObservation `json:"alertManager,omitempty" tf:"alert_manager,omitempty"`

	// Alarm notification switch.
	// Alarm notification switch.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Alarm notification method, Valid values: SMS, EMAIL, CALL, WECHAT.
	// Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
	NotifyWay []*string `json:"notifyWay,omitempty" tf:"notify_way,omitempty"`

	// Phone Alarm Reach Notification, NotifyWay is CALL, and this parameter is used.
	// Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
	PhoneArriveNotice *bool `json:"phoneArriveNotice,omitempty" tf:"phone_arrive_notice,omitempty"`

	// Telephone alarm off-wheel interval, NotifyWay is CALL, and this parameter is used.
	// Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
	PhoneCircleInterval *float64 `json:"phoneCircleInterval,omitempty" tf:"phone_circle_interval,omitempty"`

	// Number of phone alerts (user group), NotifyWay is CALL, and this parameter is used.
	// Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
	PhoneCircleTimes *float64 `json:"phoneCircleTimes,omitempty" tf:"phone_circle_times,omitempty"`

	// Interval between telephone alarm rounds, NotifyWay is CALL, and this parameter is used.
	// Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
	PhoneInnerInterval *float64 `json:"phoneInnerInterval,omitempty" tf:"phone_inner_interval,omitempty"`

	// Phone alert sequence, NotifyWay is CALL, and this parameter is used.
	// Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
	PhoneNotifyOrder []*float64 `json:"phoneNotifyOrder,omitempty" tf:"phone_notify_order,omitempty"`

	// Alarm receiving group(user group).
	// Alarm receiving group(user group).
	ReceiverGroups []*string `json:"receiverGroups,omitempty" tf:"receiver_groups,omitempty"`

	// Convergence time.
	// Convergence time.
	RepeatInterval *string `json:"repeatInterval,omitempty" tf:"repeat_interval,omitempty"`

	// Effective end time.
	// Effective end time.
	TimeRangeEnd *string `json:"timeRangeEnd,omitempty" tf:"time_range_end,omitempty"`

	// Effective start time.
	// Effective start time.
	TimeRangeStart *string `json:"timeRangeStart,omitempty" tf:"time_range_start,omitempty"`

	// Alarm notification type, Valid values: amp, webhook, alertmanager.
	// Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Web hook, if Type is webhook, this field is required.
	// Web hook, if Type is `webhook`, this field is required.
	WebHook *string `json:"webHook,omitempty" tf:"web_hook,omitempty"`
}

type TmpTkeGlobalNotificationNotificationParameters struct {

	// Alert manager, if Type is alertmanager, this field is required.
	// Alert manager, if Type is `alertmanager`, this field is required.
	// +kubebuilder:validation:Optional
	AlertManager []NotificationAlertManagerParameters `json:"alertManager,omitempty" tf:"alert_manager,omitempty"`

	// Alarm notification switch.
	// Alarm notification switch.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// Alarm notification method, Valid values: SMS, EMAIL, CALL, WECHAT.
	// Alarm notification method, Valid values: `SMS`, `EMAIL`, `CALL`, `WECHAT`.
	// +kubebuilder:validation:Optional
	NotifyWay []*string `json:"notifyWay,omitempty" tf:"notify_way,omitempty"`

	// Phone Alarm Reach Notification, NotifyWay is CALL, and this parameter is used.
	// Phone Alarm Reach Notification, NotifyWay is `CALL`, and this parameter is used.
	// +kubebuilder:validation:Optional
	PhoneArriveNotice *bool `json:"phoneArriveNotice,omitempty" tf:"phone_arrive_notice,omitempty"`

	// Telephone alarm off-wheel interval, NotifyWay is CALL, and this parameter is used.
	// Telephone alarm off-wheel interval, NotifyWay is `CALL`, and this parameter is used.
	// +kubebuilder:validation:Optional
	PhoneCircleInterval *float64 `json:"phoneCircleInterval,omitempty" tf:"phone_circle_interval,omitempty"`

	// Number of phone alerts (user group), NotifyWay is CALL, and this parameter is used.
	// Number of phone alerts (user group), NotifyWay is `CALL`, and this parameter is used.
	// +kubebuilder:validation:Optional
	PhoneCircleTimes *float64 `json:"phoneCircleTimes,omitempty" tf:"phone_circle_times,omitempty"`

	// Interval between telephone alarm rounds, NotifyWay is CALL, and this parameter is used.
	// Interval between telephone alarm rounds, NotifyWay is `CALL`, and this parameter is used.
	// +kubebuilder:validation:Optional
	PhoneInnerInterval *float64 `json:"phoneInnerInterval,omitempty" tf:"phone_inner_interval,omitempty"`

	// Phone alert sequence, NotifyWay is CALL, and this parameter is used.
	// Phone alert sequence, NotifyWay is `CALL`, and this parameter is used.
	// +kubebuilder:validation:Optional
	PhoneNotifyOrder []*float64 `json:"phoneNotifyOrder,omitempty" tf:"phone_notify_order,omitempty"`

	// Alarm receiving group(user group).
	// Alarm receiving group(user group).
	// +kubebuilder:validation:Optional
	ReceiverGroups []*string `json:"receiverGroups,omitempty" tf:"receiver_groups,omitempty"`

	// Convergence time.
	// Convergence time.
	// +kubebuilder:validation:Optional
	RepeatInterval *string `json:"repeatInterval,omitempty" tf:"repeat_interval,omitempty"`

	// Effective end time.
	// Effective end time.
	// +kubebuilder:validation:Optional
	TimeRangeEnd *string `json:"timeRangeEnd,omitempty" tf:"time_range_end,omitempty"`

	// Effective start time.
	// Effective start time.
	// +kubebuilder:validation:Optional
	TimeRangeStart *string `json:"timeRangeStart,omitempty" tf:"time_range_start,omitempty"`

	// Alarm notification type, Valid values: amp, webhook, alertmanager.
	// Alarm notification type, Valid values: `amp`, `webhook`, `alertmanager`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Web hook, if Type is webhook, this field is required.
	// Web hook, if Type is `webhook`, this field is required.
	// +kubebuilder:validation:Optional
	WebHook *string `json:"webHook,omitempty" tf:"web_hook,omitempty"`
}

type TmpTkeGlobalNotificationObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance Id.
	// Instance Id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Alarm notification channels.
	// Alarm notification channels.
	Notification []TmpTkeGlobalNotificationNotificationObservation `json:"notification,omitempty" tf:"notification,omitempty"`
}

type TmpTkeGlobalNotificationParameters struct {

	// Instance Id.
	// Instance Id.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a TmpInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a TmpInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Alarm notification channels.
	// Alarm notification channels.
	// +kubebuilder:validation:Optional
	Notification []TmpTkeGlobalNotificationNotificationParameters `json:"notification,omitempty" tf:"notification,omitempty"`
}

// TmpTkeGlobalNotificationSpec defines the desired state of TmpTkeGlobalNotification
type TmpTkeGlobalNotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeGlobalNotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TmpTkeGlobalNotificationInitParameters `json:"initProvider,omitempty"`
}

// TmpTkeGlobalNotificationStatus defines the observed state of TmpTkeGlobalNotification.
type TmpTkeGlobalNotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeGlobalNotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeGlobalNotification is the Schema for the TmpTkeGlobalNotifications API. Provides a resource to create a tmp tke global notification
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TmpTkeGlobalNotification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notification) || (has(self.initProvider) && has(self.initProvider.notification))",message="spec.forProvider.notification is a required parameter"
	Spec   TmpTkeGlobalNotificationSpec   `json:"spec"`
	Status TmpTkeGlobalNotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeGlobalNotificationList contains a list of TmpTkeGlobalNotifications
type TmpTkeGlobalNotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeGlobalNotification `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeGlobalNotification_Kind             = "TmpTkeGlobalNotification"
	TmpTkeGlobalNotification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeGlobalNotification_Kind}.String()
	TmpTkeGlobalNotification_KindAPIVersion   = TmpTkeGlobalNotification_Kind + "." + CRDGroupVersion.String()
	TmpTkeGlobalNotification_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeGlobalNotification_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeGlobalNotification{}, &TmpTkeGlobalNotificationList{})
}
