// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PodMonitorsInitParameters struct {

	// Config.
	// Config.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type PodMonitorsObservation struct {

	// Config.
	// Config.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type PodMonitorsParameters struct {

	// Config.
	// Config.
	// +kubebuilder:validation:Optional
	Config *string `json:"config" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type RawJobsInitParameters struct {

	// Config.
	// Config.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type RawJobsObservation struct {

	// Config.
	// Config.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type RawJobsParameters struct {

	// Config.
	// Config.
	// +kubebuilder:validation:Optional
	Config *string `json:"config" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type ServiceMonitorsInitParameters struct {

	// Config.
	// Config.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type ServiceMonitorsObservation struct {

	// Config.
	// Config.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type ServiceMonitorsParameters struct {

	// Config.
	// Config.
	// +kubebuilder:validation:Optional
	Config *string `json:"config" tf:"config,omitempty"`

	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// Name. The naming rule is: namespace/name. If you don't have any namespace, use the default namespace: kube-system, otherwise use the specified one.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// Used for output parameters, if the configuration comes from a template, it is the template id.
	// +kubebuilder:validation:Optional
	TemplateID *string `json:"templateId,omitempty" tf:"template_id,omitempty"`
}

type TmpTkeConfigInitParameters struct {

	// ID of cluster.
	// ID of cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Type of cluster.
	// Type of cluster.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Configuration of the pod monitors.
	// Configuration of the pod monitors.
	PodMonitors []PodMonitorsInitParameters `json:"podMonitors,omitempty" tf:"pod_monitors,omitempty"`

	// Configuration of the native prometheus job.
	// Configuration of the native prometheus job.
	RawJobs []RawJobsInitParameters `json:"rawJobs,omitempty" tf:"raw_jobs,omitempty"`

	// Configuration of the service monitors.
	// Configuration of the service monitors.
	ServiceMonitors []ServiceMonitorsInitParameters `json:"serviceMonitors,omitempty" tf:"service_monitors,omitempty"`
}

type TmpTkeConfigObservation struct {

	// ID of cluster.
	// ID of cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Type of cluster.
	// Type of cluster.
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// Config.
	// Global configuration.
	Config *string `json:"config,omitempty" tf:"config,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of instance.
	// ID of instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Configuration of the pod monitors.
	// Configuration of the pod monitors.
	PodMonitors []PodMonitorsObservation `json:"podMonitors,omitempty" tf:"pod_monitors,omitempty"`

	// Configuration of the native prometheus job.
	// Configuration of the native prometheus job.
	RawJobs []RawJobsObservation `json:"rawJobs,omitempty" tf:"raw_jobs,omitempty"`

	// Configuration of the service monitors.
	// Configuration of the service monitors.
	ServiceMonitors []ServiceMonitorsObservation `json:"serviceMonitors,omitempty" tf:"service_monitors,omitempty"`
}

type TmpTkeConfigParameters struct {

	// ID of cluster.
	// ID of cluster.
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Type of cluster.
	// Type of cluster.
	// +kubebuilder:validation:Optional
	ClusterType *string `json:"clusterType,omitempty" tf:"cluster_type,omitempty"`

	// ID of instance.
	// ID of instance.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a TmpInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a TmpInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Configuration of the pod monitors.
	// Configuration of the pod monitors.
	// +kubebuilder:validation:Optional
	PodMonitors []PodMonitorsParameters `json:"podMonitors,omitempty" tf:"pod_monitors,omitempty"`

	// Configuration of the native prometheus job.
	// Configuration of the native prometheus job.
	// +kubebuilder:validation:Optional
	RawJobs []RawJobsParameters `json:"rawJobs,omitempty" tf:"raw_jobs,omitempty"`

	// Configuration of the service monitors.
	// Configuration of the service monitors.
	// +kubebuilder:validation:Optional
	ServiceMonitors []ServiceMonitorsParameters `json:"serviceMonitors,omitempty" tf:"service_monitors,omitempty"`
}

// TmpTkeConfigSpec defines the desired state of TmpTkeConfig
type TmpTkeConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpTkeConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TmpTkeConfigInitParameters `json:"initProvider,omitempty"`
}

// TmpTkeConfigStatus defines the observed state of TmpTkeConfig.
type TmpTkeConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpTkeConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeConfig is the Schema for the TmpTkeConfigs API. Provides a resource to create a tke tmpPrometheusConfig
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TmpTkeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterId) || (has(self.initProvider) && has(self.initProvider.clusterId))",message="spec.forProvider.clusterId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterType) || (has(self.initProvider) && has(self.initProvider.clusterType))",message="spec.forProvider.clusterType is a required parameter"
	Spec   TmpTkeConfigSpec   `json:"spec"`
	Status TmpTkeConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpTkeConfigList contains a list of TmpTkeConfigs
type TmpTkeConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpTkeConfig `json:"items"`
}

// Repository type metadata.
var (
	TmpTkeConfig_Kind             = "TmpTkeConfig"
	TmpTkeConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpTkeConfig_Kind}.String()
	TmpTkeConfig_KindAPIVersion   = TmpTkeConfig_Kind + "." + CRDGroupVersion.String()
	TmpTkeConfig_GroupVersionKind = CRDGroupVersion.WithKind(TmpTkeConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpTkeConfig{}, &TmpTkeConfigList{})
}
