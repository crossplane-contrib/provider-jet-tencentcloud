// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BindingObjectsInitParameters struct {
}

type BindingObjectsObservation struct {
	DimensionsJSON *string `json:"dimensionsJson,omitempty" tf:"dimensions_json,omitempty"`

	IsShielded *float64 `json:"isShielded,omitempty" tf:"is_shielded,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	UniqueID *string `json:"uniqueId,omitempty" tf:"unique_id,omitempty"`
}

type BindingObjectsParameters struct {
}

type PolicyGroupConditionsInitParameters struct {

	// Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
	AlarmNotifyPeriod *float64 `json:"alarmNotifyPeriod,omitempty" tf:"alarm_notify_period,omitempty"`

	// Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
	AlarmNotifyType *float64 `json:"alarmNotifyType,omitempty" tf:"alarm_notify_type,omitempty"`

	// Data aggregation cycle (unit of second), if the metric has a default value can not be filled, refer to `data.tencentcloud_monitor_policy_conditions(period_keys)`.
	CalcPeriod *float64 `json:"calcPeriod,omitempty" tf:"calc_period,omitempty"`

	// Compare type. Valid value ranges: [1~12]. `1` means more than, `2` means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell, refer to `data.tencentcloud_monitor_policy_conditions(calc_type_keys)`.
	CalcType *float64 `json:"calcType,omitempty" tf:"calc_type,omitempty"`

	// Threshold value, refer to `data.tencentcloud_monitor_policy_conditions(calc_value_*)`.
	CalcValue *float64 `json:"calcValue,omitempty" tf:"calc_value,omitempty"`

	// The rule triggers an alert that lasts for several detection cycles, refer to `data.tencentcloud_monitor_policy_conditions(period_num_keys)`.
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Id of the metric, refer to `data.tencentcloud_monitor_policy_conditions(metric_id)`.
	MetricID *float64 `json:"metricId,omitempty" tf:"metric_id,omitempty"`
}

type PolicyGroupConditionsObservation struct {

	// Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
	AlarmNotifyPeriod *float64 `json:"alarmNotifyPeriod,omitempty" tf:"alarm_notify_period,omitempty"`

	// Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
	AlarmNotifyType *float64 `json:"alarmNotifyType,omitempty" tf:"alarm_notify_type,omitempty"`

	// Data aggregation cycle (unit of second), if the metric has a default value can not be filled, refer to `data.tencentcloud_monitor_policy_conditions(period_keys)`.
	CalcPeriod *float64 `json:"calcPeriod,omitempty" tf:"calc_period,omitempty"`

	// Compare type. Valid value ranges: [1~12]. `1` means more than, `2` means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell, refer to `data.tencentcloud_monitor_policy_conditions(calc_type_keys)`.
	CalcType *float64 `json:"calcType,omitempty" tf:"calc_type,omitempty"`

	// Threshold value, refer to `data.tencentcloud_monitor_policy_conditions(calc_value_*)`.
	CalcValue *float64 `json:"calcValue,omitempty" tf:"calc_value,omitempty"`

	// The rule triggers an alert that lasts for several detection cycles, refer to `data.tencentcloud_monitor_policy_conditions(period_num_keys)`.
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Id of the metric, refer to `data.tencentcloud_monitor_policy_conditions(metric_id)`.
	MetricID *float64 `json:"metricId,omitempty" tf:"metric_id,omitempty"`
}

type PolicyGroupConditionsParameters struct {

	// Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
	// +kubebuilder:validation:Optional
	AlarmNotifyPeriod *float64 `json:"alarmNotifyPeriod" tf:"alarm_notify_period,omitempty"`

	// Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
	// +kubebuilder:validation:Optional
	AlarmNotifyType *float64 `json:"alarmNotifyType" tf:"alarm_notify_type,omitempty"`

	// Data aggregation cycle (unit of second), if the metric has a default value can not be filled, refer to `data.tencentcloud_monitor_policy_conditions(period_keys)`.
	// +kubebuilder:validation:Optional
	CalcPeriod *float64 `json:"calcPeriod,omitempty" tf:"calc_period,omitempty"`

	// Compare type. Valid value ranges: [1~12]. `1` means more than, `2` means greater than or equal, `3` means less than, `4` means less than or equal to, `5` means equal, `6` means not equal, `7` means days rose, `8` means days fell, `9` means weeks rose, `10` means weeks fell, `11` means period rise, `12` means period fell, refer to `data.tencentcloud_monitor_policy_conditions(calc_type_keys)`.
	// +kubebuilder:validation:Optional
	CalcType *float64 `json:"calcType,omitempty" tf:"calc_type,omitempty"`

	// Threshold value, refer to `data.tencentcloud_monitor_policy_conditions(calc_value_*)`.
	// +kubebuilder:validation:Optional
	CalcValue *float64 `json:"calcValue,omitempty" tf:"calc_value,omitempty"`

	// The rule triggers an alert that lasts for several detection cycles, refer to `data.tencentcloud_monitor_policy_conditions(period_num_keys)`.
	// +kubebuilder:validation:Optional
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Id of the metric, refer to `data.tencentcloud_monitor_policy_conditions(metric_id)`.
	// +kubebuilder:validation:Optional
	MetricID *float64 `json:"metricId" tf:"metric_id,omitempty"`
}

type PolicyGroupEventConditionsInitParameters struct {

	// Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
	AlarmNotifyPeriod *float64 `json:"alarmNotifyPeriod,omitempty" tf:"alarm_notify_period,omitempty"`

	// Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
	AlarmNotifyType *float64 `json:"alarmNotifyType,omitempty" tf:"alarm_notify_type,omitempty"`

	// The ID of this event metric, refer to `data.tencentcloud_monitor_policy_conditions(event_id).
	EventID *float64 `json:"eventId,omitempty" tf:"event_id,omitempty"`
}

type PolicyGroupEventConditionsObservation struct {

	// Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
	AlarmNotifyPeriod *float64 `json:"alarmNotifyPeriod,omitempty" tf:"alarm_notify_period,omitempty"`

	// Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
	AlarmNotifyType *float64 `json:"alarmNotifyType,omitempty" tf:"alarm_notify_type,omitempty"`

	// The ID of this event metric, refer to `data.tencentcloud_monitor_policy_conditions(event_id).
	EventID *float64 `json:"eventId,omitempty" tf:"event_id,omitempty"`
}

type PolicyGroupEventConditionsParameters struct {

	// Alarm sending cycle per second. <0 does not fire, `0` only fires once, and >0 fires every triggerTime second.
	// +kubebuilder:validation:Optional
	AlarmNotifyPeriod *float64 `json:"alarmNotifyPeriod" tf:"alarm_notify_period,omitempty"`

	// Alarm sending convergence type. `0` continuous alarm, `1` index alarm.
	// +kubebuilder:validation:Optional
	AlarmNotifyType *float64 `json:"alarmNotifyType" tf:"alarm_notify_type,omitempty"`

	// The ID of this event metric, refer to `data.tencentcloud_monitor_policy_conditions(event_id).
	// +kubebuilder:validation:Optional
	EventID *float64 `json:"eventId" tf:"event_id,omitempty"`
}

type PolicyGroupInitParameters struct {

	// A list of threshold rules. Each element contains the following attributes:
	Conditions []PolicyGroupConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// A list of event rules. Each element contains the following attributes:
	EventConditions []PolicyGroupEventConditionsInitParameters `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// Policy group name, length should between 1 and 20.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
	PolicyViewName *string `json:"policyViewName,omitempty" tf:"policy_view_name,omitempty"`

	// The project id to which the policy group belongs, default is `0`.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Policy group's remark information.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`
}

type PolicyGroupObservation struct {

	// A list binding objects(list only those in the `provider.region`). Each element contains the following attributes:
	BindingObjects []BindingObjectsObservation `json:"bindingObjects,omitempty" tf:"binding_objects,omitempty"`

	// A list of threshold rules. Each element contains the following attributes:
	Conditions []PolicyGroupConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// A list of dimensions for this policy group.
	DimensionGroup []*string `json:"dimensionGroup,omitempty" tf:"dimension_group,omitempty"`

	// A list of event rules. Each element contains the following attributes:
	EventConditions []PolicyGroupEventConditionsObservation `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// Policy group name, length should between 1 and 20.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// Recently edited user uin.
	LastEditUin *string `json:"lastEditUin,omitempty" tf:"last_edit_uin,omitempty"`

	// Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
	PolicyViewName *string `json:"policyViewName,omitempty" tf:"policy_view_name,omitempty"`

	// The project id to which the policy group belongs, default is `0`.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// A list of receivers. Each element contains the following attributes:
	Receivers []PolicyGroupReceiversObservation `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Policy group's remark information.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Support regions this policy group.
	SupportRegions []*string `json:"supportRegions,omitempty" tf:"support_regions,omitempty"`

	// The policy group update time.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type PolicyGroupParameters struct {

	// A list of threshold rules. Each element contains the following attributes:
	// +kubebuilder:validation:Optional
	Conditions []PolicyGroupConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// A list of event rules. Each element contains the following attributes:
	// +kubebuilder:validation:Optional
	EventConditions []PolicyGroupEventConditionsParameters `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// Policy group name, length should between 1 and 20.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
	// +kubebuilder:validation:Optional
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
	// +kubebuilder:validation:Optional
	PolicyViewName *string `json:"policyViewName,omitempty" tf:"policy_view_name,omitempty"`

	// The project id to which the policy group belongs, default is `0`.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Policy group's remark information.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`
}

type PolicyGroupReceiversInitParameters struct {
}

type PolicyGroupReceiversObservation struct {
	EndTime *float64 `json:"endTime,omitempty" tf:"end_time,omitempty"`

	NeedSendNotice *float64 `json:"needSendNotice,omitempty" tf:"need_send_notice,omitempty"`

	NotifyWay []*string `json:"notifyWay,omitempty" tf:"notify_way,omitempty"`

	PersonInterval *float64 `json:"personInterval,omitempty" tf:"person_interval,omitempty"`

	ReceiveLanguage *string `json:"receiveLanguage,omitempty" tf:"receive_language,omitempty"`

	ReceiverGroupList []*float64 `json:"receiverGroupList,omitempty" tf:"receiver_group_list,omitempty"`

	ReceiverType *string `json:"receiverType,omitempty" tf:"receiver_type,omitempty"`

	ReceiverUserList []*float64 `json:"receiverUserList,omitempty" tf:"receiver_user_list,omitempty"`

	RecoverNotify []*string `json:"recoverNotify,omitempty" tf:"recover_notify,omitempty"`

	RoundInterval *float64 `json:"roundInterval,omitempty" tf:"round_interval,omitempty"`

	RoundNumber *float64 `json:"roundNumber,omitempty" tf:"round_number,omitempty"`

	SendFor []*string `json:"sendFor,omitempty" tf:"send_for,omitempty"`

	StartTime *float64 `json:"startTime,omitempty" tf:"start_time,omitempty"`

	UIDList []*float64 `json:"uidList,omitempty" tf:"uid_list,omitempty"`
}

type PolicyGroupReceiversParameters struct {
}

// PolicyGroupSpec defines the desired state of PolicyGroup
type PolicyGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyGroupInitParameters `json:"initProvider,omitempty"`
}

// PolicyGroupStatus defines the observed state of PolicyGroup.
type PolicyGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGroup is the Schema for the PolicyGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type PolicyGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupName) || (has(self.initProvider) && has(self.initProvider.groupName))",message="spec.forProvider.groupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyViewName) || (has(self.initProvider) && has(self.initProvider.policyViewName))",message="spec.forProvider.policyViewName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.remark) || (has(self.initProvider) && has(self.initProvider.remark))",message="spec.forProvider.remark is a required parameter"
	Spec   PolicyGroupSpec   `json:"spec"`
	Status PolicyGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGroupList contains a list of PolicyGroups
type PolicyGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyGroup `json:"items"`
}

// Repository type metadata.
var (
	PolicyGroup_Kind             = "PolicyGroup"
	PolicyGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyGroup_Kind}.String()
	PolicyGroup_KindAPIVersion   = PolicyGroup_Kind + "." + CRDGroupVersion.String()
	PolicyGroup_GroupVersionKind = CRDGroupVersion.WithKind(PolicyGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyGroup{}, &PolicyGroupList{})
}
