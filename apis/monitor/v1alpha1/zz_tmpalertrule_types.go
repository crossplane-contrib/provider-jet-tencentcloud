// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnnotationsInitParameters struct {

	// key.
	// key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// value.
	// value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AnnotationsObservation struct {

	// key.
	// key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// value.
	// value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AnnotationsParameters struct {

	// key.
	// key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// value.
	// value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type LabelsInitParameters struct {

	// key.
	// key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// value.
	// value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsObservation struct {

	// key.
	// key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// value.
	// value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsParameters struct {

	// key.
	// key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// value.
	// value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type TmpAlertRuleInitParameters struct {

	// Rule alarm duration.
	// Rule alarm duration.
	Annotations []AnnotationsInitParameters `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Rule alarm duration.
	// Rule alarm duration.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// Rule expression, reference documentation: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/.
	// Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
	Expr *string `json:"expr,omitempty" tf:"expr,omitempty"`

	// Rule alarm duration.
	// Rule alarm duration.
	Labels []LabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// Alarm notification template id list.
	// Alarm notification template id list.
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Rule name.
	// Rule name.
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule state code.
	// Rule state code.
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`

	// Alarm Policy Template Classification.
	// Alarm Policy Template Classification.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TmpAlertRuleObservation struct {

	// Rule alarm duration.
	// Rule alarm duration.
	Annotations []AnnotationsObservation `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Rule alarm duration.
	// Rule alarm duration.
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// Rule expression, reference documentation: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/.
	// Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
	Expr *string `json:"expr,omitempty" tf:"expr,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance id.
	// Instance id.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Rule alarm duration.
	// Rule alarm duration.
	Labels []LabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	// Alarm notification template id list.
	// Alarm notification template id list.
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Rule name.
	// Rule name.
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule state code.
	// Rule state code.
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`

	// Alarm Policy Template Classification.
	// Alarm Policy Template Classification.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TmpAlertRuleParameters struct {

	// Rule alarm duration.
	// Rule alarm duration.
	// +kubebuilder:validation:Optional
	Annotations []AnnotationsParameters `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// Rule alarm duration.
	// Rule alarm duration.
	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// Rule expression, reference documentation: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/.
	// Rule expression, reference documentation: `https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/`.
	// +kubebuilder:validation:Optional
	Expr *string `json:"expr,omitempty" tf:"expr,omitempty"`

	// Instance id.
	// Instance id.
	// +crossplane:generate:reference:type=TmpInstance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a TmpInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a TmpInstance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// Rule alarm duration.
	// Rule alarm duration.
	// +kubebuilder:validation:Optional
	Labels []LabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// Alarm notification template id list.
	// Alarm notification template id list.
	// +kubebuilder:validation:Optional
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// Rule name.
	// Rule name.
	// +kubebuilder:validation:Optional
	RuleName *string `json:"ruleName,omitempty" tf:"rule_name,omitempty"`

	// Rule state code.
	// Rule state code.
	// +kubebuilder:validation:Optional
	RuleState *float64 `json:"ruleState,omitempty" tf:"rule_state,omitempty"`

	// Alarm Policy Template Classification.
	// Alarm Policy Template Classification.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// TmpAlertRuleSpec defines the desired state of TmpAlertRule
type TmpAlertRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TmpAlertRuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TmpAlertRuleInitParameters `json:"initProvider,omitempty"`
}

// TmpAlertRuleStatus defines the observed state of TmpAlertRule.
type TmpAlertRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TmpAlertRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TmpAlertRule is the Schema for the TmpAlertRules API. Provides a resource to create a monitor tmpAlertRule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type TmpAlertRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.expr) || (has(self.initProvider) && has(self.initProvider.expr))",message="spec.forProvider.expr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.receivers) || (has(self.initProvider) && has(self.initProvider.receivers))",message="spec.forProvider.receivers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ruleName) || (has(self.initProvider) && has(self.initProvider.ruleName))",message="spec.forProvider.ruleName is a required parameter"
	Spec   TmpAlertRuleSpec   `json:"spec"`
	Status TmpAlertRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TmpAlertRuleList contains a list of TmpAlertRules
type TmpAlertRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TmpAlertRule `json:"items"`
}

// Repository type metadata.
var (
	TmpAlertRule_Kind             = "TmpAlertRule"
	TmpAlertRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TmpAlertRule_Kind}.String()
	TmpAlertRule_KindAPIVersion   = TmpAlertRule_Kind + "." + CRDGroupVersion.String()
	TmpAlertRule_GroupVersionKind = CRDGroupVersion.WithKind(TmpAlertRule_Kind)
)

func init() {
	SchemeBuilder.Register(&TmpAlertRule{}, &TmpAlertRuleList{})
}
