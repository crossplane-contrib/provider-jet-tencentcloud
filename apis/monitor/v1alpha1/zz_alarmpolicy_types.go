// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlarmPolicyFilterInitParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AlarmPolicyFilterObservation struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AlarmPolicyFilterParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// +kubebuilder:validation:Optional
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type AlarmPolicyInitParameters struct {

	// A list of metric trigger condition.
	// A list of metric trigger condition.
	Conditions []ConditionsInitParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// ID of trigger condition template.
	// ID of trigger condition template.
	ConditonTemplateID *float64 `json:"conditonTemplateId,omitempty" tf:"conditon_template_id,omitempty"`

	// Whether to enable, default is 1.
	// Whether to enable, default is `1`.
	Enable *float64 `json:"enable,omitempty" tf:"enable,omitempty"`

	// A list of event trigger condition.
	// A list of event trigger condition.
	EventConditions []EventConditionsInitParameters `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// Global filters.
	// Global filters.
	Filter []AlarmPolicyFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Aggregate dimension list, specify which dimension keys to use for group by.
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The type of monitor.
	// The type of monitor.
	MonitorType *string `json:"monitorType,omitempty" tf:"monitor_type,omitempty"`

	// The type of alarm.
	// The type of alarm.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// The name of policy.
	// The name of policy.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// Policy tag to bind object.
	// Policy tag to bind object.
	PolicyTag []PolicyTagInitParameters `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`

	// Project ID. For products with different projects, a value other than -1 must be passed in.
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The remark of policy group.
	// The remark of policy group.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Triggered task list.
	// Triggered task list.
	TriggerTasks []TriggerTasksInitParameters `json:"triggerTasks,omitempty" tf:"trigger_tasks,omitempty"`
}

type AlarmPolicyObservation struct {

	// A list of metric trigger condition.
	// A list of metric trigger condition.
	Conditions []ConditionsObservation `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// ID of trigger condition template.
	// ID of trigger condition template.
	ConditonTemplateID *float64 `json:"conditonTemplateId,omitempty" tf:"conditon_template_id,omitempty"`

	// The alarm policy create time.
	// The alarm policy create time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Whether to enable, default is 1.
	// Whether to enable, default is `1`.
	Enable *float64 `json:"enable,omitempty" tf:"enable,omitempty"`

	// A list of event trigger condition.
	// A list of event trigger condition.
	EventConditions []EventConditionsObservation `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// Global filters.
	// Global filters.
	Filter []AlarmPolicyFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Aggregate dimension list, specify which dimension keys to use for group by.
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The type of monitor.
	// The type of monitor.
	MonitorType *string `json:"monitorType,omitempty" tf:"monitor_type,omitempty"`

	// The type of alarm.
	// The type of alarm.
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of notification rule IDs.
	// List of notification rule IDs.
	NoticeIds []*string `json:"noticeIds,omitempty" tf:"notice_ids,omitempty"`

	// The name of policy.
	// The name of policy.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// Policy tag to bind object.
	// Policy tag to bind object.
	PolicyTag []PolicyTagObservation `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`

	// Project ID. For products with different projects, a value other than -1 must be passed in.
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The remark of policy group.
	// The remark of policy group.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Triggered task list.
	// Triggered task list.
	TriggerTasks []TriggerTasksObservation `json:"triggerTasks,omitempty" tf:"trigger_tasks,omitempty"`

	// The alarm policy update time.
	// The alarm policy update time.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type AlarmPolicyParameters struct {

	// A list of metric trigger condition.
	// A list of metric trigger condition.
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// ID of trigger condition template.
	// ID of trigger condition template.
	// +kubebuilder:validation:Optional
	ConditonTemplateID *float64 `json:"conditonTemplateId,omitempty" tf:"conditon_template_id,omitempty"`

	// Whether to enable, default is 1.
	// Whether to enable, default is `1`.
	// +kubebuilder:validation:Optional
	Enable *float64 `json:"enable,omitempty" tf:"enable,omitempty"`

	// A list of event trigger condition.
	// A list of event trigger condition.
	// +kubebuilder:validation:Optional
	EventConditions []EventConditionsParameters `json:"eventConditions,omitempty" tf:"event_conditions,omitempty"`

	// Global filters.
	// Global filters.
	// +kubebuilder:validation:Optional
	Filter []AlarmPolicyFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Aggregate dimension list, specify which dimension keys to use for group by.
	// Aggregate dimension list, specify which dimension keys to use for group by.
	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// The type of monitor.
	// The type of monitor.
	// +kubebuilder:validation:Optional
	MonitorType *string `json:"monitorType,omitempty" tf:"monitor_type,omitempty"`

	// The type of alarm.
	// The type of alarm.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// List of notification rule IDs.
	// List of notification rule IDs.
	// +crossplane:generate:reference:type=AlarmNotice
	// +kubebuilder:validation:Optional
	NoticeIds []*string `json:"noticeIds,omitempty" tf:"notice_ids,omitempty"`

	// References to AlarmNotice to populate noticeIds.
	// +kubebuilder:validation:Optional
	NoticeIdsRefs []v1.Reference `json:"noticeIdsRefs,omitempty" tf:"-"`

	// Selector for a list of AlarmNotice to populate noticeIds.
	// +kubebuilder:validation:Optional
	NoticeIdsSelector *v1.Selector `json:"noticeIdsSelector,omitempty" tf:"-"`

	// The name of policy.
	// The name of policy.
	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// Policy tag to bind object.
	// Policy tag to bind object.
	// +kubebuilder:validation:Optional
	PolicyTag []PolicyTagParameters `json:"policyTag,omitempty" tf:"policy_tag,omitempty"`

	// Project ID. For products with different projects, a value other than -1 must be passed in.
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	// +kubebuilder:validation:Optional
	ProjectID *float64 `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The remark of policy group.
	// The remark of policy group.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// Triggered task list.
	// Triggered task list.
	// +kubebuilder:validation:Optional
	TriggerTasks []TriggerTasksParameters `json:"triggerTasks,omitempty" tf:"trigger_tasks,omitempty"`
}

type ConditionsInitParameters struct {

	// The and or relation of indicator alarm rule.
	// The and or relation of indicator alarm rule.
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// A list of metric trigger condition.
	// A list of metric trigger condition.
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ConditionsObservation struct {

	// The and or relation of indicator alarm rule.
	// The and or relation of indicator alarm rule.
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// A list of metric trigger condition.
	// A list of metric trigger condition.
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ConditionsParameters struct {

	// The and or relation of indicator alarm rule.
	// The and or relation of indicator alarm rule.
	// +kubebuilder:validation:Optional
	IsUnionRule *float64 `json:"isUnionRule,omitempty" tf:"is_union_rule,omitempty"`

	// A list of metric trigger condition.
	// A list of metric trigger condition.
	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type EventConditionsFilterInitParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EventConditionsFilterObservation struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EventConditionsFilterParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// +kubebuilder:validation:Optional
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type EventConditionsInitParameters struct {

	// Number of periods.
	// Number of periods.
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// Metric display name, which is used in the output parameter.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Global filters.
	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	Filter []EventConditionsFilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// Whether the alarm frequency increases exponentially.
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// Metric name or event name.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// Alarm interval in seconds.
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// Operator.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// Statistical period in seconds.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// Trigger condition type.
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// Unit, which is used in the output parameter.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// Threshold.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EventConditionsObservation struct {

	// Number of periods.
	// Number of periods.
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// Metric display name, which is used in the output parameter.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Global filters.
	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	Filter []EventConditionsFilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// Whether the alarm frequency increases exponentially.
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// Metric name or event name.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// Alarm interval in seconds.
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// Operator.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// Statistical period in seconds.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// Trigger condition type.
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// Unit, which is used in the output parameter.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// Threshold.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type EventConditionsParameters struct {

	// Number of periods.
	// Number of periods.
	// +kubebuilder:validation:Optional
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// Metric display name, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Global filters.
	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	// +kubebuilder:validation:Optional
	Filter []EventConditionsFilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// Whether the alarm frequency increases exponentially.
	// +kubebuilder:validation:Optional
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// Metric name or event name.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// Alarm interval in seconds.
	// +kubebuilder:validation:Optional
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// Operator.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// Statistical period in seconds.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// Trigger condition type.
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// Unit, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// Threshold.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type FilterInitParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FilterObservation struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FilterParameters struct {

	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// JSON string generated by serializing the AlarmPolicyDimension two-dimensional array.
	// +kubebuilder:validation:Optional
	Dimensions *string `json:"dimensions,omitempty" tf:"dimensions,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyTagInitParameters struct {

	// Tag key.
	// Tag key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Threshold.
	// Tag value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PolicyTagObservation struct {

	// Tag key.
	// Tag key.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Threshold.
	// Tag value.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PolicyTagParameters struct {

	// Tag key.
	// Tag key.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Threshold.
	// Tag value.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type RulesInitParameters struct {

	// Number of periods.
	// Number of periods.
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// Metric display name, which is used in the output parameter.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Global filters.
	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	Filter []FilterInitParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// Whether the alarm frequency increases exponentially.
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// Metric name or event name.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// Alarm interval in seconds.
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// Operator.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// Statistical period in seconds.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// Trigger condition type.
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// Unit, which is used in the output parameter.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// Threshold.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RulesObservation struct {

	// Number of periods.
	// Number of periods.
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// Metric display name, which is used in the output parameter.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Global filters.
	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// Whether the alarm frequency increases exponentially.
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// Metric name or event name.
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// Alarm interval in seconds.
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// Operator.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// Statistical period in seconds.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// Trigger condition type.
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// Unit, which is used in the output parameter.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// Threshold.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RulesParameters struct {

	// Number of periods.
	// Number of periods.
	// +kubebuilder:validation:Optional
	ContinuePeriod *float64 `json:"continuePeriod,omitempty" tf:"continue_period,omitempty"`

	// Metric display name, which is used in the output parameter.
	// Metric display name, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Global filters.
	// Filter condition for one single trigger rule. Must set it when create tke-xxx rules.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`

	// Whether the alarm frequency increases exponentially.
	// Whether the alarm frequency increases exponentially.
	// +kubebuilder:validation:Optional
	IsPowerNotice *float64 `json:"isPowerNotice,omitempty" tf:"is_power_notice,omitempty"`

	// Metric name or event name.
	// Metric name or event name.
	// +kubebuilder:validation:Optional
	MetricName *string `json:"metricName,omitempty" tf:"metric_name,omitempty"`

	// Alarm interval in seconds.
	// Alarm interval in seconds.
	// +kubebuilder:validation:Optional
	NoticeFrequency *float64 `json:"noticeFrequency,omitempty" tf:"notice_frequency,omitempty"`

	// Operator.
	// Operator.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Statistical period in seconds.
	// Statistical period in seconds.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// Trigger condition type.
	// Trigger condition type.
	// +kubebuilder:validation:Optional
	RuleType *string `json:"ruleType,omitempty" tf:"rule_type,omitempty"`

	// Unit, which is used in the output parameter.
	// Unit, which is used in the output parameter.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Threshold.
	// Threshold.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TriggerTasksInitParameters struct {

	// Configuration information in JSON format.
	// Configuration information in JSON format.
	TaskConfig *string `json:"taskConfig,omitempty" tf:"task_config,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Triggered task type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TriggerTasksObservation struct {

	// Configuration information in JSON format.
	// Configuration information in JSON format.
	TaskConfig *string `json:"taskConfig,omitempty" tf:"task_config,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Triggered task type.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TriggerTasksParameters struct {

	// Configuration information in JSON format.
	// Configuration information in JSON format.
	// +kubebuilder:validation:Optional
	TaskConfig *string `json:"taskConfig" tf:"task_config,omitempty"`

	// Filter condition type. Valid values: DIMENSION (uses dimensions for filtering).
	// Triggered task type.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// AlarmPolicySpec defines the desired state of AlarmPolicy
type AlarmPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlarmPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AlarmPolicyInitParameters `json:"initProvider,omitempty"`
}

// AlarmPolicyStatus defines the observed state of AlarmPolicy.
type AlarmPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlarmPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmPolicy is the Schema for the AlarmPolicys API. Provides a alarm policy resource for monitor.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type AlarmPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.monitorType) || (has(self.initProvider) && has(self.initProvider.monitorType))",message="spec.forProvider.monitorType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.__namespace__) || (has(self.initProvider) && has(self.initProvider.__namespace__))",message="spec.forProvider.namespace is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyName) || (has(self.initProvider) && has(self.initProvider.policyName))",message="spec.forProvider.policyName is a required parameter"
	Spec   AlarmPolicySpec   `json:"spec"`
	Status AlarmPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlarmPolicyList contains a list of AlarmPolicys
type AlarmPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlarmPolicy `json:"items"`
}

// Repository type metadata.
var (
	AlarmPolicy_Kind             = "AlarmPolicy"
	AlarmPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlarmPolicy_Kind}.String()
	AlarmPolicy_KindAPIVersion   = AlarmPolicy_Kind + "." + CRDGroupVersion.String()
	AlarmPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AlarmPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AlarmPolicy{}, &AlarmPolicyList{})
}
