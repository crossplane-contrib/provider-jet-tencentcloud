// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketObjectInitParameters struct {

	// The canned ACL to apply. Available values include private, public-read, and public-read-write. Defaults to private.
	// The canned ACL to apply. Available values include `private`, `public-read`, and `public-read-write`. Defaults to `private`.
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// Specifies caching behavior along the request/reply chain. For further details, RFC2616 can be referred.
	// Specifies caching behavior along the request/reply chain. For further details, RFC2616 can be referred.
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies presentational information for the object.
	// Specifies presentational information for the object.
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// A standard MIME type describing the format of the object data.
	// A standard MIME type describing the format of the object data.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The ETag generated for the object (an MD5 sum of the object content).
	// The ETag generated for the object (an MD5 sum of the object content).
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The name of the object once it is in the bucket.
	// The name of the object once it is in the bucket.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The path to the source file being uploaded to the bucket.
	// The path to the source file being uploaded to the bucket.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Object storage type, Available values include STANDARD_IA, MAZ_STANDARD_IA, INTELLIGENT_TIERING, MAZ_INTELLIGENT_TIERING, ARCHIVE, DEEP_ARCHIVE. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
	// Object storage type, Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Tag of the object.
	// Tag of the object.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BucketObjectObservation struct {

	// The canned ACL to apply. Available values include private, public-read, and public-read-write. Defaults to private.
	// The canned ACL to apply. Available values include `private`, `public-read`, and `public-read-write`. Defaults to `private`.
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// The name of a bucket to use. Bucket format should be [custom name]-[appid], for example mycos-1258798060.
	// The name of a bucket to use. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Specifies caching behavior along the request/reply chain. For further details, RFC2616 can be referred.
	// Specifies caching behavior along the request/reply chain. For further details, RFC2616 can be referred.
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies presentational information for the object.
	// Specifies presentational information for the object.
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// A standard MIME type describing the format of the object data.
	// A standard MIME type describing the format of the object data.
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The ETag generated for the object (an MD5 sum of the object content).
	// The ETag generated for the object (an MD5 sum of the object content).
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the object once it is in the bucket.
	// The name of the object once it is in the bucket.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The path to the source file being uploaded to the bucket.
	// The path to the source file being uploaded to the bucket.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Object storage type, Available values include STANDARD_IA, MAZ_STANDARD_IA, INTELLIGENT_TIERING, MAZ_INTELLIGENT_TIERING, ARCHIVE, DEEP_ARCHIVE. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
	// Object storage type, Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Tag of the object.
	// Tag of the object.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type BucketObjectParameters struct {

	// The canned ACL to apply. Available values include private, public-read, and public-read-write. Defaults to private.
	// The canned ACL to apply. Available values include `private`, `public-read`, and `public-read-write`. Defaults to `private`.
	// +kubebuilder:validation:Optional
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	// The name of a bucket to use. Bucket format should be [custom name]-[appid], for example mycos-1258798060.
	// The name of a bucket to use. Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	// +crossplane:generate:reference:type=Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Specifies caching behavior along the request/reply chain. For further details, RFC2616 can be referred.
	// Specifies caching behavior along the request/reply chain. For further details, RFC2616 can be referred.
	// +kubebuilder:validation:Optional
	CacheControl *string `json:"cacheControl,omitempty" tf:"cache_control,omitempty"`

	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Specifies presentational information for the object.
	// Specifies presentational information for the object.
	// +kubebuilder:validation:Optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
	// Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
	// +kubebuilder:validation:Optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// A standard MIME type describing the format of the object data.
	// A standard MIME type describing the format of the object data.
	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// The ETag generated for the object (an MD5 sum of the object content).
	// The ETag generated for the object (an MD5 sum of the object content).
	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// The name of the object once it is in the bucket.
	// The name of the object once it is in the bucket.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The path to the source file being uploaded to the bucket.
	// The path to the source file being uploaded to the bucket.
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Object storage type, Available values include STANDARD_IA, MAZ_STANDARD_IA, INTELLIGENT_TIERING, MAZ_INTELLIGENT_TIERING, ARCHIVE, DEEP_ARCHIVE. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
	// Object storage type, Available values include `STANDARD_IA`, `MAZ_STANDARD_IA`, `INTELLIGENT_TIERING`, `MAZ_INTELLIGENT_TIERING`, `ARCHIVE`, `DEEP_ARCHIVE`. For more information, please refer to: https://cloud.tencent.com/document/product/436/33417.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`

	// Tag of the object.
	// Tag of the object.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// BucketObjectSpec defines the desired state of BucketObject
type BucketObjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketObjectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketObjectInitParameters `json:"initProvider,omitempty"`
}

// BucketObjectStatus defines the observed state of BucketObject.
type BucketObjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketObjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketObject is the Schema for the BucketObjects API. Provides a COS object resource to put an object(content or file) to the bucket.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type BucketObject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	Spec   BucketObjectSpec   `json:"spec"`
	Status BucketObjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketObjectList contains a list of BucketObjects
type BucketObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketObject `json:"items"`
}

// Repository type metadata.
var (
	BucketObject_Kind             = "BucketObject"
	BucketObject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketObject_Kind}.String()
	BucketObject_KindAPIVersion   = BucketObject_Kind + "." + CRDGroupVersion.String()
	BucketObject_GroupVersionKind = CRDGroupVersion.WithKind(BucketObject_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketObject{}, &BucketObjectList{})
}
