// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EniAttachmentInitParameters struct {
}

type EniAttachmentObservation struct {

	// ID of the ENI.
	// ID of the ENI.
	EniID *string `json:"eniId,omitempty" tf:"eni_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the instance which bind the ENI.
	// ID of the instance which bind the ENI.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type EniAttachmentParameters struct {

	// ID of the ENI.
	// ID of the ENI.
	// +crossplane:generate:reference:type=Eni
	// +kubebuilder:validation:Optional
	EniID *string `json:"eniId,omitempty" tf:"eni_id,omitempty"`

	// Reference to a Eni to populate eniId.
	// +kubebuilder:validation:Optional
	EniIDRef *v1.Reference `json:"eniIdRef,omitempty" tf:"-"`

	// Selector for a Eni to populate eniId.
	// +kubebuilder:validation:Optional
	EniIDSelector *v1.Selector `json:"eniIdSelector,omitempty" tf:"-"`

	// ID of the instance which bind the ENI.
	// ID of the instance which bind the ENI.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-tencentcloud/apis/cvm/v1alpha1.Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance in cvm to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance in cvm to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`
}

// EniAttachmentSpec defines the desired state of EniAttachment
type EniAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EniAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EniAttachmentInitParameters `json:"initProvider,omitempty"`
}

// EniAttachmentStatus defines the observed state of EniAttachment.
type EniAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EniAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EniAttachment is the Schema for the EniAttachments API. Provides a resource to detailed information of attached backend server to an ENI.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type EniAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EniAttachmentSpec   `json:"spec"`
	Status            EniAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EniAttachmentList contains a list of EniAttachments
type EniAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EniAttachment `json:"items"`
}

// Repository type metadata.
var (
	EniAttachment_Kind             = "EniAttachment"
	EniAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EniAttachment_Kind}.String()
	EniAttachment_KindAPIVersion   = EniAttachment_Kind + "." + CRDGroupVersion.String()
	EniAttachment_GroupVersionKind = CRDGroupVersion.WithKind(EniAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&EniAttachment{}, &EniAttachmentList{})
}
