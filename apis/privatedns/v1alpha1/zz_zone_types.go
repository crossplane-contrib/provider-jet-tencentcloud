// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountVPCSetInitParameters struct {

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// UIN of the VPC account.
	// UIN of the VPC account.
	Uin *string `json:"uin,omitempty" tf:"uin,omitempty"`

	// VPC ID.
	// VPC ID.
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`

	// VPC NAME.
	// VPC NAME.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type AccountVPCSetObservation struct {

	// Region.
	// Region.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// UIN of the VPC account.
	// UIN of the VPC account.
	Uin *string `json:"uin,omitempty" tf:"uin,omitempty"`

	// VPC ID.
	// VPC ID.
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`

	// VPC NAME.
	// VPC NAME.
	VPCName *string `json:"vpcName,omitempty" tf:"vpc_name,omitempty"`
}

type AccountVPCSetParameters struct {

	// Region.
	// Region.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// UIN of the VPC account.
	// UIN of the VPC account.
	// +kubebuilder:validation:Optional
	Uin *string `json:"uin" tf:"uin,omitempty"`

	// VPC ID.
	// VPC ID.
	// +kubebuilder:validation:Optional
	UniqVPCID *string `json:"uniqVpcId" tf:"uniq_vpc_id,omitempty"`

	// VPC NAME.
	// VPC NAME.
	// +kubebuilder:validation:Optional
	VPCName *string `json:"vpcName" tf:"vpc_name,omitempty"`
}

type TagSetInitParameters struct {

	// Key of Tag.
	// Key of Tag.
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// Value of Tag.
	// Value of Tag.
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type TagSetObservation struct {

	// Key of Tag.
	// Key of Tag.
	TagKey *string `json:"tagKey,omitempty" tf:"tag_key,omitempty"`

	// Value of Tag.
	// Value of Tag.
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type TagSetParameters struct {

	// Key of Tag.
	// Key of Tag.
	// +kubebuilder:validation:Optional
	TagKey *string `json:"tagKey" tf:"tag_key,omitempty"`

	// Value of Tag.
	// Value of Tag.
	// +kubebuilder:validation:Optional
	TagValue *string `json:"tagValue" tf:"tag_value,omitempty"`
}

type VPCSetInitParameters struct {

	// Region.
	// VPC REGION.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// VPC ID.
	// VPC ID.
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`
}

type VPCSetObservation struct {

	// Region.
	// VPC REGION.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// VPC ID.
	// VPC ID.
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`
}

type VPCSetParameters struct {

	// Region.
	// VPC REGION.
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// VPC ID.
	// VPC ID.
	// +kubebuilder:validation:Optional
	UniqVPCID *string `json:"uniqVpcId" tf:"uniq_vpc_id,omitempty"`
}

type ZoneInitParameters struct {

	// List of authorized accounts' VPCs to associate with the private domain.
	// List of authorized accounts' VPCs to associate with the private domain.
	AccountVPCSet []AccountVPCSetInitParameters `json:"accountVpcSet,omitempty" tf:"account_vpc_set,omitempty"`

	// CNAME acceleration: ENABLED, DISABLED, Default value is ENABLED.
	// CNAME acceleration: ENABLED, DISABLED, Default value is ENABLED.
	CnameSpeedupStatus *string `json:"cnameSpeedupStatus,omitempty" tf:"cname_speedup_status,omitempty"`

	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	DNSForwardStatus *string `json:"dnsForwardStatus,omitempty" tf:"dns_forward_status,omitempty"`

	// Domain name, which must be in the format of standard TLD.
	// Domain name, which must be in the format of standard TLD.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Remarks.
	// Remarks.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// It has been deprecated from version 1.72.4. Use tags instead. Tags the private domain when it is created.
	// Tags the private domain when it is created.
	TagSet []TagSetInitParameters `json:"tagSet,omitempty" tf:"tag_set,omitempty"`

	// Tags of the private dns zone.
	// Tags of the private dns zone.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Associates the private domain to a VPC when it is created.
	// Associates the private domain to a VPC when it is created.
	VPCSet []VPCSetInitParameters `json:"vpcSet,omitempty" tf:"vpc_set,omitempty"`
}

type ZoneObservation struct {

	// List of authorized accounts' VPCs to associate with the private domain.
	// List of authorized accounts' VPCs to associate with the private domain.
	AccountVPCSet []AccountVPCSetObservation `json:"accountVpcSet,omitempty" tf:"account_vpc_set,omitempty"`

	// CNAME acceleration: ENABLED, DISABLED, Default value is ENABLED.
	// CNAME acceleration: ENABLED, DISABLED, Default value is ENABLED.
	CnameSpeedupStatus *string `json:"cnameSpeedupStatus,omitempty" tf:"cname_speedup_status,omitempty"`

	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	DNSForwardStatus *string `json:"dnsForwardStatus,omitempty" tf:"dns_forward_status,omitempty"`

	// Domain name, which must be in the format of standard TLD.
	// Domain name, which must be in the format of standard TLD.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Remarks.
	// Remarks.
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// It has been deprecated from version 1.72.4. Use tags instead. Tags the private domain when it is created.
	// Tags the private domain when it is created.
	TagSet []TagSetObservation `json:"tagSet,omitempty" tf:"tag_set,omitempty"`

	// Tags of the private dns zone.
	// Tags of the private dns zone.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Associates the private domain to a VPC when it is created.
	// Associates the private domain to a VPC when it is created.
	VPCSet []VPCSetObservation `json:"vpcSet,omitempty" tf:"vpc_set,omitempty"`
}

type ZoneParameters struct {

	// List of authorized accounts' VPCs to associate with the private domain.
	// List of authorized accounts' VPCs to associate with the private domain.
	// +kubebuilder:validation:Optional
	AccountVPCSet []AccountVPCSetParameters `json:"accountVpcSet,omitempty" tf:"account_vpc_set,omitempty"`

	// CNAME acceleration: ENABLED, DISABLED, Default value is ENABLED.
	// CNAME acceleration: ENABLED, DISABLED, Default value is ENABLED.
	// +kubebuilder:validation:Optional
	CnameSpeedupStatus *string `json:"cnameSpeedupStatus,omitempty" tf:"cname_speedup_status,omitempty"`

	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	// Whether to enable subdomain recursive DNS. Valid values: ENABLED, DISABLED. Default value: DISABLED.
	// +kubebuilder:validation:Optional
	DNSForwardStatus *string `json:"dnsForwardStatus,omitempty" tf:"dns_forward_status,omitempty"`

	// Domain name, which must be in the format of standard TLD.
	// Domain name, which must be in the format of standard TLD.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Remarks.
	// Remarks.
	// +kubebuilder:validation:Optional
	Remark *string `json:"remark,omitempty" tf:"remark,omitempty"`

	// It has been deprecated from version 1.72.4. Use tags instead. Tags the private domain when it is created.
	// Tags the private domain when it is created.
	// +kubebuilder:validation:Optional
	TagSet []TagSetParameters `json:"tagSet,omitempty" tf:"tag_set,omitempty"`

	// Tags of the private dns zone.
	// Tags of the private dns zone.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Associates the private domain to a VPC when it is created.
	// Associates the private domain to a VPC when it is created.
	// +kubebuilder:validation:Optional
	VPCSet []VPCSetParameters `json:"vpcSet,omitempty" tf:"vpc_set,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneInitParameters `json:"initProvider,omitempty"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Zone is the Schema for the Zones API. Provide a resource to create a Private Dns Zone.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	Spec   ZoneSpec   `json:"spec"`
	Status ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
