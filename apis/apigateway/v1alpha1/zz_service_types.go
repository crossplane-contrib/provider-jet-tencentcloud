// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIListInitParameters struct {
}

type APIListObservation struct {

	// Description of the API.
	APIDesc *string `json:"apiDesc,omitempty" tf:"api_desc,omitempty"`

	// ID of the API.
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	// Name of the API.
	APIName *string `json:"apiName,omitempty" tf:"api_name,omitempty"`

	// Method of the API.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Path of the API.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type APIListParameters struct {
}

type ServiceInitParameters struct {

	// It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	// Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	ExclusiveSetName *string `json:"exclusiveSetName,omitempty" tf:"exclusive_set_name,omitempty"`

	// IP version number. Valid values: IPv4, IPv6. Default value: IPv4.
	// IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Exclusive instance ID.
	// Exclusive instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Network type list, which is used to specify the supported network types. Valid values: INNER, OUTER. INNER indicates access over private network, and OUTER indicates access over public network.
	// Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
	NetType []*string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	PreLimit *float64 `json:"preLimit,omitempty" tf:"pre_limit,omitempty"`

	// Service frontend request type. Valid values: http, https, http&https.
	// Service frontend request type. Valid values: `http`, `https`, `http&https`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	ReleaseLimit *float64 `json:"releaseLimit,omitempty" tf:"release_limit,omitempty"`

	// Custom service description.
	// Custom service description.
	ServiceDesc *string `json:"serviceDesc,omitempty" tf:"service_desc,omitempty"`

	// Custom service name.
	// Custom service name.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Tag description list.
	// Tag description list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	TestLimit *float64 `json:"testLimit,omitempty" tf:"test_limit,omitempty"`

	// VPC ID.
	// VPC ID.
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`
}

type ServiceObservation struct {

	// A list of APIs.
	// A list of APIs.
	APIList []APIListObservation `json:"apiList,omitempty" tf:"api_list,omitempty"`

	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	// Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	ExclusiveSetName *string `json:"exclusiveSetName,omitempty" tf:"exclusive_set_name,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP version number. Valid values: IPv4, IPv6. Default value: IPv4.
	// IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Port number for http access over private network.
	// Port number for http access over private network.
	InnerHTTPPort *float64 `json:"innerHttpPort,omitempty" tf:"inner_http_port,omitempty"`

	// Port number for https access over private network.
	// Port number for https access over private network.
	InnerHTTPSPort *float64 `json:"innerHttpsPort,omitempty" tf:"inner_https_port,omitempty"`

	// Exclusive instance ID.
	// Exclusive instance ID.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Private network access subdomain name.
	// Private network access subdomain name.
	InternalSubDomain *string `json:"internalSubDomain,omitempty" tf:"internal_sub_domain,omitempty"`

	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	ModifyTime *string `json:"modifyTime,omitempty" tf:"modify_time,omitempty"`

	// Network type list, which is used to specify the supported network types. Valid values: INNER, OUTER. INNER indicates access over private network, and OUTER indicates access over public network.
	// Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
	NetType []*string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// Public network access subdomain name.
	// Public network access subdomain name.
	OuterSubDomain *string `json:"outerSubDomain,omitempty" tf:"outer_sub_domain,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	PreLimit *float64 `json:"preLimit,omitempty" tf:"pre_limit,omitempty"`

	// Service frontend request type. Valid values: http, https, http&https.
	// Service frontend request type. Valid values: `http`, `https`, `http&https`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	ReleaseLimit *float64 `json:"releaseLimit,omitempty" tf:"release_limit,omitempty"`

	// Custom service description.
	// Custom service description.
	ServiceDesc *string `json:"serviceDesc,omitempty" tf:"service_desc,omitempty"`

	// Custom service name.
	// Custom service name.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Tag description list.
	// Tag description list.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	TestLimit *float64 `json:"testLimit,omitempty" tf:"test_limit,omitempty"`

	// VPC ID.
	// VPC ID.
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`

	// A list of attach usage plans.
	// A list of attach usage plans.
	UsagePlanList []UsagePlanListObservation `json:"usagePlanList,omitempty" tf:"usage_plan_list,omitempty"`
}

type ServiceParameters struct {

	// It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	// Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
	// +kubebuilder:validation:Optional
	ExclusiveSetName *string `json:"exclusiveSetName,omitempty" tf:"exclusive_set_name,omitempty"`

	// IP version number. Valid values: IPv4, IPv6. Default value: IPv4.
	// IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Exclusive instance ID.
	// Exclusive instance ID.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Network type list, which is used to specify the supported network types. Valid values: INNER, OUTER. INNER indicates access over private network, and OUTER indicates access over public network.
	// Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
	// +kubebuilder:validation:Optional
	NetType []*string `json:"netType,omitempty" tf:"net_type,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	// +kubebuilder:validation:Optional
	PreLimit *float64 `json:"preLimit,omitempty" tf:"pre_limit,omitempty"`

	// Service frontend request type. Valid values: http, https, http&https.
	// Service frontend request type. Valid values: `http`, `https`, `http&https`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	// +kubebuilder:validation:Optional
	ReleaseLimit *float64 `json:"releaseLimit,omitempty" tf:"release_limit,omitempty"`

	// Custom service description.
	// Custom service description.
	// +kubebuilder:validation:Optional
	ServiceDesc *string `json:"serviceDesc,omitempty" tf:"service_desc,omitempty"`

	// Custom service name.
	// Custom service name.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Tag description list.
	// Tag description list.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// API QPS value. Enter a positive number to limit the API query rate per second QPS.
	// API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
	// +kubebuilder:validation:Optional
	TestLimit *float64 `json:"testLimit,omitempty" tf:"test_limit,omitempty"`

	// VPC ID.
	// VPC ID.
	// +kubebuilder:validation:Optional
	UniqVPCID *string `json:"uniqVpcId,omitempty" tf:"uniq_vpc_id,omitempty"`
}

type UsagePlanListInitParameters struct {
}

type UsagePlanListObservation struct {

	// ID of the API.
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	// Binding type.
	BindType *string `json:"bindType,omitempty" tf:"bind_type,omitempty"`

	// ID of the usage plan.
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`

	// Name of the usage plan.
	UsagePlanName *string `json:"usagePlanName,omitempty" tf:"usage_plan_name,omitempty"`
}

type UsagePlanListParameters struct {
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceInitParameters `json:"initProvider,omitempty"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API. Use this resource to create API gateway service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.netType) || (has(self.initProvider) && has(self.initProvider.netType))",message="spec.forProvider.netType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceName) || (has(self.initProvider) && has(self.initProvider.serviceName))",message="spec.forProvider.serviceName is a required parameter"
	Spec   ServiceSpec   `json:"spec"`
	Status ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	Service_Kind             = "Service"
	Service_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Service_Kind}.String()
	Service_KindAPIVersion   = Service_Kind + "." + CRDGroupVersion.String()
	Service_GroupVersionKind = CRDGroupVersion.WithKind(Service_Kind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
