// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApiKeyAttachmentInitParameters struct {
}

type ApiKeyAttachmentObservation struct {

	// ID of API key.
	// ID of API key.
	APIKeyID *string `json:"apiKeyId,omitempty" tf:"api_key_id,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the usage plan.
	// ID of the usage plan.
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`
}

type ApiKeyAttachmentParameters struct {

	// ID of API key.
	// ID of API key.
	// +crossplane:generate:reference:type=ApiKey
	// +kubebuilder:validation:Optional
	APIKeyID *string `json:"apiKeyId,omitempty" tf:"api_key_id,omitempty"`

	// Reference to a ApiKey to populate apiKeyId.
	// +kubebuilder:validation:Optional
	APIKeyIDRef *v1.Reference `json:"apiKeyIdRef,omitempty" tf:"-"`

	// Selector for a ApiKey to populate apiKeyId.
	// +kubebuilder:validation:Optional
	APIKeyIDSelector *v1.Selector `json:"apiKeyIdSelector,omitempty" tf:"-"`

	// ID of the usage plan.
	// ID of the usage plan.
	// +crossplane:generate:reference:type=UsagePlan
	// +kubebuilder:validation:Optional
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`

	// Reference to a UsagePlan to populate usagePlanId.
	// +kubebuilder:validation:Optional
	UsagePlanIDRef *v1.Reference `json:"usagePlanIdRef,omitempty" tf:"-"`

	// Selector for a UsagePlan to populate usagePlanId.
	// +kubebuilder:validation:Optional
	UsagePlanIDSelector *v1.Selector `json:"usagePlanIdSelector,omitempty" tf:"-"`
}

// ApiKeyAttachmentSpec defines the desired state of ApiKeyAttachment
type ApiKeyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApiKeyAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApiKeyAttachmentInitParameters `json:"initProvider,omitempty"`
}

// ApiKeyAttachmentStatus defines the observed state of ApiKeyAttachment.
type ApiKeyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApiKeyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApiKeyAttachment is the Schema for the ApiKeyAttachments API. Use this resource to API gateway attach access key to usage plan.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type ApiKeyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApiKeyAttachmentSpec   `json:"spec"`
	Status            ApiKeyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApiKeyAttachmentList contains a list of ApiKeyAttachments
type ApiKeyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApiKeyAttachment `json:"items"`
}

// Repository type metadata.
var (
	ApiKeyAttachment_Kind             = "ApiKeyAttachment"
	ApiKeyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApiKeyAttachment_Kind}.String()
	ApiKeyAttachment_KindAPIVersion   = ApiKeyAttachment_Kind + "." + CRDGroupVersion.String()
	ApiKeyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(ApiKeyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&ApiKeyAttachment{}, &ApiKeyAttachmentList{})
}
