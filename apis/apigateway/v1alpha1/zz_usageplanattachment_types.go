// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UsagePlanAttachmentInitParameters struct {

	// Array of key IDs to be bound.
	// Array of key IDs to be bound.
	AccessKeyIds []*string `json:"accessKeyIds,omitempty" tf:"access_key_ids,omitempty"`

	// Binding type. Valid values: API, SERVICE. Default value is SERVICE.
	// Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
	BindType *string `json:"bindType,omitempty" tf:"bind_type,omitempty"`

	// The environment to be bound. Valid values: test, prepub, release.
	// The environment to be bound. Valid values: `test`, `prepub`, `release`.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`
}

type UsagePlanAttachmentObservation struct {

	// ID of the API. This parameter will be required when bind_type is API.
	// ID of the API. This parameter will be required when `bind_type` is `API`.
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	// Array of key IDs to be bound.
	// Array of key IDs to be bound.
	AccessKeyIds []*string `json:"accessKeyIds,omitempty" tf:"access_key_ids,omitempty"`

	// Binding type. Valid values: API, SERVICE. Default value is SERVICE.
	// Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
	BindType *string `json:"bindType,omitempty" tf:"bind_type,omitempty"`

	// The environment to be bound. Valid values: test, prepub, release.
	// The environment to be bound. Valid values: `test`, `prepub`, `release`.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the service.
	// ID of the service.
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// ID of the usage plan.
	// ID of the usage plan.
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`
}

type UsagePlanAttachmentParameters struct {

	// ID of the API. This parameter will be required when bind_type is API.
	// ID of the API. This parameter will be required when `bind_type` is `API`.
	// +crossplane:generate:reference:type=Api
	// +kubebuilder:validation:Optional
	APIID *string `json:"apiId,omitempty" tf:"api_id,omitempty"`

	// Reference to a Api to populate apiId.
	// +kubebuilder:validation:Optional
	APIIDRef *v1.Reference `json:"apiIdRef,omitempty" tf:"-"`

	// Selector for a Api to populate apiId.
	// +kubebuilder:validation:Optional
	APIIDSelector *v1.Selector `json:"apiIdSelector,omitempty" tf:"-"`

	// Array of key IDs to be bound.
	// Array of key IDs to be bound.
	// +kubebuilder:validation:Optional
	AccessKeyIds []*string `json:"accessKeyIds,omitempty" tf:"access_key_ids,omitempty"`

	// Binding type. Valid values: API, SERVICE. Default value is SERVICE.
	// Binding type. Valid values: `API`, `SERVICE`. Default value is `SERVICE`.
	// +kubebuilder:validation:Optional
	BindType *string `json:"bindType,omitempty" tf:"bind_type,omitempty"`

	// The environment to be bound. Valid values: test, prepub, release.
	// The environment to be bound. Valid values: `test`, `prepub`, `release`.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// ID of the service.
	// ID of the service.
	// +crossplane:generate:reference:type=Service
	// +kubebuilder:validation:Optional
	ServiceID *string `json:"serviceId,omitempty" tf:"service_id,omitempty"`

	// Reference to a Service to populate serviceId.
	// +kubebuilder:validation:Optional
	ServiceIDRef *v1.Reference `json:"serviceIdRef,omitempty" tf:"-"`

	// Selector for a Service to populate serviceId.
	// +kubebuilder:validation:Optional
	ServiceIDSelector *v1.Selector `json:"serviceIdSelector,omitempty" tf:"-"`

	// ID of the usage plan.
	// ID of the usage plan.
	// +crossplane:generate:reference:type=UsagePlan
	// +kubebuilder:validation:Optional
	UsagePlanID *string `json:"usagePlanId,omitempty" tf:"usage_plan_id,omitempty"`

	// Reference to a UsagePlan to populate usagePlanId.
	// +kubebuilder:validation:Optional
	UsagePlanIDRef *v1.Reference `json:"usagePlanIdRef,omitempty" tf:"-"`

	// Selector for a UsagePlan to populate usagePlanId.
	// +kubebuilder:validation:Optional
	UsagePlanIDSelector *v1.Selector `json:"usagePlanIdSelector,omitempty" tf:"-"`
}

// UsagePlanAttachmentSpec defines the desired state of UsagePlanAttachment
type UsagePlanAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UsagePlanAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UsagePlanAttachmentInitParameters `json:"initProvider,omitempty"`
}

// UsagePlanAttachmentStatus defines the observed state of UsagePlanAttachment.
type UsagePlanAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UsagePlanAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UsagePlanAttachment is the Schema for the UsagePlanAttachments API. Use this resource to attach API gateway usage plan to service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type UsagePlanAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	Spec   UsagePlanAttachmentSpec   `json:"spec"`
	Status UsagePlanAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UsagePlanAttachmentList contains a list of UsagePlanAttachments
type UsagePlanAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UsagePlanAttachment `json:"items"`
}

// Repository type metadata.
var (
	UsagePlanAttachment_Kind             = "UsagePlanAttachment"
	UsagePlanAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UsagePlanAttachment_Kind}.String()
	UsagePlanAttachment_KindAPIVersion   = UsagePlanAttachment_Kind + "." + CRDGroupVersion.String()
	UsagePlanAttachment_GroupVersionKind = CRDGroupVersion.WithKind(UsagePlanAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&UsagePlanAttachment{}, &UsagePlanAttachmentList{})
}
