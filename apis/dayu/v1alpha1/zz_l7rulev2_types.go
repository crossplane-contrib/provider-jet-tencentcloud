// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7RuleV2InitParameters struct {

	// ID of the resource that the layer 7 rule works for.
	// ID of the resource that the layer 7 rule works for.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Ip of the resource that the layer 7 rule works for.
	// Ip of the resource that the layer 7 rule works for.
	ResourceIP *string `json:"resourceIp,omitempty" tf:"resource_ip,omitempty"`

	// Type of the resource that the layer 7 rule works for, valid value is bgpip.
	// Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// A list of layer 7 rules. Each element contains the following attributes:
	// A list of layer 7 rules. Each element contains the following attributes:
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type L7RuleV2Observation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the resource that the layer 7 rule works for.
	// ID of the resource that the layer 7 rule works for.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Ip of the resource that the layer 7 rule works for.
	// Ip of the resource that the layer 7 rule works for.
	ResourceIP *string `json:"resourceIp,omitempty" tf:"resource_ip,omitempty"`

	// Type of the resource that the layer 7 rule works for, valid value is bgpip.
	// Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// A list of layer 7 rules. Each element contains the following attributes:
	// A list of layer 7 rules. Each element contains the following attributes:
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type L7RuleV2Parameters struct {

	// ID of the resource that the layer 7 rule works for.
	// ID of the resource that the layer 7 rule works for.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Ip of the resource that the layer 7 rule works for.
	// Ip of the resource that the layer 7 rule works for.
	// +kubebuilder:validation:Optional
	ResourceIP *string `json:"resourceIp,omitempty" tf:"resource_ip,omitempty"`

	// Type of the resource that the layer 7 rule works for, valid value is bgpip.
	// Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// A list of layer 7 rules. Each element contains the following attributes:
	// A list of layer 7 rules. Each element contains the following attributes:
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RuleInitParameters struct {

	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	CcEnable *float64 `json:"ccEnable,omitempty" tf:"cc_enable,omitempty"`

	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	CertType *float64 `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// Domain of the rule.
	// Domain of the rule.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	HTTPSToHTTPEnable *float64 `json:"httpsToHttpEnable,omitempty" tf:"https_to_http_enable,omitempty"`

	// session hold switch.
	// session hold switch.
	KeepEnable *float64 `json:"keepEnable,omitempty" tf:"keep_enable,omitempty"`

	// The keeptime of the layer 4 rule.
	// The keeptime of the layer 4 rule.
	Keeptime *float64 `json:"keeptime,omitempty" tf:"keeptime,omitempty"`

	// LB type of the rule, 1 for weight cycling and 2 for IP hash.
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LBType *float64 `json:"lbType,omitempty" tf:"lb_type,omitempty"`

	// Protocol of the rule.
	// Protocol of the rule.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	SSLID *string `json:"sslId,omitempty" tf:"ssl_id,omitempty"`

	SourceList []RuleSourceListInitParameters `json:"sourceList,omitempty" tf:"source_list,omitempty"`

	// Source type, 1 for source of host, 2 for source of IP.
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType *float64 `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type RuleObservation struct {

	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	CcEnable *float64 `json:"ccEnable,omitempty" tf:"cc_enable,omitempty"`

	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	CertType *float64 `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// Domain of the rule.
	// Domain of the rule.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	HTTPSToHTTPEnable *float64 `json:"httpsToHttpEnable,omitempty" tf:"https_to_http_enable,omitempty"`

	// session hold switch.
	// session hold switch.
	KeepEnable *float64 `json:"keepEnable,omitempty" tf:"keep_enable,omitempty"`

	// The keeptime of the layer 4 rule.
	// The keeptime of the layer 4 rule.
	Keeptime *float64 `json:"keeptime,omitempty" tf:"keeptime,omitempty"`

	// LB type of the rule, 1 for weight cycling and 2 for IP hash.
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LBType *float64 `json:"lbType,omitempty" tf:"lb_type,omitempty"`

	// Protocol of the rule.
	// Protocol of the rule.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	SSLID *string `json:"sslId,omitempty" tf:"ssl_id,omitempty"`

	SourceList []RuleSourceListObservation `json:"sourceList,omitempty" tf:"source_list,omitempty"`

	// Source type, 1 for source of host, 2 for source of IP.
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType *float64 `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type RuleParameters struct {

	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	// +kubebuilder:validation:Optional
	CcEnable *float64 `json:"ccEnable,omitempty" tf:"cc_enable,omitempty"`

	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	// +kubebuilder:validation:Optional
	CertType *float64 `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// Domain of the rule.
	// Domain of the rule.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	// +kubebuilder:validation:Optional
	HTTPSToHTTPEnable *float64 `json:"httpsToHttpEnable,omitempty" tf:"https_to_http_enable,omitempty"`

	// session hold switch.
	// session hold switch.
	// +kubebuilder:validation:Optional
	KeepEnable *float64 `json:"keepEnable" tf:"keep_enable,omitempty"`

	// The keeptime of the layer 4 rule.
	// The keeptime of the layer 4 rule.
	// +kubebuilder:validation:Optional
	Keeptime *float64 `json:"keeptime" tf:"keeptime,omitempty"`

	// LB type of the rule, 1 for weight cycling and 2 for IP hash.
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	// +kubebuilder:validation:Optional
	LBType *float64 `json:"lbType" tf:"lb_type,omitempty"`

	// Protocol of the rule.
	// Protocol of the rule.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	// +kubebuilder:validation:Optional
	SSLID *string `json:"sslId,omitempty" tf:"ssl_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceList []RuleSourceListParameters `json:"sourceList" tf:"source_list,omitempty"`

	// Source type, 1 for source of host, 2 for source of IP.
	// Source type, `1` for source of host, `2` for source of IP.
	// +kubebuilder:validation:Optional
	SourceType *float64 `json:"sourceType" tf:"source_type,omitempty"`
}

type RuleSourceListInitParameters struct {

	// Source IP or domain.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Weight of the source.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RuleSourceListObservation struct {

	// Source IP or domain.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Weight of the source.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RuleSourceListParameters struct {

	// Source IP or domain.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// Weight of the source.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// L7RuleV2Spec defines the desired state of L7RuleV2
type L7RuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7RuleV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider L7RuleV2InitParameters `json:"initProvider,omitempty"`
}

// L7RuleV2Status defines the observed state of L7RuleV2.
type L7RuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7RuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleV2 is the Schema for the L7RuleV2s API. Use this resource to create dayu new layer 7 rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type L7RuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceIp) || (has(self.initProvider) && has(self.initProvider.resourceIp))",message="spec.forProvider.resourceIp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	Spec   L7RuleV2Spec   `json:"spec"`
	Status L7RuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleV2List contains a list of L7RuleV2s
type L7RuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7RuleV2 `json:"items"`
}

// Repository type metadata.
var (
	L7RuleV2_Kind             = "L7RuleV2"
	L7RuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7RuleV2_Kind}.String()
	L7RuleV2_KindAPIVersion   = L7RuleV2_Kind + "." + CRDGroupVersion.String()
	L7RuleV2_GroupVersionKind = CRDGroupVersion.WithKind(L7RuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&L7RuleV2{}, &L7RuleV2List{})
}
