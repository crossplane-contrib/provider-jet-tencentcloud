// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CcHttpPolicyInitParameters struct {

	// Action mode, only valid when smode is matching. Valid values are alg and drop.
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Max frequency per minute, only valid when smode is speedlimit, the valid value ranges from 1 to 10000.
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Ip of the CC self-define http policy, only valid when resource_type is bgp-multip. The num of list items can only be set one.
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be set one.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the CC self-define http policy. Length should between 1 and 20.
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the resource that the CC self-define http policy works for.
	// ID of the resource that the CC self-define http policy works for.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the CC self-define http policy works for, valid values are bgpip, bgp, bgp-multip and net.
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Rule list of the CC self-define http policy,  only valid when smode is matching.
	// Rule list of the CC self-define http policy,  only valid when `smode` is `matching`.
	RuleList []RuleListInitParameters `json:"ruleList,omitempty" tf:"rule_list,omitempty"`

	// Match mode, and valid values are matching, speedlimit. Note: the speed limit type CC self-define policy can only set one.
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set one.
	Smode *string `json:"smode,omitempty" tf:"smode,omitempty"`

	// Indicate the CC self-define http policy takes effect or not.
	// Indicate the CC self-define http policy takes effect or not.
	Switch *bool `json:"switch,omitempty" tf:"switch,omitempty"`
}

type CcHttpPolicyObservation struct {

	// Action mode, only valid when smode is matching. Valid values are alg and drop.
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Create time of the CC self-define http policy.
	// Create time of the CC self-define http policy.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Max frequency per minute, only valid when smode is speedlimit, the valid value ranges from 1 to 10000.
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Ip of the CC self-define http policy, only valid when resource_type is bgp-multip. The num of list items can only be set one.
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be set one.
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the CC self-define http policy. Length should between 1 and 20.
	// Name of the CC self-define http policy. Length should between 1 and 20.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Id of the CC self-define http policy.
	// Id of the CC self-define http policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// ID of the resource that the CC self-define http policy works for.
	// ID of the resource that the CC self-define http policy works for.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the CC self-define http policy works for, valid values are bgpip, bgp, bgp-multip and net.
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Rule list of the CC self-define http policy,  only valid when smode is matching.
	// Rule list of the CC self-define http policy,  only valid when `smode` is `matching`.
	RuleList []RuleListObservation `json:"ruleList,omitempty" tf:"rule_list,omitempty"`

	// Match mode, and valid values are matching, speedlimit. Note: the speed limit type CC self-define policy can only set one.
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set one.
	Smode *string `json:"smode,omitempty" tf:"smode,omitempty"`

	// Indicate the CC self-define http policy takes effect or not.
	// Indicate the CC self-define http policy takes effect or not.
	Switch *bool `json:"switch,omitempty" tf:"switch,omitempty"`
}

type CcHttpPolicyParameters struct {

	// Action mode, only valid when smode is matching. Valid values are alg and drop.
	// Action mode, only valid when `smode` is `matching`. Valid values are `alg` and `drop`.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Max frequency per minute, only valid when smode is speedlimit, the valid value ranges from 1 to 10000.
	// Max frequency per minute, only valid when `smode` is `speedlimit`, the valid value ranges from 1 to 10000.
	// +kubebuilder:validation:Optional
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// Ip of the CC self-define http policy, only valid when resource_type is bgp-multip. The num of list items can only be set one.
	// Ip of the CC self-define http policy, only valid when `resource_type` is `bgp-multip`. The num of list items can only be set one.
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// Name of the CC self-define http policy. Length should between 1 and 20.
	// Name of the CC self-define http policy. Length should between 1 and 20.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the resource that the CC self-define http policy works for.
	// ID of the resource that the CC self-define http policy works for.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the CC self-define http policy works for, valid values are bgpip, bgp, bgp-multip and net.
	// Type of the resource that the CC self-define http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// Rule list of the CC self-define http policy,  only valid when smode is matching.
	// Rule list of the CC self-define http policy,  only valid when `smode` is `matching`.
	// +kubebuilder:validation:Optional
	RuleList []RuleListParameters `json:"ruleList,omitempty" tf:"rule_list,omitempty"`

	// Match mode, and valid values are matching, speedlimit. Note: the speed limit type CC self-define policy can only set one.
	// Match mode, and valid values are `matching`, `speedlimit`. Note: the speed limit type CC self-define policy can only set one.
	// +kubebuilder:validation:Optional
	Smode *string `json:"smode,omitempty" tf:"smode,omitempty"`

	// Indicate the CC self-define http policy takes effect or not.
	// Indicate the CC self-define http policy takes effect or not.
	// +kubebuilder:validation:Optional
	Switch *bool `json:"switch,omitempty" tf:"switch,omitempty"`
}

type RuleListInitParameters struct {

	// Operator of the rule. Valid values: include, not_include, equal.
	// Operator of the rule. Valid values: `include`, `not_include`, `equal`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Key of the rule. Valid values: host, cgi, ua, referer.
	// Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
	Skey *string `json:"skey,omitempty" tf:"skey,omitempty"`

	// Rule value, then length should be less than 31 bytes.
	// Rule value, then length should be less than 31 bytes.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RuleListObservation struct {

	// Operator of the rule. Valid values: include, not_include, equal.
	// Operator of the rule. Valid values: `include`, `not_include`, `equal`.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Key of the rule. Valid values: host, cgi, ua, referer.
	// Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
	Skey *string `json:"skey,omitempty" tf:"skey,omitempty"`

	// Rule value, then length should be less than 31 bytes.
	// Rule value, then length should be less than 31 bytes.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RuleListParameters struct {

	// Operator of the rule. Valid values: include, not_include, equal.
	// Operator of the rule. Valid values: `include`, `not_include`, `equal`.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Key of the rule. Valid values: host, cgi, ua, referer.
	// Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
	// +kubebuilder:validation:Optional
	Skey *string `json:"skey,omitempty" tf:"skey,omitempty"`

	// Rule value, then length should be less than 31 bytes.
	// Rule value, then length should be less than 31 bytes.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// CcHttpPolicySpec defines the desired state of CcHttpPolicy
type CcHttpPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CcHttpPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CcHttpPolicyInitParameters `json:"initProvider,omitempty"`
}

// CcHttpPolicyStatus defines the observed state of CcHttpPolicy.
type CcHttpPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CcHttpPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CcHttpPolicy is the Schema for the CcHttpPolicys API. Use this resource to create a dayu CC self-define http policy
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type CcHttpPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	Spec   CcHttpPolicySpec   `json:"spec"`
	Status CcHttpPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CcHttpPolicyList contains a list of CcHttpPolicys
type CcHttpPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CcHttpPolicy `json:"items"`
}

// Repository type metadata.
var (
	CcHttpPolicy_Kind             = "CcHttpPolicy"
	CcHttpPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CcHttpPolicy_Kind}.String()
	CcHttpPolicy_KindAPIVersion   = CcHttpPolicy_Kind + "." + CRDGroupVersion.String()
	CcHttpPolicy_GroupVersionKind = CRDGroupVersion.WithKind(CcHttpPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CcHttpPolicy{}, &CcHttpPolicyList{})
}
