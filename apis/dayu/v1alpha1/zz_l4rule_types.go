// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L4RuleInitParameters struct {

	// The destination port of the L4 rule.
	// The destination port of the L4 rule.
	DPort *float64 `json:"dPort,omitempty" tf:"d_port,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
	// Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// Indicates whether health check is enabled. The default is false. Only valid when source list has more than one source item.
	// Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// HTTP Status Code. The default is 26 and value range is 2-60.
	// HTTP Status Code. The default is 26 and value range is 2-60.
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Name of the rule. When the resource_type is net, this field should be set with valid domain.
	// Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Protocol of the rule. Valid values: http, https. When source_type is 1(host source), the value of this field can only set with tcp.
	// Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the resource that the layer 4 rule works for.
	// ID of the resource that the layer 4 rule works for.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the layer 4 rule works for. Valid values: bgpip and net.
	// Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// The source port of the L4 rule.
	// The source port of the L4 rule.
	SPort *float64 `json:"sPort,omitempty" tf:"s_port,omitempty"`

	// Indicate that the session will keep or not, and default value is false.
	// Indicate that the session will keep or not, and default value is `false`.
	SessionSwitch *bool `json:"sessionSwitch,omitempty" tf:"session_switch,omitempty"`

	// Session keep time, only valid when session_switch is true, the available value ranges from 1 to 300 and unit is second.
	// Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
	SessionTime *float64 `json:"sessionTime,omitempty" tf:"session_time,omitempty"`

	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
	SourceList []SourceListInitParameters `json:"sourceList,omitempty" tf:"source_list,omitempty"`

	// Source type, 1 for source of host, 2 for source of IP.
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType *float64 `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type L4RuleObservation struct {

	// The destination port of the L4 rule.
	// The destination port of the L4 rule.
	DPort *float64 `json:"dPort,omitempty" tf:"d_port,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
	// Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// Indicates whether health check is enabled. The default is false. Only valid when source list has more than one source item.
	// Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// HTTP Status Code. The default is 26 and value range is 2-60.
	// HTTP Status Code. The default is 26 and value range is 2-60.
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// LB type of the rule. Valid values: 1, 2. 1 for weight cycling and 2 for IP hash.
	// LB type of the rule. Valid values: `1`, `2`. `1` for weight cycling and `2` for IP hash.
	LBType *float64 `json:"lbType,omitempty" tf:"lb_type,omitempty"`

	// Name of the rule. When the resource_type is net, this field should be set with valid domain.
	// Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Protocol of the rule. Valid values: http, https. When source_type is 1(host source), the value of this field can only set with tcp.
	// Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the resource that the layer 4 rule works for.
	// ID of the resource that the layer 4 rule works for.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the layer 4 rule works for. Valid values: bgpip and net.
	// Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// ID of the layer 4 rule.
	// ID of the layer 4 rule.
	RuleID *string `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// The source port of the L4 rule.
	// The source port of the L4 rule.
	SPort *float64 `json:"sPort,omitempty" tf:"s_port,omitempty"`

	// Indicate that the session will keep or not, and default value is false.
	// Indicate that the session will keep or not, and default value is `false`.
	SessionSwitch *bool `json:"sessionSwitch,omitempty" tf:"session_switch,omitempty"`

	// Session keep time, only valid when session_switch is true, the available value ranges from 1 to 300 and unit is second.
	// Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
	SessionTime *float64 `json:"sessionTime,omitempty" tf:"session_time,omitempty"`

	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
	SourceList []SourceListObservation `json:"sourceList,omitempty" tf:"source_list,omitempty"`

	// Source type, 1 for source of host, 2 for source of IP.
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType *float64 `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type L4RuleParameters struct {

	// The destination port of the L4 rule.
	// The destination port of the L4 rule.
	// +kubebuilder:validation:Optional
	DPort *float64 `json:"dPort,omitempty" tf:"d_port,omitempty"`

	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
	// Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
	// +kubebuilder:validation:Optional
	HealthCheckHealthNum *float64 `json:"healthCheckHealthNum,omitempty" tf:"health_check_health_num,omitempty"`

	// Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
	// Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
	// +kubebuilder:validation:Optional
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// Indicates whether health check is enabled. The default is false. Only valid when source list has more than one source item.
	// Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
	// +kubebuilder:validation:Optional
	HealthCheckSwitch *bool `json:"healthCheckSwitch,omitempty" tf:"health_check_switch,omitempty"`

	// HTTP Status Code. The default is 26 and value range is 2-60.
	// HTTP Status Code. The default is 26 and value range is 2-60.
	// +kubebuilder:validation:Optional
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
	// Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
	// +kubebuilder:validation:Optional
	HealthCheckUnhealthNum *float64 `json:"healthCheckUnhealthNum,omitempty" tf:"health_check_unhealth_num,omitempty"`

	// Name of the rule. When the resource_type is net, this field should be set with valid domain.
	// Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Protocol of the rule. Valid values: http, https. When source_type is 1(host source), the value of this field can only set with tcp.
	// Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// ID of the resource that the layer 4 rule works for.
	// ID of the resource that the layer 4 rule works for.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the layer 4 rule works for. Valid values: bgpip and net.
	// Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// The source port of the L4 rule.
	// The source port of the L4 rule.
	// +kubebuilder:validation:Optional
	SPort *float64 `json:"sPort,omitempty" tf:"s_port,omitempty"`

	// Indicate that the session will keep or not, and default value is false.
	// Indicate that the session will keep or not, and default value is `false`.
	// +kubebuilder:validation:Optional
	SessionSwitch *bool `json:"sessionSwitch,omitempty" tf:"session_switch,omitempty"`

	// Session keep time, only valid when session_switch is true, the available value ranges from 1 to 300 and unit is second.
	// Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
	// +kubebuilder:validation:Optional
	SessionTime *float64 `json:"sessionTime,omitempty" tf:"session_time,omitempty"`

	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
	// Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
	// +kubebuilder:validation:Optional
	SourceList []SourceListParameters `json:"sourceList,omitempty" tf:"source_list,omitempty"`

	// Source type, 1 for source of host, 2 for source of IP.
	// Source type, `1` for source of host, `2` for source of IP.
	// +kubebuilder:validation:Optional
	SourceType *float64 `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type SourceListInitParameters struct {

	// Source IP or domain, valid format of ip is like 1.1.1.1 and valid format of host source is like abc.com.
	// Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Weight of the source, the valid value ranges from 0 to 100.
	// Weight of the source, the valid value ranges from 0 to 100.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type SourceListObservation struct {

	// Source IP or domain, valid format of ip is like 1.1.1.1 and valid format of host source is like abc.com.
	// Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Weight of the source, the valid value ranges from 0 to 100.
	// Weight of the source, the valid value ranges from 0 to 100.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type SourceListParameters struct {

	// Source IP or domain, valid format of ip is like 1.1.1.1 and valid format of host source is like abc.com.
	// Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
	// +kubebuilder:validation:Optional
	Source *string `json:"source" tf:"source,omitempty"`

	// Weight of the source, the valid value ranges from 0 to 100.
	// Weight of the source, the valid value ranges from 0 to 100.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// L4RuleSpec defines the desired state of L4Rule
type L4RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L4RuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider L4RuleInitParameters `json:"initProvider,omitempty"`
}

// L4RuleStatus defines the observed state of L4Rule.
type L4RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L4RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L4Rule is the Schema for the L4Rules API. Use this resource to create dayu layer 4 rule
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type L4Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dPort) || (has(self.initProvider) && has(self.initProvider.dPort))",message="spec.forProvider.dPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.protocol) || (has(self.initProvider) && has(self.initProvider.protocol))",message="spec.forProvider.protocol is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sPort) || (has(self.initProvider) && has(self.initProvider.sPort))",message="spec.forProvider.sPort is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceList) || (has(self.initProvider) && has(self.initProvider.sourceList))",message="spec.forProvider.sourceList is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sourceType) || (has(self.initProvider) && has(self.initProvider.sourceType))",message="spec.forProvider.sourceType is a required parameter"
	Spec   L4RuleSpec   `json:"spec"`
	Status L4RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L4RuleList contains a list of L4Rules
type L4RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L4Rule `json:"items"`
}

// Repository type metadata.
var (
	L4Rule_Kind             = "L4Rule"
	L4Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L4Rule_Kind}.String()
	L4Rule_KindAPIVersion   = L4Rule_Kind + "." + CRDGroupVersion.String()
	L4Rule_GroupVersionKind = CRDGroupVersion.WithKind(L4Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&L4Rule{}, &L4RuleList{})
}
