// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DdosPolicyAttachmentInitParameters struct {

	// ID of the policy.
	// ID of the policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// ID of the attached resource.
	// ID of the attached resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the DDoS policy works for. Valid values are bgpip, bgp, bgp-multip, net.
	// Type of the resource that the DDoS policy works for. Valid values are `bgpip`, `bgp`, `bgp-multip`, `net`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type DdosPolicyAttachmentObservation struct {

	// ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the policy.
	// ID of the policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// ID of the attached resource.
	// ID of the attached resource.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the DDoS policy works for. Valid values are bgpip, bgp, bgp-multip, net.
	// Type of the resource that the DDoS policy works for. Valid values are `bgpip`, `bgp`, `bgp-multip`, `net`.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

type DdosPolicyAttachmentParameters struct {

	// ID of the policy.
	// ID of the policy.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// ID of the attached resource.
	// ID of the attached resource.
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Type of the resource that the DDoS policy works for. Valid values are bgpip, bgp, bgp-multip, net.
	// Type of the resource that the DDoS policy works for. Valid values are `bgpip`, `bgp`, `bgp-multip`, `net`.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`
}

// DdosPolicyAttachmentSpec defines the desired state of DdosPolicyAttachment
type DdosPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DdosPolicyAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DdosPolicyAttachmentInitParameters `json:"initProvider,omitempty"`
}

// DdosPolicyAttachmentStatus defines the observed state of DdosPolicyAttachment.
type DdosPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DdosPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DdosPolicyAttachment is the Schema for the DdosPolicyAttachments API. Provides a resource to create a dayu DDoS policy attachment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tencentcloud}
type DdosPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceId) || (has(self.initProvider) && has(self.initProvider.resourceId))",message="spec.forProvider.resourceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceType) || (has(self.initProvider) && has(self.initProvider.resourceType))",message="spec.forProvider.resourceType is a required parameter"
	Spec   DdosPolicyAttachmentSpec   `json:"spec"`
	Status DdosPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DdosPolicyAttachmentList contains a list of DdosPolicyAttachments
type DdosPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DdosPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	DdosPolicyAttachment_Kind             = "DdosPolicyAttachment"
	DdosPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DdosPolicyAttachment_Kind}.String()
	DdosPolicyAttachment_KindAPIVersion   = DdosPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	DdosPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(DdosPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&DdosPolicyAttachment{}, &DdosPolicyAttachmentList{})
}
